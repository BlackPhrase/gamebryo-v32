// EMERGENT GAME TECHNOLOGIES PROPRIETARY INFORMATION
//
// This software is supplied under the terms of a license agreement or
// nondisclosure agreement with Emergent Game Technologies and may not
// be copied or disclosed except in accordance with the terms of that
// agreement.
//
//      Copyright (c) 1996-2009 Emergent Game Technologies.
//      All Rights Reserved.
//
// Emergent Game Technologies, Calabasas, CA 91302
// http://www.emergent.net

//
// SWIG Lua bindings for efd::Quaternion.
//
%module Quaternion;

%import <egfLua/MemObjectBindHelperLua.i>


// Two different implementations of Slerp; ignore the second one.
%ignore efd::Quaternion::Slerp(efd::Float32 t,const Quaternion& p,const Quaternion& q, Quaternion* pResults);
%ignore efd::Quaternion::Normalize;
%ignore efd::Quaternion::FastNormalize;


// Make this an explicit function so it doesn't conflict with Quaternion::operator*
%rename(ScalarMultiply) operator*(efd::Float32 scalar, const Quaternion& pt);
%rename(x) efd::Quaternion::m_x;
%rename(y) efd::Quaternion::m_y;
%rename(z) efd::Quaternion::m_z;
%rename(w) efd::Quaternion::m_w;

//
//   Override the default versions of these functions generated by SWIG to ensure we use
//   the correct allocator. By default SWIG uses the standard allocator. We want SWIG to
//   use the Emergent allocator when creating instances of this type.
//
namespace efd
{

%exception Quaternion::Quaternion(efd::Float32 angle, const efd::Point3& axis)
{
    result = EE_NEW efd::Quaternion(arg1, *arg2);
}

%exception Quaternion::Quaternion(efd::Float32, efd::Float32, efd::Float32, efd::Float32)
{
   result = EE_NEW efd::Quaternion(arg1, arg2, arg3, arg4);
}

} // namespace efd


// Use the macro defined in MemObjectBindHelperLua.i to add additional class overrides,
// methods, and typemaps. This also sets up certain header includes required when
// wrapping the class.
EE_SWIG_DEFINE_MEMOBJECT_SWIG_CLASS(efd, Quaternion)

// Add a __str__ function used in Lua when tostring is called on our object.
EE_SWIG_ADD_STR_FUNCTION(efd, Quaternion, "Quaternion(%.6f, %.6f, %.6f, %.6f)", $self->m_w, $self->m_x, $self->m_y, $self->m_z);

// Add support for operator[]
namespace efd
{

%extend Quaternion
{
    //
    // SWIG cannot automatically generated operator[] but we can do it manually
    // by implementing __getitem__ and __setitem__
    //
    efd::Float32 __getitem__(efd::SInt32 index) const
    {
        // Verify the index is valid.
        if (abs(index) > 4)
        {
            // If you hit this assert you attempted to index an object from Lua past the end
            // of the object's array bounds.
            EE_ASSERT(abs(index) > 4);
            return 0;
        }
    
        // If index is negative, start from the back.
        if (index < 0) index = 4 - index + 1;
        
        if (index == 1) return $self->m_w;
        else if (index == 2) return $self->m_x;
        else if (index == 3) return $self->m_y;
        else return $self->m_z;
    }
    void __setitem__(efd::SInt32 index, efd::Float32 val)
    {
        // Verify the index is valid.
        if (abs(index) > 4)
        {
            // If you hit this assert you attempted to index an object from Lua past the end
            // of the object's array bounds.
            EE_ASSERT(abs(index) > 4);
            return;            
        }
    
        // If index is negative, start from the back.
        if (index < 0) index = 4 - index + 1;
        
        if (index == 1) $self->SetW(val);
        else if (index == 2) $self->SetX(val);
        else if (index == 3) $self->SetY(val);
        else $self->SetZ(val);    
    }

}

}

%{
#include <efd/Matrix3.h>
#include <efd/Quaternion.h>
%}

%import <efd/Matrix3.h>
%include "efd/Quaternion.h"
