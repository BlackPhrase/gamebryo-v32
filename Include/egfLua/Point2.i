// EMERGENT GAME TECHNOLOGIES PROPRIETARY INFORMATION
//
// This software is supplied under the terms of a license agreement or
// nondisclosure agreement with Emergent Game Technologies and may not
// be copied or disclosed except in accordance with the terms of that
// agreement.
//
//      Copyright (c) 1996-2009 Emergent Game Technologies.
//      All Rights Reserved.
//
// Emergent Game Technologies, Calabasas, CA 91302
// http://www.emergent.net

//
// SWIG Lua bindings for efd::Point2.
//
%module Point2;

%import <egfLua/MemObjectBindHelperLua.i>

// Make this an explicit function so it doesn't conflict with Point2::operator*
%rename(ScalarMultiply) operator*(efd::Float32 scalar, const Point2& pt);


//
//   Override the default versions of these functions generated by SWIG to ensure we use
//   the correct allocator. By default SWIG uses the standard allocator. We want SWIG to
//   use the Emergent allocator when creating instances of this type.
//
namespace efd
{
%exception Point2::Point2(efd::Float32, efd::Float32)
{
   result = EE_NEW efd::Point2(arg1, arg2);
}

} // namespace efd


// Use the macro defined in MemObjectBindHelperLua.i to add additional class overrides,
// methods, and typemaps. This also sets up certain header includes required when
// wrapping the class.
EE_SWIG_DEFINE_MEMOBJECT_SWIG_CLASS(efd, Point2)

// Add a __str__ function used in Lua when tostring is called on our object.
EE_SWIG_ADD_STR_FUNCTION(efd, Point2, "Point2(%.6f, %.6f)", $self->x, $self->y);

// Add support for operator[]
EE_SWIG_ADD_ARRAY_ACCESSORS(efd, Point2, 2);

%{
#include <efd/Point2.h>
%}

%include "efd/Point2.h"
