<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Emergent.Toolbench.WorldBuilder</name>
    </assembly>
    <members>
        <member name="T:Emergent.Toolbench.WorldBuilder.SelectionSetAspect">
            <summary>
            Implements the election set interface.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.WorldBuilder.SelectionSetAspect.OnContentConnected">
            <summary>
            Connects the entity aspect to the specified content if it is a 
            world document.
            </summary>
            <param name="content">The content to connect to.</param>
            <returns>True if connected, false otherwise.</returns>
        </member>
        <member name="M:Emergent.Toolbench.WorldBuilder.SelectionSetAspect.OnContentDisconnected">
            <summary>
            Called just before the aspect is removed from the content it is
            currently attached to.
            </summary>        
        </member>
        <member name="M:Emergent.Toolbench.WorldBuilder.SelectionSetAspect.ToXml">
            <summary>
            Gets an XML representation of the data stored on the aspect. This
            XML representation is serialized to the world document XML file
            when the world document is saved.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Emergent.Toolbench.WorldBuilder.LocalEntityAspect">
            <summary>
            Implements the entity aspect interface.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.WorldBuilder.LocalEntityAspect.OnContentConnected">
            <summary>
            Connects the entity aspect to the specified content if it is a 
            world document.
            </summary>
            <param name="content">The content to connect to.</param>
            <returns>True if connected, false otherwise.</returns>
        </member>
        <member name="M:Emergent.Toolbench.WorldBuilder.LocalEntityAspect.GetEntities(Emergent.Toolbench.EntityModeling.EntityModel)">
            <summary>
            Gets an array of entities that have been instanced from the
            specified model.
            </summary>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="M:Emergent.Toolbench.WorldBuilder.LocalEntityAspect.FindEntity(System.Guid)">
            <summary>
            Searches for an entity with the specified unique id.
            </summary>
            <param name="uniqueId">Unique id of the entity to find.</param>
            <returns>A valid entity of null if an entity with the specified 
                unique id could not be found.
            </returns>
        </member>
        <member name="M:Emergent.Toolbench.WorldBuilder.LocalEntityAspect.LazyInitialize">
            <summary>
            Initializes the list of entities and extracts the information.  Only runs once even if
            called multiple times.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.WorldBuilder.LocalEntityAspect.LazyInitialize(System.Boolean)">
            <summary>
            Initializes the list of entities and extracts the information.  Only runs once even if
            called multiple times, unless parameter reload is true.
            </summary>
            <param name="reload">If true, entities will be loaded even if the function
            was previously called. This is valid ONLY if m_entities is empty, and happens
            ONLY if the layer was not loaded and is now being loaded.</param>
        </member>
        <member name="M:Emergent.Toolbench.WorldBuilder.LocalEntityAspect.LoadEntitiesFromDefinition">
            <summary>
            Loads entities from the layer's current XML definition.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.WorldBuilder.LocalEntityAspect.AddEntity(Emergent.Toolbench.WorldBuilder.Entity,System.Boolean)">
            <summary>
            Adds a new entity to the entity aspect as well as to the associated
            world document.
            </summary>
            <param name="newEntity">The new entity to add.</param>
            <param name="fireEvent">True if an entity added event should be 
                fired.
            </param>
        </member>
        <member name="M:Emergent.Toolbench.WorldBuilder.LocalEntityAspect.RemoveEntity(Emergent.Toolbench.WorldBuilder.Entity,System.Boolean)">
            <summary>
            Removes an existing entity from the entity aspect.
            </summary>
            <param name="entity">The entity to remove.
            </param>
        </member>
        <member name="M:Emergent.Toolbench.WorldBuilder.LocalEntityAspect.RemoveEntity(System.Guid,System.Boolean)">
            <summary>
            Removes an existing entity from the entity aspect.
            </summary>
            <param name="entityId">The unique id of the entity to remove.
            </param>
        </member>
        <member name="M:Emergent.Toolbench.WorldBuilder.LocalEntityAspect.ExtractEntities(System.Xml.Linq.XDocument,System.Boolean)">
            <summary>
            Extracts the entities from the specified world document XML data.
            </summary>
            <param name="xmlDocument">The XML document.</param>
        </member>
        <member name="M:Emergent.Toolbench.WorldBuilder.LocalEntityAspect.ExtractEntityModelPropertyOverrides(System.Xml.Linq.XElement,Emergent.Toolbench.WorldBuilder.Entity)">
            <summary>
            Searches the specified entity xml node for any properties and overrides them on the 
            specified entity if any are encountered.
            </summary>
            <param name="entityNode">Entity XML node definition.</param>
            <param name="newEntity">Entity with which to override properties.
            </param>
        </member>
        <member name="M:Emergent.Toolbench.WorldBuilder.LocalEntityAspect.ExtractEntityPropertyList(System.Xml.Linq.XElement,Emergent.Toolbench.EntityModeling.EntityModelProperty)">
            <summary>
            Loads all members of a list-based entity property from XML.
            </summary>
            <param name="propertyNode">Entity property XML node.</param>
            <param name="property">The property.</param>
        </member>
        <member name="M:Emergent.Toolbench.WorldBuilder.LocalEntityAspect.ExtractEntityPropertyMap(System.Xml.Linq.XElement,Emergent.Toolbench.EntityModeling.EntityModelProperty)">
            <summary>
            Loads all members of a map-based entity property from XML.
            </summary>
            <param name="propertyNode">Entity property XML node.</param>
            <param name="entityProp">Entity property being loaded.</param>
        </member>
        <member name="M:Emergent.Toolbench.WorldBuilder.LocalEntityAspect.ExtractEntityPropertyValue(System.Xml.Linq.XElement,Emergent.Toolbench.EntityModeling.EntityModelProperty)">
            <summary>
            Loads the value for a simple entity property from XML.  Assumes the property type is not
            a collection.
            </summary>
            <param name="propertyNode">Entity property XML node.</param>
            <param name="property">The property.</param>
        </member>
        <member name="M:Emergent.Toolbench.WorldBuilder.LocalEntityAspect.OnEntityModelChanged(System.Object,System.EventArgs)">
            <summary>
            Called when the entity model changes.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Emergent.Toolbench.WorldBuilder.LocalEntityAspect.OnEntityChanged(System.Object,System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            Called when an entity in the aspect has been modified. This method
            dirties the world document.
            </summary>
            <param name="prop"></param>
        </member>
        <member name="M:Emergent.Toolbench.WorldBuilder.LocalEntityAspect.ToXml">
            <summary>
            Gets an XML representation of the data stored on the aspect. This
            XML representation is serialized to the world document XML file
            when the world document is saved.
            </summary>
            <returns></returns>
        </member>
        <member name="E:Emergent.Toolbench.WorldBuilder.LocalEntityAspect.EntityAdded">
            <summary>
            Fired when an entity is added to the entity aspect.
            </summary>
        </member>
        <member name="E:Emergent.Toolbench.WorldBuilder.LocalEntityAspect.EntityRemoved">
            <summary>
            Fired when an entity is removed from the entity aspect.
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.WorldBuilder.LocalEntityAspect.Entities">
            <summary>
            Gets the entities currently instantiated in the entity aspect.
            </summary>
            <value>The entity instances.</value>
        </member>
        <member name="P:Emergent.Toolbench.WorldBuilder.LocalEntityAspect.EntityPalette">
            <summary>
            Gets the entities currently instantiated in the entity aspect.
            </summary>
            <value>The entity instances.</value>
        </member>
        <member name="T:Emergent.Toolbench.WorldBuilder.LocalEntityAspect.EntityReader">
            <summary>
            This class is responsible for extracting the information for a single entity and 
            reporting that it has completed its task to the owner thread.
            </summary>
        </member>
        <member name="T:Emergent.Toolbench.WorldBuilder.DemoWorldAction">
            <summary>
            Loads the active block document into a demo app.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.WorldBuilder.DemoWorldAction.Execute(Emergent.Toolbench.Actions.ExecutionContext,Emergent.Toolbench.Actions.ExecutionStyle)">
            <summary>
            Demos the active block document in an external app.
            </summary>
            <param name="context">The execution context of the action.</param>
            <param name="style">The execution style of the action.</param>
            <returns>The execution result.</returns>
        </member>
        <member name="M:Emergent.Toolbench.WorldBuilder.DemoWorldAction.FindDemoPath">
            <summary>
            Retrieves the setting for TestContentAppPath.
            </summary>
            <returns>Path to the application for testing World Builder content.</returns>
        </member>
        <member name="M:Emergent.Toolbench.WorldBuilder.DemoWorldAction.FindDemoParameters">
            <summary>
            Retrieves the setting for TestContentAppParameters.
            </summary>
            <returns>Parameters to add to the World Builder content test application launch.
            </returns>
        </member>
        <member name="M:Emergent.Toolbench.WorldBuilder.DemoWorldAction.FindDemoFolder">
            <summary>
            Retrieves the setting for TestContentAppWorkingFolder.
            </summary>
            <returns>The working folder for the World Builder content test application.</returns>
        </member>
        <member name="T:Emergent.Toolbench.WorldBuilder.AddEntityAction">
            <summary>
            This action implementation handles adding entities to an entity aspect.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.WorldBuilder.AddEntityAction.#ctor">
            <summary>
            NULL Constructor for macro construction.
            </summary>
            <param name="entity">The entity to be edited.</param>
            <param name="property">The property that should be changed.</param>
            <param name="newValue">The new value of the property.</param>
        </member>
        <member name="M:Emergent.Toolbench.WorldBuilder.AddEntityAction.#ctor(Emergent.Toolbench.WorldBuilder.GlobalEntityAspect,Emergent.Toolbench.WorldBuilder.Entity)">
            <summary>
            Constructs the add entity action.
            </summary>
            <param name="aspect">The entity aspect with which to operate on.
            </param>
            <param name="newEntity">The new entity to add to the aspect.
            </param>
        </member>
        <member name="M:Emergent.Toolbench.WorldBuilder.AddEntityAction.EndUndo">
            <summary>
            Removes the entity that was added by this action from the entity 
            aspect.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.WorldBuilder.AddEntityAction.BeginRedo">
            <summary>
            Re-adds the entity to the entity aspect.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.WorldBuilder.AddEntityAction.Execute(Emergent.Toolbench.Actions.ExecutionContext,Emergent.Toolbench.Actions.ExecutionStyle)">
            <summary>
            Adds the entity to the entity aspect.
            </summary>      
            <param name="context">The execution context of the action.</param>
            <param name="style">The execution style of the action.</param>
        </member>
        <member name="M:Emergent.Toolbench.WorldBuilder.AddEntityAction.ToXml">
            <summary>
            Converts the specified action's data into XML form.
            </summary>
            <returns>An XML node that describes the action.</returns>
        </member>
        <member name="M:Emergent.Toolbench.WorldBuilder.AddEntityAction.FromXml(System.Xml.Linq.XElement)">
            <summary>
            Extracts the necessary action data from the specified XML data.
            </summary>
            <param name="node">Top level XML node containing the action's data.
            </param>
        </member>
        <member name="P:Emergent.Toolbench.WorldBuilder.AddEntityAction.IsUndoable">
            <summary>
            Gets a value indicating if the action is undo-able.
            </summary>
            <remarks>
            Normally this value should be true but if the action can conditionally become 
            non-undo-able, this property should reflect that.
            </remarks>
        </member>
        <member name="P:Emergent.Toolbench.WorldBuilder.AddEntityAction.Description">
            <summary>
            Gets a description used to display information about the undo/redo
            operation to the user.
            </summary>
            <value>The label.</value>
        </member>
        <member name="P:Emergent.Toolbench.WorldBuilder.AddEntityAction.IsSerializable">
            <summary>
            Gets a value indicating if the action is serializable.  Use this
            if your action can potentially become non-serializable based on
            input conditions.
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.WorldBuilder.ModelProjectSyncEventArgs.UnreferencedEntities">
            <summary>
            The entities that are now unreferenced.
            </summary>
        </member>
        <member name="T:Emergent.Toolbench.WorldBuilder.ModelProjectRemoveEventArgs">
            <summary>
            Event args class used when an entity model project reference is about 
            to be removed. Handlers for the event can set the cancel property on 
            this class to true thus preventing the project reference from being 
            removed.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.WorldBuilder.ModelProjectRemoveEventArgs.#ctor(Emergent.Toolbench.EntityModeling.ModelingProjectDocument)">
            <summary>
            Constructs the event arguments.
            </summary>
            <param name="modelDoc">The entity model project document that is 
                about to be removed.
            </param>
        </member>
        <member name="P:Emergent.Toolbench.WorldBuilder.ModelProjectRemoveEventArgs.ProjectDocument">
            <summary>
            Gets the project document.
            </summary>
            <value>The project document.</value>
        </member>
        <member name="T:Emergent.Toolbench.WorldBuilder.LoadLayerAction">
            <summary>
            This action handles loading a layer that is currently unloaded.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.WorldBuilder.LayerAction.GetEntities(Emergent.Toolbench.WorldBuilder.LayerDocument)">
            <summary>
            Recursively get all the entities in the given layer and all sub-layers and store
            them in m_entities for future use.
            </summary>
            <param name="layer">The layer where to start getting entities recursively.</param>
        </member>
        <member name="M:Emergent.Toolbench.WorldBuilder.LayerAction.GetEntities(Emergent.Toolbench.WorldBuilder.LayerDocument,System.Collections.Generic.Dictionary{Emergent.Toolbench.WorldBuilder.LayerDocument,System.Collections.Generic.List{Emergent.Toolbench.WorldBuilder.Entity}}@)">
            <summary>
            Recursively get all the entities in the given layer and all sub-layers and return
            them in entities.
            </summary>
            <param name="layer">The layer where to start getting entities recursively.</param>
            <param name="entities">The map of layer -> entities that will be filled by this method.
            </param>
        </member>
        <member name="M:Emergent.Toolbench.WorldBuilder.LayerAction.RemoveLayerEntities(Emergent.Toolbench.WorldBuilder.LayerDocument)">
            <summary>
            Remove all the entities from the given layer and all sub-layers.
            </summary>
            <param name="layer"></param>
        </member>
        <member name="M:Emergent.Toolbench.WorldBuilder.LayerAction.UnregisterAllChildLayers(Emergent.Toolbench.WorldBuilder.LayerDocument)">
            <summary>
            Unregisters the given layer and all sub-layers from the content service.
            </summary>
            <param name="layer"></param>
        </member>
        <member name="M:Emergent.Toolbench.WorldBuilder.LayerAction.AddLayer(System.Boolean)">
            <summary>
            Adds a layer and re-adds all entities into the layer/sub-layers.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Emergent.Toolbench.WorldBuilder.LayerAction.UnloadLayer">
            <summary>
            Unloads all sub-layers (and descendants) and entities contained in this action's layer.
            </summary>
            <returns>true if successful, false otherwise.</returns>
        </member>
        <member name="M:Emergent.Toolbench.WorldBuilder.LayerAction.RestoreUnloadedLayer(System.Collections.Generic.Dictionary{Emergent.Toolbench.WorldBuilder.LayerDocument,System.Collections.Generic.List{Emergent.Toolbench.WorldBuilder.Entity}})">
            <summary>
            Restores sub-layers (and their descendants) and all entities that were previously
            unloaded from our layer.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Emergent.Toolbench.WorldBuilder.LayerAction.GetBlock">
            <summary>
            Get the BlockDocument that contains our layer.
            </summary>
            <returns>The BlockDocument that contains our layer.</returns>
        </member>
        <member name="P:Emergent.Toolbench.WorldBuilder.LayerAction.Entities">
            <summary>
            Gets the dictionary of layer to entities that contains all of the
            layers/sub-layers/entities that originally existed in this action's layer.
            </summary>
        </member>
        <member name="F:Emergent.Toolbench.WorldBuilder.LoadLayerAction.m_previousDefinition">
            <summary>
            The value of the layer's Definition property before this action was executed.
            </summary>
        </member>
        <member name="F:Emergent.Toolbench.WorldBuilder.LoadLayerAction.m_newDefinition">
            <summary>
            The new value of the layer's Definition property after loading it from file.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.WorldBuilder.LoadLayerAction.#ctor(Emergent.Toolbench.WorldBuilder.LayerDocument)">
            <summary>
            Constructs the load layer action.
            </summary>
            <param name="layer">The layer to operate on.
            </param>
        </member>
        <member name="M:Emergent.Toolbench.WorldBuilder.LoadLayerAction.BeginUndo">
            <summary>
            Reverts to the original layer's XML Definition and unloads the layer's contents.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.WorldBuilder.LoadLayerAction.EndUndo">
            <summary>
            Doesn't do anything in this implementation.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.WorldBuilder.LoadLayerAction.BeginRedo">
            <summary>
            Sets the layer's XML Definition to the one that was loaded from file, then loads the
            layer's contents.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.WorldBuilder.LoadLayerAction.EndRedo">
            <summary>
            Doesn't do anything in this implementation.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.WorldBuilder.LoadLayerAction.Execute(Emergent.Toolbench.Actions.ExecutionContext,Emergent.Toolbench.Actions.ExecutionStyle)">
            <summary>
            Loads the layer's entities and sub-layers.
            </summary>      
            <param name="context">The execution context of the action.</param>
            <param name="style">The execution style of the action.</param>
        </member>
        <member name="M:Emergent.Toolbench.WorldBuilder.LoadLayerAction.LoadLayerFromDefinition">
            <summary>
            Loads the layer from its current XML definition (Definition property).
            </summary>
            <returns>true if successful, false otherwise.</returns>
        </member>
        <member name="P:Emergent.Toolbench.WorldBuilder.LoadLayerAction.SubLayersOpenMode">
            <summary>
            Gets or sets a value indicating how sub-layers should be opened.
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.WorldBuilder.LoadLayerAction.IsUndoable">
            <summary>
            Gets a value indicating if the action is undo-able.
            </summary>
            <remarks>
            Normally this value should be true but if the action can conditionally become 
            non-undo-able, this property should reflect that.
            </remarks>
        </member>
        <member name="P:Emergent.Toolbench.WorldBuilder.LoadLayerAction.Description">
            <summary>
            Gets a description used to display information about the undo/redo
            operation to the user.
            </summary>
            <value>The label.</value>
        </member>
        <member name="T:Emergent.Toolbench.WorldBuilder.EntitiesLayerHierarchyEventArgs">
            <summary>
            EventArgs used for the GlobalEntityAspect.EntitiesLayerHierarchyChanged event.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.WorldBuilder.EntitiesLayerHierarchyEventArgs.#ctor(Emergent.Toolbench.WorldBuilder.Entity)">
            <summary>
            Initializes a new instance of the <see cref="T:Emergent.Toolbench.WorldBuilder.EntitiesLayerHierarchyEventArgs"/> class
            for a single entity.
            </summary>
            <param name="entity">The entity.</param>
        </member>
        <member name="M:Emergent.Toolbench.WorldBuilder.EntitiesLayerHierarchyEventArgs.#ctor(System.Collections.Generic.IEnumerable{Emergent.Toolbench.WorldBuilder.Entity},Emergent.Toolbench.TypeService.Types.EntityRef.ContainerHierarchy)">
            <summary>
            Initializes a new instance of the <see cref="T:Emergent.Toolbench.WorldBuilder.EntitiesLayerHierarchyEventArgs"/> class
            for multiple entities.
            </summary>
            <param name="entities">The entities.</param>
            <param name="newLayersHierarchy">The new layers hierarchy for all of these entities.
            </param>
        </member>
        <member name="P:Emergent.Toolbench.WorldBuilder.EntitiesLayerHierarchyEventArgs.NewLayersHierarchy">
            <summary>
            Gets the new layers hierarchy for all of the entities in the Entities list.
            </summary>
            <value>The new layers hierarchy for all of the entities.</value>
        </member>
        <member name="T:Emergent.Toolbench.WorldBuilder.LayerDocumentFactory">
            <summary>
            Implements a document factory for game world documents. Game world 
            documents are a tool time format for representing the contents of a 
            game including references to entity models, entities, geometry, etc.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.WorldBuilder.LayerDocumentFactory.New(Emergent.Toolbench.ContentService.ContentCreationSettings)">
            <summary>
            Creates an empty game world.
            </summary>
            <param name="args">Additional configuration data used to create
            the document.</param>
            <returns>A new game world document.</returns>
        </member>
        <member name="M:Emergent.Toolbench.WorldBuilder.LayerDocumentFactory.Open(Emergent.Toolbench.ContentService.ContentCreationSettings)">
            <summary>
            Opens an existing game world document. After the data is parsed 
            the different aspects attached to the document are responsible for
            extracting the necessary pieces.
            </summary>
            <param name="resourceLocation"></param>
            <returns>A new game world document.</returns>
        </member>
        <member name="M:Emergent.Toolbench.WorldBuilder.LayerDocumentFactory.ReloadDefinitionFromFile(Emergent.Toolbench.WorldBuilder.LayerDocument)">
            <summary>
            Reloads the layer's XML definition (Definition property) from file.
            </summary>
            <param name="layer">The layer document to update.</param>
        </member>
        <member name="M:Emergent.Toolbench.WorldBuilder.LayerDocumentFactory.Save(Emergent.Toolbench.ContentService.AbstractDocument)">
            <summary>
            Saves the game world document.
            </summary>
            <param name="document">The document to save.</param>
        </member>
        <member name="M:Emergent.Toolbench.WorldBuilder.LayerDocumentFactory.OnDocumentLoaded(Emergent.Toolbench.ContentService.AbstractDocument)">
            <summary>
            This method frees the xml world data since at this point all 
            aspects that rely on the document data being present have already
            inspected the world data loaded by the document. No need to hold on
            to a potentially large object.
            </summary>
        </member>
        <member name="T:Emergent.Toolbench.WorldBuilder.SelectPreviousEntityAction">
            <summary>
            Exports the current block file out to an xblock file.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.WorldBuilder.SelectPreviousEntityAction.Execute(Emergent.Toolbench.Actions.ExecutionContext,Emergent.Toolbench.Actions.ExecutionStyle)">
            <summary>
            Performs a block export operation.
            </summary>
            <param name="context">The execution context of the action.</param>
            <param name="style">The execution style of the action.</param>
            <returns>The execution result.</returns>
        </member>
        <member name="T:Emergent.Toolbench.WorldBuilder.IWorldBuilderExporter">
            <summary>
            Interface used to implement the "Emergent.Toolbench.WorldBuilder.Exporter" extension-point.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.WorldBuilder.IWorldBuilderExporter.FileExtension">
            <summary>
            The file extension type that this exporter generates
            </summary>
            <returns>A string including the extension name (ex "xblock"). 
            No period delimiter should be used.</returns>
        </member>
        <member name="M:Emergent.Toolbench.WorldBuilder.IWorldBuilderExporter.Export(Emergent.Toolbench.WorldBuilder.BlockDocument,System.Uri)">
            <summary>
            Export out the specified block document to the specified folder. 
            </summary>
            <param name="block">The block document to export.</param>
            <param name="destinationPath">The root folder for all exported files. 
            Note that this is a folder, not a full file path.</param>
            <returns>A list of the exported full filenames.</returns>
        </member>
        <member name="T:Emergent.Toolbench.WorldBuilder.ModelProjectEventArgs">
            <summary>
            Event args class used when an entity model project reference is about 
            to be removed. Handlers for the event can set the cancel property on 
            this class to true thus preventing the project reference from being 
            removed.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.WorldBuilder.ModelProjectEventArgs.#ctor(Emergent.Toolbench.EntityModeling.ModelingProjectDocument)">
            <summary>
            Constructs the event arguments.
            </summary>
            <param name="modelDoc">The entity model project document that is 
                about to be removed.
            </param>
        </member>
        <member name="P:Emergent.Toolbench.WorldBuilder.ModelProjectEventArgs.ProjectDocument">
            <summary>
            Gets the project document.
            </summary>
            <value>The project document.</value>
        </member>
        <member name="T:Emergent.Toolbench.WorldBuilder.LayerSettingsAspect">
            <summary>
            Aspect for tracking per-content settings for a WorldBuilderDocument.
            These settings are for Toolbench only, but are stored directly in the
            .world XML format.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.WorldBuilder.LayerSettingsAspect.LoadSettings">
            <summary>
            Custom settings load implementation to pull directly from the world
            document.
            </summary>
        </member>
        <member name="T:Emergent.Toolbench.WorldBuilder.RemoveEntityAction">
            <summary>
            This action implementation handles removing entities from an entity 
            aspect.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.WorldBuilder.RemoveEntityAction.#ctor">
            <summary>
            NULL Constructor for macro construction.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.WorldBuilder.RemoveEntityAction.#ctor(Emergent.Toolbench.WorldBuilder.GlobalEntityAspect,System.Collections.Generic.List{Emergent.Toolbench.WorldBuilder.Entity})">
            <summary>
            Constructs the remove entity action.
            </summary>
            <param name="aspect">The entity aspect with which to operate on.
            </param>
            <param name="entities">The entities to be removed.
            </param>
        </member>
        <member name="M:Emergent.Toolbench.WorldBuilder.RemoveEntityAction.EndUndo">
            <summary>
            Removes the entity that was added by this action from the entity 
            aspect.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.WorldBuilder.RemoveEntityAction.BeginRedo">
            <summary>
            Re-adds the entity to the entity aspect.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.WorldBuilder.RemoveEntityAction.Execute(Emergent.Toolbench.Actions.ExecutionContext,Emergent.Toolbench.Actions.ExecutionStyle)">
            <summary>
            Removes the entities from the entity aspect.
            </summary>      
            <param name="context">The execution context of the action.</param>
            <param name="style">The execution style of the action.</param>
        </member>
        <member name="M:Emergent.Toolbench.WorldBuilder.RemoveEntityAction.ToXml">
            <summary>
            Converts the specified action's data into XML form.
            </summary>
            <returns>An XML node that describes the action.</returns>
        </member>
        <member name="M:Emergent.Toolbench.WorldBuilder.RemoveEntityAction.FromXml(System.Xml.Linq.XElement)">
            <summary>
            Extracts the necessary action data from the specified XML data.
            </summary>
            <param name="node">Top level XML node containing the action's data.
            </param>
        </member>
        <member name="P:Emergent.Toolbench.WorldBuilder.RemoveEntityAction.IsUndoable">
            <summary>
            Gets a value indicating if the action is undo-able.
            </summary>
            <remarks>
            Normally this value should be true but if the action can conditionally become 
            non-undo-able, this property should reflect that.
            </remarks>
        </member>
        <member name="P:Emergent.Toolbench.WorldBuilder.RemoveEntityAction.Description">
            <summary>
            Gets a description used to display information about the undo/redo
            operation to the user.
            </summary>
            <value>The label.</value>
        </member>
        <member name="P:Emergent.Toolbench.WorldBuilder.RemoveEntityAction.IsSerializable">
            <summary>
            Gets a value indicating if the action is serializable.  Use this
            if your action can potentially become non-serializable based on
            input conditions.
            </summary>
        </member>
        <member name="T:Emergent.Toolbench.WorldBuilder.ChangeEntitySelectionAction">
            <summary>
            This action implementation handles changing the current entity selection.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.WorldBuilder.ChangeEntitySelectionAction.#ctor(Emergent.Toolbench.WorldBuilder.GlobalEntityAspect,System.Boolean,System.Collections.Generic.IEnumerable{Emergent.Toolbench.WorldBuilder.Entity},System.Collections.Generic.IEnumerable{Emergent.Toolbench.WorldBuilder.Entity})">
            <summary>
            Constructs the entity selection change action.
            </summary>
            <param name="aspect">The entity aspect on which to operate.</param>
            <param name="clearEntities">True if the current selection should be cleared.</param>
            <param name="removeEntities">Entities to remove from the selection.</param>
            <param name="addEntities">Entities to add to the selection.</param>
        </member>
        <member name="M:Emergent.Toolbench.WorldBuilder.ChangeEntitySelectionAction.EndUndo">
            <summary>
            Reverts the change to the entity selection.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.WorldBuilder.ChangeEntitySelectionAction.BeginRedo">
            <summary>
            Performs the entity selection change again.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.WorldBuilder.ChangeEntitySelectionAction.Execute(Emergent.Toolbench.Actions.ExecutionContext,Emergent.Toolbench.Actions.ExecutionStyle)">
            <summary>
            Changes the current entity selection.
            </summary>      
            <param name="context">The execution context of the action.</param>
            <param name="style">The execution style of the action.</param>
        </member>
        <member name="P:Emergent.Toolbench.WorldBuilder.ChangeEntitySelectionAction.IsUndoable">
            <summary>
            Gets a value indicating if the action is undo-able.
            </summary>
            <remarks>
            Normally this value should be true but if the action can conditionally become 
            non-undo-able, this property should reflect that.
            </remarks>
        </member>
        <member name="P:Emergent.Toolbench.WorldBuilder.ChangeEntitySelectionAction.Description">
            <summary>
            Gets a description used to display information about the undo/redo
            operation to the user.
            </summary>
            <value>The label.</value>
        </member>
        <member name="M:Emergent.Toolbench.WorldBuilder.ProjectItem.CanBeChild(Emergent.Toolbench.GameSolution.GameSolutionItem,System.Boolean,System.String@)">
            <summary>
            Tests if the item can be a child of this item. Some item types cannot be children of
            others.
            </summary>
            <param name="in_child">The potential child item.</param>
            <param name="in_bDirectChild">True if the child is added to this item.
            False if it is a grand-child in the sub-hierarchy.</param>
            <param name="out_error">A string describing why the parent refused the operation.
            </param>
            <returns>True if the parent accepts.</returns>
        </member>
        <member name="T:Emergent.Toolbench.WorldBuilder.XmlEntityExporter">
            <summary>
            Helper class used to write a set of entities to a runtime-compatible XML file.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.WorldBuilder.XmlEntityExporter.#ctor">
            <summary>
            Default Constructor
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.WorldBuilder.XmlEntityExporter.ValidateDataValue(System.Collections.Generic.IDictionary{System.Guid,Emergent.Toolbench.WorldBuilder.Entity},Emergent.Toolbench.TypeService.Types.DataValue,System.String@)">
            <summary>
            Helper method used to verify that a given datavalue, if an EntityRef, points to a 
            valid instance of an entity in the set of entities to export.
            </summary>
            <param name="entities">The set of entities to export</param>
            <param name="value">The current datavalue</param>
            <param name="error">Any error text that results</param>
            <returns>Whether or not the datavalue is valid</returns>
        </member>
        <member name="M:Emergent.Toolbench.WorldBuilder.XmlEntityExporter.CheckProperty(System.Collections.Generic.IDictionary{System.Guid,Emergent.Toolbench.WorldBuilder.Entity},Emergent.Toolbench.WorldBuilder.Entity,Emergent.Toolbench.EntityModeling.MixinProperty)">
            <summary>
            Helper value to verify that a given property refers to valid exported entities. This
            method handles all collection property types as well as single-value properties.
            </summary>
            <param name="entities">The set of entities to export</param>
            <param name="entity">The current entity being exported</param>
            <param name="property">The current property being exported</param>
        </member>
        <member name="M:Emergent.Toolbench.WorldBuilder.XmlEntityExporter.SanityCheck(System.Collections.Generic.IDictionary{System.Guid,Emergent.Toolbench.WorldBuilder.Entity},System.Xml.Linq.XStreamingElement)">
            <summary>
            Verify that all properties in the entity set are valid.
            </summary>
            <param name="entities">The set of entities to export</param>
            <param name="xmlRoot">The root of the XML tree being built</param>
        </member>
        <member name="M:Emergent.Toolbench.WorldBuilder.XmlEntityExporter.Export(System.Collections.Generic.IDictionary{System.Guid,Emergent.Toolbench.WorldBuilder.Entity},System.Xml.Linq.XStreamingElement)">
            <summary>
            Export the specified entities to an XML tree specified by xmlRoot.
            </summary>
            <param name="entities">The set of entities to export</param>
            <param name="xmlRoot">The root of the tree to be built</param>
        </member>
        <member name="M:Emergent.Toolbench.WorldBuilder.XmlEntityExporter.ExportToFile(System.String,System.Collections.Generic.IDictionary{System.Guid,Emergent.Toolbench.WorldBuilder.Entity},System.Uri)">
            <summary>
            Export a specified set of entities to a runtime compatible XML file.
            </summary>
            <param name="sourcePath">The folder in which to export </param>
            <param name="entities">The set of entities to export</param>
            <param name="destination">The filename for the output data.</param>
        </member>
        <member name="M:Emergent.Toolbench.WorldBuilder.XmlEntityExporter.EntityToXml(Emergent.Toolbench.WorldBuilder.Entity,System.Collections.Generic.IDictionary{System.Guid,Emergent.Toolbench.WorldBuilder.Entity})">
            <summary>
            Convert a C# entity to XML elements
            </summary>
            <param name="entity">The current entity to be exported</param>
            <param name="entities">The set of entities to export</param>
            <returns>The XML elements for this entity</returns>
        </member>
        <member name="M:Emergent.Toolbench.WorldBuilder.XmlEntityExporter.IsMixinNameable(Emergent.Toolbench.EntityModeling.EntityModelMixin)">
            <summary>
            Determine whether or not this entity's name needs to be synchronized.
            </summary>
            <param name="mixin">The mixin hierarchy for an entity</param>
            <returns>Is there a "Nameable" property?</returns>
        </member>
        <member name="M:Emergent.Toolbench.WorldBuilder.XmlEntityExporter.CreateMapElement(Emergent.Toolbench.TypeService.Types.MapDataValueItem,System.Collections.Generic.IDictionary{System.Guid,Emergent.Toolbench.WorldBuilder.Entity})">
            <summary>
            Convert a map property to XML
            </summary>
            <param name="item">The map to convert</param>
            <param name="entities">The set of entities to export</param>
            <returns>The XML elements for the map</returns>
        </member>
        <member name="M:Emergent.Toolbench.WorldBuilder.XmlEntityExporter.CreateListElement(System.Int32,Emergent.Toolbench.TypeService.Types.DataValue,System.Collections.Generic.IDictionary{System.Guid,Emergent.Toolbench.WorldBuilder.Entity})">
            <summary>
            Convert a list property to XML
            </summary>
            <param name="index">The index to convert</param>
            <param name="item">The list to convert</param>
            <param name="entities">The set of entities to export</param>
            <returns>The XML elements for the list</returns>
        </member>
        <member name="M:Emergent.Toolbench.WorldBuilder.XmlEntityExporter.CreateElement(Emergent.Toolbench.TypeService.Types.DataValue,System.Collections.Generic.IDictionary{System.Guid,Emergent.Toolbench.WorldBuilder.Entity})">
            <summary>
            Convert a property to XML
            </summary>
            <param name="value">The property to convert</param>
            <param name="entities">The set of entities to export</param>
            <returns>The XML elements for the property</returns>
        </member>
        <member name="M:Emergent.Toolbench.WorldBuilder.XmlEntityExporter.IsBadEntityReference(Emergent.Toolbench.TypeService.Types.DataValue,System.Collections.Generic.IDictionary{System.Guid,Emergent.Toolbench.WorldBuilder.Entity})">
            <summary>
            Is the given entity reference valid?
            </summary>
            <param name="dataVal">The datavalue to test</param>
            <param name="entities">The set of entities to export</param>
            <returns>Whether or not the entity reference is bad.</returns>
        </member>
        <member name="T:Emergent.Toolbench.WorldBuilder.Migration.LayerDocumentFinder">
            <summary>
            Given a starting layer/block document, this class gets all the layer documents referenced
            recursively.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.WorldBuilder.Migration.LayerDocumentFinder.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Emergent.Toolbench.WorldBuilder.Migration.LayerDocumentFinder"/> class.
            </summary>
            <param name="startLayerPath">The starting layer/block path.</param>
        </member>
        <member name="M:Emergent.Toolbench.WorldBuilder.Migration.LayerDocumentFinder.Run">
            <summary>
            Run the finder. Only after this is called is <see cref="P:Emergent.Toolbench.WorldBuilder.Migration.LayerDocumentFinder.LayerDocumentPaths"/> valid.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.WorldBuilder.Migration.LayerDocumentFinder.Gather(System.String)">
            <summary>
            Recursive method responsible for adding the document to the list and to extract
            the referenced documents.
            </summary>
            <param name="layerPath">The layer path.</param>
        </member>
        <member name="M:Emergent.Toolbench.WorldBuilder.Migration.LayerDocumentFinder.ExtractLayerRelativePaths(System.String)">
            <summary>
            Extracts the layer relative paths.
            </summary>
            <param name="layerPath">The layer path.</param>
            <returns>The list of relative paths.</returns>
            <remarks>
            The implementation is different if the document version is 1 because a leading ..\
            was included for each layer element in that version.
            </remarks>
        </member>
        <member name="P:Emergent.Toolbench.WorldBuilder.Migration.LayerDocumentFinder.LayerDocumentPaths">
            <summary>
            Gets the layer document paths.
            </summary>
            <value>The list of layer document paths.</value>
            <remarks>
            The value is valid only after <see cref="M:Emergent.Toolbench.WorldBuilder.Migration.LayerDocumentFinder.Run"/> was called.
            </remarks>
        </member>
        <member name="T:Emergent.Toolbench.WorldBuilder.EntityPaletteAspect">
            <summary>
            This content aspect contains a list of entity model projects that 
            contain the entities that can be instanced in the world. This aspect is
            attached to the world builder document.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.WorldBuilder.EntityPaletteAspect.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:Emergent.Toolbench.WorldBuilder.EntityPaletteAspect"/>.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.WorldBuilder.EntityPaletteAspect.VerifyModelCache">
            <summary>
            Caches the models in the different entity modeling projects into a lookup table for
            faster query times.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.WorldBuilder.EntityPaletteAspect.CanConnectContent(Emergent.Toolbench.ContentService.AbstractContent)">
            <summary>
            Checks if the aspect can be attached to a piece of content.
            </summary>
            <param name="content">The content to attempt to connect to the aspect.</param>
            <returns><c>true</c> if the aspect can be connected to the content; otherwise, 
            <c>false</c>.</returns>
        </member>
        <member name="M:Emergent.Toolbench.WorldBuilder.EntityPaletteAspect.OnContentDeleted(System.Object,Emergent.Toolbench.ContentService.ContentEventArgs)">
            <summary>
            Called when content was deleted.
            </summary>
            <param name="sender">The sender.</param>
        </member>
        <member name="M:Emergent.Toolbench.WorldBuilder.EntityPaletteAspect.OnContentConnected">
            <summary>
            Connects to the specified world document content. This method gets 
            the list of entity model projects that are referenced and loads 
            them.
            </summary>
            <returns> True if the content was connected, false otherwise.
            </returns>
        </member>
        <member name="M:Emergent.Toolbench.WorldBuilder.EntityPaletteAspect.OnContentDisconnected">
            <summary>
            Called just before the aspect is removed from the content it is
            currently attached to. This method ensures that all entity model 
            projects that have been referenced by the aspect are closed.
            </summary>
            <remarks>Default implementation does nothing.</remarks>
        </member>
        <member name="M:Emergent.Toolbench.WorldBuilder.EntityPaletteAspect.UpdateFileWatchers">
            <summary>
            Updates the file watchers: Register to new projects, unregister from old projects.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.WorldBuilder.EntityPaletteAspect.RegisterToFileWatcher(Emergent.Toolbench.EntityModeling.ModelingProjectDocument)">
            <summary>
            Starts watching a project and all the models on the file system for any changes.
            </summary>
            <param name="project">The project to start watching.</param>
        </member>
        <member name="M:Emergent.Toolbench.WorldBuilder.EntityPaletteAspect.RegisterToFileWatcher(System.Collections.Generic.IEnumerable{Emergent.Toolbench.EntityModeling.EntityModel})">
            <summary>
            Starts watching the models on the file system for any changes.
            </summary>
            <param name="models">The list of models to start watching.</param>
        </member>
        <member name="M:Emergent.Toolbench.WorldBuilder.EntityPaletteAspect.UnregisterFromFileWatcher(Emergent.Toolbench.EntityModeling.ModelingProjectDocument)">
            <summary>
            Stops watching a project and all the models on the file system for any changes.
            </summary>
            <param name="project">The project to stop watching.</param>
        </member>
        <member name="M:Emergent.Toolbench.WorldBuilder.EntityPaletteAspect.UnregisterFromFileWatcher(System.Collections.Generic.IEnumerable{Emergent.Toolbench.EntityModeling.EntityModel})">
            <summary>
            Stops watching the models on the file system for any changes.
            </summary>
            <param name="models">The list of models to stop watching.</param>
        </member>
        <member name="M:Emergent.Toolbench.WorldBuilder.EntityPaletteAspect.AddReference(System.Uri)">
            <summary>
            Adds a new entity model project reference.
            </summary>
            <param name="fullPath">The full path.</param>
        </member>
        <member name="M:Emergent.Toolbench.WorldBuilder.EntityPaletteAspect.AddReference(Emergent.Toolbench.EntityModeling.ModelingProjectDocument)">
            <summary>
            Adds a project reference to the entity palette.
            </summary>
            <param name="project">The project to reference</param>
            <returns><c>true</c> if the project was referenced; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Emergent.Toolbench.WorldBuilder.EntityPaletteAspect.RemoveReference(Emergent.Toolbench.EntityModeling.ModelingProjectDocument)">
            <summary>
            Removes the entity model project reference located at the specified
            full path from the entity palette. If the broadcast remove model 
            project event is canceled, no action is taken.
            </summary>
            <param name="projectPath">Path to the project document.</param>
        </member>
        <member name="M:Emergent.Toolbench.WorldBuilder.EntityPaletteAspect.RemoveReferenceInternal(Emergent.Toolbench.EntityModeling.ModelingProjectDocument,System.Boolean)">
            <summary>
            Removes the entity model project reference located at the specified
            full path from the entity palette. If the broadcast remove model 
            project event is canceled, no action is taken.
            </summary>
            <param name="projectPath">Path to the project document.</param>
            <param name="fireEvents">If true, signals reference change events.</param>
        </member>
        <member name="M:Emergent.Toolbench.WorldBuilder.EntityPaletteAspect.RemoveReference(System.Uri)">
            <summary>
            Removes the project reference.
            </summary>
            <param name="path">The path.</param>
            <returns></returns>
        </member>
        <member name="M:Emergent.Toolbench.WorldBuilder.EntityPaletteAspect.ActivateModel(Emergent.Toolbench.EntityModeling.EntityModel)">
            <summary>
            Activates a particular model.  Activating a model can trigger things such as 'creation'
            mode.
            </summary>
            <param name="model">The model to activate.</param>
        </member>
        <member name="M:Emergent.Toolbench.WorldBuilder.EntityPaletteAspect.GetDependentObjects(Emergent.Toolbench.EntityModeling.ModelingProjectDocument)">
            <summary>
            Gets the objects that use models in the given project.
            </summary>
            <param name="project">The project.</param>
            <returns></returns>
        </member>
        <member name="M:Emergent.Toolbench.WorldBuilder.EntityPaletteAspect.HasModelProjectReference(System.Uri)">
            <summary>
            Determines whether or not the aspect already has a reference to the
            entity model project located at the specified location.
            </summary>
            <param name="projectPath">The full or relative path to the entity
                model project.
            </param>
            <returns>True if a reference exists, false otherwise.</returns>
        </member>
        <member name="M:Emergent.Toolbench.WorldBuilder.EntityPaletteAspect.FindEntityModel(System.String)">
            <summary>
            This method looks through each of the project references and 
            locates the entity model with the specified name.
            </summary>
            <param name="modelName">The name of the entity model.</param>
            <returns>A valid entity model or null if a model of the specified 
                name could not be found.
            </returns>
        </member>
        <member name="M:Emergent.Toolbench.WorldBuilder.EntityPaletteAspect.FindEntityModel(System.Guid)">
            <summary>
            This method looks through each of the project references and 
            locates the entity model with the specified id.
            </summary>
            <param name="modelName">The name of the entity model.</param>
            <returns>A valid entity model or null if a model of the specified 
                name could not be found.
            </returns>
        </member>
        <member name="M:Emergent.Toolbench.WorldBuilder.EntityPaletteAspect.SyncModels">
            <summary>
            Synchronize the models
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.WorldBuilder.EntityPaletteAspect.ExtractEntityModelReferences(System.Xml.Linq.XDocument)">
            <summary>
            Extracts the entity model references from the specified world 
            document xml data. This method is called when the world document 
            content is connected to the aspect.
            </summary>
            <param name="xmlDocument">The XML document.</param>
        </member>
        <member name="M:Emergent.Toolbench.WorldBuilder.EntityPaletteAspect.OnModelReferenceChanged(Emergent.Toolbench.FileSystemMonitor.PathChangedEventArgs)">
            <summary>
            Called when the files for the models are modified.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Emergent.Toolbench.WorldBuilder.EntityPaletteAspect.ToXml">
            <summary>
            Gets an XML representation of the data stored on the aspect. This
            XML representation is serialized to the world document XML file
            when the world document is saved.
            </summary>
            <returns></returns>
        </member>
        <member name="E:Emergent.Toolbench.WorldBuilder.EntityPaletteAspect.ProjectAdded">
            <summary>
            This event is fired when a new project is added to the aspect.
            </summary>
        </member>
        <member name="E:Emergent.Toolbench.WorldBuilder.EntityPaletteAspect.ProjectRemoving">
            <summary>
            This event is fired when an entity model project reference is about
            to be removed. Setting the cancel property of the event args to 
            true vetoes the operation.
            </summary>
        </member>
        <member name="E:Emergent.Toolbench.WorldBuilder.EntityPaletteAspect.ProjectRemoved">
            <summary>
            This event is fired when an existing entity model project is
            removed from the palette.
            </summary>
        </member>
        <member name="E:Emergent.Toolbench.WorldBuilder.EntityPaletteAspect.ProjectSynchronizing">
            <summary>
            This event is fired just before a project is updated from an outside source.  Use this
            event to cancel the project update from occurring.
            </summary>
        </member>
        <member name="E:Emergent.Toolbench.WorldBuilder.EntityPaletteAspect.ProjectUpdating">
            <summary>
            This event is fired once the project update process has begun, but prior to any changes
            occurring.
            </summary>
        </member>
        <member name="E:Emergent.Toolbench.WorldBuilder.EntityPaletteAspect.ProjectUpdated">
            <summary>
            This event is fired once the project update process has finished.
            </summary>
        </member>
        <member name="E:Emergent.Toolbench.WorldBuilder.EntityPaletteAspect.EntitiesUpdating">
            <summary>
            This event fires after the referenced projects have been updated but prior to entities
            being updated with their new model.
            </summary>
        </member>
        <member name="E:Emergent.Toolbench.WorldBuilder.EntityPaletteAspect.EntitiesUpdated">
            <summary>
            This event fires just after all entities have been updated with their new model.
            </summary>
        </member>
        <member name="E:Emergent.Toolbench.WorldBuilder.EntityPaletteAspect.ReferencedModifiedExternally">
            <summary>
            This event is fired when the entity palette aspect detects that any referenced projects
            have been modified on disk.
            </summary>
        </member>
        <member name="E:Emergent.Toolbench.WorldBuilder.EntityPaletteAspect.ReferencesChanged">
            <summary>
            Occurs when the reference collection changed.
            </summary>
        </member>
        <member name="E:Emergent.Toolbench.WorldBuilder.EntityPaletteAspect.ModelSelected">
            <summary>
            Occurs when a model becomes selected.
            </summary>
        </member>
        <member name="E:Emergent.Toolbench.WorldBuilder.EntityPaletteAspect.ModelActivated">
            <summary>
            Occurs when a model becomes activated.
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.WorldBuilder.EntityPaletteAspect.References">
            <summary>
            Gets the project reference list.
            </summary>
            <value>The list of project paths.</value>
        </member>
        <member name="P:Emergent.Toolbench.WorldBuilder.EntityPaletteAspect.Models">
            <summary>
            Gets a enumerable list of all referenced models.
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.WorldBuilder.EntityPaletteAspect.ModelCache">
            <summary>
            A dictionary of the models that have been cached.
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.WorldBuilder.EntityPaletteAspect.InstanciableModels">
            <summary>
            Gets a enumerable list of all referenced models that do not have the 'Abstract' trait.
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.WorldBuilder.EntityPaletteAspect.SelectedModel">
            <summary>
            Gets or sets the currently selected entity model.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.WorldBuilder.ImportLayerAction.#ctor(Emergent.Toolbench.WorldBuilder.LayerDocument,System.Uri)">
            <summary>
            Constructs the remove entity action.
            </summary>
            <param name="aspect">The entity aspect with which to operate on.
            </param>
            <param name="entities">The entities to be removed.
            </param>
        </member>
        <member name="M:Emergent.Toolbench.WorldBuilder.ImportLayerAction.EndUndo">
            <summary>
            Removes the entity that was added by this action from the entity 
            aspect.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.WorldBuilder.ImportLayerAction.BeginRedo">
            <summary>
            Re-adds the entity to the entity aspect.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.WorldBuilder.ImportLayerAction.Execute(Emergent.Toolbench.Actions.ExecutionContext,Emergent.Toolbench.Actions.ExecutionStyle)">
            <summary>
            Removes the entities from the entity aspect.
            </summary>      
            <param name="context">The execution context of the action.</param>
            <param name="style">The execution style of the action.</param>
        </member>
        <member name="P:Emergent.Toolbench.WorldBuilder.ImportLayerAction.IsUndoable">
            <summary>
            Gets a value indicating if the action is undo-able.
            </summary>
            <remarks>
            Normally this value should be true but if the action can conditionally become 
            non-undo-able, this property should reflect that.
            </remarks>
        </member>
        <member name="P:Emergent.Toolbench.WorldBuilder.ImportLayerAction.Description">
            <summary>
            Gets a description used to display information about the undo/redo
            operation to the user.
            </summary>
            <value>The label.</value>
        </member>
        <member name="T:Emergent.Toolbench.WorldBuilder.XmlBlockExporter">
            <summary>
            Class implementing the default export of block files to xblock files.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.WorldBuilder.XmlBlockExporter.FileExtension">
            <summary>
            The file extension type that this exporter generates
            </summary>
            <returns>"xblock"</returns>
        </member>
        <member name="M:Emergent.Toolbench.WorldBuilder.XmlBlockExporter.ProcessDocuments(System.Uri,Emergent.Toolbench.WorldBuilder.LayerDocument,System.Collections.Generic.Dictionary{System.Guid,Emergent.Toolbench.WorldBuilder.Entity},System.Collections.Generic.List{System.Uri}@,System.Collections.Generic.List{System.String})">
            <summary>
            Recursively processes the block document tree and for each layer file, if 
            its layers have the "Emergent.Toolbench.WorldBuilder.PerContentLayerExportHint" enabled,
            a new xblock is exported.
            </summary>
            <param name="destinationPath">The root folder for all exported files.</param>
            <param name="layer">The layer document to export</param>
            <param name="currentEntitySet">The set of entities to export.</param>
            <param name="destinationFiles">The final set of files that were exported.</param>
            <param name="unloadedLayersWithoutOwnBlock">The list of sub-layers that don't export
            their own block and who are currently unloaded. Must be null when called on a layer
            that exports its own block. Each sub-layer will add itself to this list if it is
            currently unloaded, unless it exports its own block.</param>
        </member>
        <member name="M:Emergent.Toolbench.WorldBuilder.XmlBlockExporter.Export(Emergent.Toolbench.WorldBuilder.BlockDocument,System.Uri)">
            <summary>
            Export out the specified block document to the specified folder. For each layer file, if
            its layers have the "Emergent.Toolbench.WorldBuilder.PerContentLayerExportHint" enabled,
            a new xblock file is generated.
            </summary>
            <param name="block">The block document to export.</param>
            <param name="destinationPath">The root folder for all exported files. 
            Note that this is a folder, not a full file path.</param>
            <returns>A list of the exported full filenames.</returns>
        </member>
        <member name="M:Emergent.Toolbench.WorldBuilder.EntityNavigationAspect.OnContentConnected">
            <summary>
            Called when the aspect connects to the content.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.WorldBuilder.EntityNavigationAspect.OnEntitySelectionChanged(System.Object,Emergent.Toolbench.WorldBuilder.EntitySelectionEventArgs)">
            <summary>
            Called when the entity selection changed.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.
            </param>
        </member>
        <member name="T:Emergent.Toolbench.WorldBuilder.EntityFolderAspect">
            <summary>
            Manages a set of virtual folders to organize entities.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.WorldBuilder.EntityFolderAspect.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Emergent.Toolbench.WorldBuilder.EntityFolderAspect"/> class.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.WorldBuilder.EntityFolderAspect.CanConnectContent(Emergent.Toolbench.ContentService.AbstractContent)">
            <summary>
            Determines whether this aspect can connect with the specified content.
            </summary>
            <param name="content">The content to connect.</param>
            <returns><c>true</c> if this aspect can connect with the specified content; otherwise,
            <c>false</c>.</returns>
        </member>
        <member name="M:Emergent.Toolbench.WorldBuilder.EntityFolderAspect.OnContentConnected">
            <summary>
            Connects the aspect to the specified content.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.WorldBuilder.EntityFolderAspect.OnContentDisconnected">
            <summary>
            Called just before the aspect is removed from the content it is currently attached to.
            </summary>        
        </member>
        <member name="M:Emergent.Toolbench.WorldBuilder.EntityFolderAspect.OnEntityAdded(System.Object,Emergent.Toolbench.WorldBuilder.EntitiesEventArgs)">
            <summary>
            Called when an entity is added to the block.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The event object.</param>
        </member>
        <member name="M:Emergent.Toolbench.WorldBuilder.EntityFolderAspect.OnEntityRemoved(System.Object,Emergent.Toolbench.WorldBuilder.EntitiesEventArgs)">
            <summary>
            Called when an entity is removed from the block.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The event object.</param>
        </member>
        <member name="P:Emergent.Toolbench.WorldBuilder.EntityFolderAspect.XmlRootName">
            <summary>
            Gets the XML root element name for the aspect.
            </summary>
            <value>The XML root element name for the aspect.</value>
        </member>
        <member name="M:Emergent.Toolbench.WorldBuilder.GlobalEntityAspect.OnContentConnected">
            <summary>
            Connects the entity aspect to the specified content if it is a 
            world document. Also adds default entity references to new worlds.
            </summary>
            <param name="content">The content to connect to.</param>
            <returns>True if connected, false otherwise.</returns>
        </member>
        <member name="M:Emergent.Toolbench.WorldBuilder.GlobalEntityAspect.AddEntitiesFromLocalAspect(Emergent.Toolbench.WorldBuilder.LocalEntityAspect,System.Boolean)">
            <summary>
            Add the local aspect's entities to this global aspect. Entities that are
            already in the global aspect are:
             1) Not added to the global aspect
             2) Removed from the local aspect
            </summary>
            <param name="aspect">The LocalEntityAspect that contains the entities to add.</param>
            <param name="silent">Should fire notification events?</param>
        </member>
        <member name="M:Emergent.Toolbench.WorldBuilder.GlobalEntityAspect.GetHierarchyState(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Gets the state of the specified layers hierarchy. See HierarchyState for more details.
            </summary>
            <param name="hierarchy">The layers hierarchy, starting with the leaf, ending
            with the root.</param>
            <returns>One of HierarchyState, depending on the current state of the specified
            layers hierarchy.</returns>
        </member>
        <member name="M:Emergent.Toolbench.WorldBuilder.GlobalEntityAspect.OnLayerRemoved(Emergent.Toolbench.WorldBuilder.LayerDocument)">
            <summary>
            Layer removal hook, allowing entities to be removed.
            </summary>
            <param name="sender">Source of the layer removal event</param>
            <param name="e">Arguments of the layer removal event</param>
        </member>
        <member name="M:Emergent.Toolbench.WorldBuilder.GlobalEntityAspect.AddDefaultEntityReferences(Emergent.Toolbench.WorldBuilder.BlockDocument)">
            <summary>
            This method adds references to all .emtproj files to a newly created
            block document.
            </summary>
            <param name="document">The document which shall receive the references.</param>
        </member>
        <member name="M:Emergent.Toolbench.WorldBuilder.GlobalEntityAspect.AddEntityReferences(Emergent.Toolbench.WorldBuilder.BlockDocument,Emergent.Toolbench.GameSolution.GameSolutionItem,Emergent.Toolbench.EntityModeling.IProjectReferenceOwner)">
            <summary>
            Recursively searches a game solution node and adds .emtproj files found
            to a specified BlockDocument.
            </summary>
            <param name="document">Block document receiving EMT references.</param>
            <param name="gslNode">Game solution node to search.</param>
        </member>
        <member name="M:Emergent.Toolbench.WorldBuilder.GlobalEntityAspect.GetEntities(Emergent.Toolbench.EntityModeling.EntityModel)">
            <summary>
            Gets a enumerable list of entities that have been instanced from the
            specified model. This check is non-recursive so the entity instance must be 
            specifically of the model name provided.
            </summary>
            <param name="model">The model to look for.</param>
            <returns>An enumerable list of matching entities.</returns>
        </member>
        <member name="M:Emergent.Toolbench.WorldBuilder.GlobalEntityAspect.GetEntities(Emergent.Toolbench.EntityModeling.EntityModel,System.Boolean)">
            <summary>
            Gets a enumerable list of entities that have been instanced from the
            specified model.  If <paramref name="recursive"/> is <c>true</c>, all entities simply 
            containing the model in their mix-in hierarchy will be returned.
            </summary>
            <param name="model">The model to look for.</param>
            <param name="recursive"><c>true</c> if you want to look for the model anywhere in the
            parent list of the entity; otherwise <c>false</c>.</param>
            <returns>An enumerable list of matching entities.</returns>
        </member>
        <member name="M:Emergent.Toolbench.WorldBuilder.GlobalEntityAspect.GetEntities(System.String)">
            <summary>
            Gets an enumerable list of entities that are instances of the model name provided.  
            This check is non-recursive so the entity instance must be specifically of the model
            name provided.
            </summary>
            <param name="modelName">The model name to look for.</param>
            <returns>An enumerable list of matching entities.</returns>
        </member>
        <member name="M:Emergent.Toolbench.WorldBuilder.GlobalEntityAspect.GetEntities(System.String,System.Boolean)">
            <summary>
            Gets an enumerable list of entities that are instances of the model name provided.  If
            <paramref name="recursive"/> is <c>true</c>, all entities simply containing the model
            in their mix-in hierarchy will be returned.
            </summary>
            <param name="modelName">The model name to look for.</param>
            <param name="recursive"><c>true</c> if you want to look for the model anywhere in the
            parent list of the entity; otherwise <c>false</c>.</param>
            <returns>An enumerable list of matching entities.</returns>
        </member>
        <member name="M:Emergent.Toolbench.WorldBuilder.GlobalEntityAspect.FindEntity(System.Guid)">
            <summary>
            Searches for an entity with the specified unique id.
            </summary>
            <param name="uniqueId">Unique id of the entity to find.</param>
            <returns>A valid entity of null if an entity with the specified 
                unique id could not be found.
            </returns>
        </member>
        <member name="M:Emergent.Toolbench.WorldBuilder.GlobalEntityAspect.FindEntities(System.Collections.Generic.IEnumerable{System.Guid})">
            <summary>
            Finds the list of entities matching the provided entity ids.
            </summary>
            <param name="entityIds"></param>
            <returns></returns>
        </member>
        <member name="M:Emergent.Toolbench.WorldBuilder.GlobalEntityAspect.GetNextEntityName(Emergent.Toolbench.EntityModeling.EntityModel)">
            <summary>
            Generates the next unique entity name based on the model.  Calling this method will
            increment the next entity number, even if the name is not used.
            </summary>
            <param name="model">The model of the entity we are uniquely generating the name for.
            </param>
            <returns>A unique entity name.</returns>
        </member>
        <member name="M:Emergent.Toolbench.WorldBuilder.GlobalEntityAspect.GetIndexOfEndNumber(System.String)">
            <summary>
            Gets the index of the start of the last number in a string.
            </summary>
            <param name="text">text to search for last number</param>
            <returns>returns index of the last number from the start, 
            if no number is found, end of string is returned.</returns>
        </member>
        <member name="M:Emergent.Toolbench.WorldBuilder.GlobalEntityAspect.GetNextEntityName(Emergent.Toolbench.EntityModeling.EntityModel,System.String)">
            <summary>
            Generates the next unique entity name based on the model and a base name for the 
            entity.  Calling this method will increment the next entity number, even if the name 
            is not used.
            </summary>
            <param name="model">The model of the entity we are uniquely generating the name for.
            </param>
            <param name="name">The base name to associate with the number.</param>
            <returns>A unique entity name.</returns>
        </member>
        <member name="M:Emergent.Toolbench.WorldBuilder.GlobalEntityAspect.Create(Emergent.Toolbench.EntityModeling.EntityModel)">
            <summary>
            Creates an entity from the specified entity model.
            </summary>
            <param name="model">The model.</param>
            <returns>A newly constructed entity.</returns>
        </member>
        <member name="M:Emergent.Toolbench.WorldBuilder.GlobalEntityAspect.Create(System.String,Emergent.Toolbench.EntityModeling.EntityModel)">
            <summary>
            Creates an entity from the specified entity model.
            </summary>
            <param name="name">The name to give to the new entity.</param>
            <param name="model">The model.</param>
            <returns>A newly constructed entity.</returns>
        </member>
        <member name="M:Emergent.Toolbench.WorldBuilder.GlobalEntityAspect.ClearSelection">
            <summary>
            Clears the selection.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.WorldBuilder.GlobalEntityAspect.DeleteSelectedEntities">
            <summary>
            Deletes the selected entities.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.WorldBuilder.GlobalEntityAspect.AddEntity(Emergent.Toolbench.WorldBuilder.Entity)">
            <summary>
            Adds a new entity to the entity aspect as well as to the associated
            world document.
            </summary>
            <param name="entity">The new entity to add.</param>
        </member>
        <member name="M:Emergent.Toolbench.WorldBuilder.GlobalEntityAspect.AddEntity(Emergent.Toolbench.WorldBuilder.Entity,System.Boolean)">
            <summary>
            Adds a new entity to the entity aspect as well as to the associated
            world document.
            </summary>
            <param name="entity">The new entity to add.</param>
            <param name="silent"><c>false</c> if an entity added event should be fired.</param>
        </member>
        <member name="M:Emergent.Toolbench.WorldBuilder.GlobalEntityAspect.AddEntity(Emergent.Toolbench.WorldBuilder.LocalEntityAspect,Emergent.Toolbench.WorldBuilder.Entity)">
            <summary>
            Adds a new entity to the specified local entity layer aspect.
            </summary>
            <param name="entityAspect">The local entity aspect that will own the entity.</param>
            <param name="entity">The entity to add.</param>
        </member>
        <member name="M:Emergent.Toolbench.WorldBuilder.GlobalEntityAspect.AddEntity(Emergent.Toolbench.WorldBuilder.LocalEntityAspect,Emergent.Toolbench.WorldBuilder.Entity,System.Boolean)">
            <summary>
            Adds a new entity to the specified local entity layer aspect.
            </summary>
            <param name="entityAspect">The local entity aspect that will own the entity.</param>
            <param name="entity">The entity to add.</param>
            <param name="silent"><c>false</c> if an entity added event should be fired.</param>
        </member>
        <member name="M:Emergent.Toolbench.WorldBuilder.GlobalEntityAspect.AddEntities(System.Collections.Generic.IEnumerable{Emergent.Toolbench.WorldBuilder.Entity})">
            <summary>
            Adds a list of entities to the currently active local entity layer aspect.
            </summary>
            <param name="entities">The entities to add.</param>
        </member>
        <member name="M:Emergent.Toolbench.WorldBuilder.GlobalEntityAspect.AddEntities(Emergent.Toolbench.WorldBuilder.LocalEntityAspect,System.Collections.Generic.IEnumerable{Emergent.Toolbench.WorldBuilder.Entity})">
            <summary>
            Adds a list of entities to the specified local entity layer aspect.
            </summary>
            <param name="entityAspect">The local entity aspect that will own the entity.</param>
            <param name="entities">The entities to add.</param>
        </member>
        <member name="M:Emergent.Toolbench.WorldBuilder.GlobalEntityAspect.InternalAddEntity(Emergent.Toolbench.WorldBuilder.LocalEntityAspect,Emergent.Toolbench.WorldBuilder.Entity,System.Boolean)">
            <summary>
            Adds a new entity to the entity aspect as well as to the associated
            world document.
            </summary>
            <param name="entityAspect">The local entity aspect that will own the entity.</param>
            <param name="newEntity">The new entity to add.</param>
            <param name="silent"><c>false</c> if an entity added event should be fired.</param>
        </member>
        <member name="M:Emergent.Toolbench.WorldBuilder.GlobalEntityAspect.RemoveEntity(Emergent.Toolbench.WorldBuilder.Entity)">
            <summary>
            Removes an entity from the global aspect and the owner aspect of the entity.
            </summary>
            <param name="entity">The entity to remove.</param>
            <returns><c>true</c> if the entity was removed; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Emergent.Toolbench.WorldBuilder.GlobalEntityAspect.RemoveEntity(Emergent.Toolbench.WorldBuilder.Entity,System.Boolean)">
            <summary>
            Removes an entity from the global aspect and the owner aspect of the entity.
            </summary>
            <param name="entity">The entity to remove.</param>
            <param name="silent">Should fire a notification event?</param>
            <returns><c>true</c> if the entity was removed; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Emergent.Toolbench.WorldBuilder.GlobalEntityAspect.RemoveEntity(System.Guid)">
            <summary>
            Removes an existing entity from the entity aspect.
            </summary>
            <param name="entityId">The unique id of the entity to remove.</param>
            <returns>The entity that was removed; otherwise, <c>null</c></returns>
        </member>
        <member name="M:Emergent.Toolbench.WorldBuilder.GlobalEntityAspect.RemoveEntity(System.Guid,System.Boolean)">
            <summary>
            Removes an existing entity from the entity aspect.
            </summary>
            <param name="entityId">The unique id of the entity to remove.</param>
            <param name="silent">Should fire a notification event?</param>
            <returns>The entity that was removed; otherwise, <c>null</c></returns>
        </member>
        <member name="M:Emergent.Toolbench.WorldBuilder.GlobalEntityAspect.PickEntity(Emergent.Toolbench.WorldBuilder.EntityPickHandler)">
            <summary>
            Initiates an entity pick.  When this occurs it is up to a handler to complete
            the request to pick an entity.  The entity pick handler should always call 
            <see cref="M:Emergent.Toolbench.WorldBuilder.GlobalEntityAspect.EndPickEntity(System.Boolean)"/> so that all sources for any picks can restore their state.
            </summary>
            <param name="callback">The callback to use when the entity pick is handled.</param>
            <returns>Returns <c>true</c> if the request is being processed; otherwise, 
            <c>false</c>.</returns>
        </member>
        <member name="M:Emergent.Toolbench.WorldBuilder.GlobalEntityAspect.EndPickEntity(System.Boolean)">
            <summary>
            Ends the currently active pick.
            </summary>
            <param name="cancel">Was the pick canceled.</param>
        </member>
        <member name="M:Emergent.Toolbench.WorldBuilder.GlobalEntityAspect.OnEntityAdded(Emergent.Toolbench.WorldBuilder.Entity)">
            <summary>
            Called when an entity gets added to the world.
            </summary>
            <param name="newEntity">The added entity.</param>
        </member>
        <member name="M:Emergent.Toolbench.WorldBuilder.GlobalEntityAspect.OnEntityRemoved(Emergent.Toolbench.WorldBuilder.Entity)">
            <summary>
            Called when an entity gets removed from the world.
            </summary>
            <param name="removedEntity">The entity removed.</param>
        </member>
        <member name="M:Emergent.Toolbench.WorldBuilder.GlobalEntityAspect.OnEntityChanged(System.Object,System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            Called when an entity in the aspect has been modified. This method
            dirties the world document.
            </summary>
            <param name="prop"></param>
        </member>
        <member name="M:Emergent.Toolbench.WorldBuilder.GlobalEntityAspect.RaiseEntitiesLayerHierarchyChanged(Emergent.Toolbench.WorldBuilder.Entity)">
            <summary>
            Raises the RaiseEntitiesLayerHierarchyChanged event for the specified entity.
            </summary>
            <param name="entity">The entity that has changed.</param>
        </member>
        <member name="M:Emergent.Toolbench.WorldBuilder.GlobalEntityAspect.RaiseEntitiesLayerHierarchyChanged(Emergent.Toolbench.WorldBuilder.LayerDocument)">
            <summary>
            Raises the RaiseEntitiesLayerHierarchyChanged event for all entities under the
            specified layer (including those in sub-layers).
            </summary>
            <param name="entity">The layer that has changed.</param>
        </member>
        <member name="M:Emergent.Toolbench.WorldBuilder.GlobalEntityAspect.OnEntityContentChanged(System.Object,System.EventArgs)">
            <summary>
            Called when the entity content changed.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Emergent.Toolbench.WorldBuilder.GlobalEntityAspect.OnProjectRemoved(System.Object,Emergent.Toolbench.WorldBuilder.ModelProjectEventArgs)">
            <summary>
            Called when a project is removed from the reference list.
            </summary>
            <param name="projectDoc">The project doc.</param>
        </member>
        <member name="M:Emergent.Toolbench.WorldBuilder.GlobalEntityAspect.RaisePropertyChanging(System.String)">
            <summary>
            Raises the property changing.
            </summary>
            <param name="propertyName">Name of the property.</param>
        </member>
        <member name="M:Emergent.Toolbench.WorldBuilder.GlobalEntityAspect.RaisePropertyChanged(System.String)">
            <summary>
            Raises the property changed.
            </summary>
            <param name="propertyName">Name of the property.</param>
        </member>
        <member name="E:Emergent.Toolbench.WorldBuilder.GlobalEntityAspect.EntityAdded">
            <summary>
            Fired when an entity is added to the entity aspect.
            </summary>
        </member>
        <member name="E:Emergent.Toolbench.WorldBuilder.GlobalEntityAspect.EntityRemoved">
            <summary>
            Fired when an entity is removed from the entity aspect.
            </summary>
        </member>
        <member name="E:Emergent.Toolbench.WorldBuilder.GlobalEntityAspect.EntityRenamed">
            <summary>
            Fired when an entity is renamed.
            </summary>
        </member>
        <member name="E:Emergent.Toolbench.WorldBuilder.GlobalEntityAspect.SelectedEntitiesChanged">
            <summary>
            Fired when the currently selected entity changes.
            </summary>
        </member>
        <member name="E:Emergent.Toolbench.WorldBuilder.GlobalEntityAspect.EntityChanged">
            <summary>
            Occurs when an entity is changed.
            </summary>
        </member>
        <member name="E:Emergent.Toolbench.WorldBuilder.GlobalEntityAspect.EntityPropertyChanging">
            <summary>
            Occurs when a property's value is about to change.
            </summary>
        </member>
        <member name="E:Emergent.Toolbench.WorldBuilder.GlobalEntityAspect.EntityPropertyChanged">
            <summary>
            Occurs when a property override is added or removed from an entity.
            </summary>
        </member>
        <member name="E:Emergent.Toolbench.WorldBuilder.GlobalEntityAspect.EntityPropertyReset">
            <summary>
            Occurs when a property override is added or removed from an entity.
            </summary>
        </member>
        <member name="E:Emergent.Toolbench.WorldBuilder.GlobalEntityAspect.BeginEntityPickRequest">
            <summary>
            Occurs when an entity pick request is started.
            </summary>
        </member>
        <member name="E:Emergent.Toolbench.WorldBuilder.GlobalEntityAspect.EndEntityPickRequest">
            <summary>
            Occurs when an entity pick request is complete or canceled.  This is so anyone waiting
            to be picked on to satisfy the entity pick request can clean up anything.
            </summary>
        </member>
        <member name="E:Emergent.Toolbench.WorldBuilder.GlobalEntityAspect.EntityActivated">
            <summary>
            Activated means that the entity has been especially focused on in some way.
            </summary>
        </member>
        <member name="E:Emergent.Toolbench.WorldBuilder.GlobalEntityAspect.LayerAdded">
            <summary>
            Occurs when a layer is added to the block
            </summary>
        </member>
        <member name="E:Emergent.Toolbench.WorldBuilder.GlobalEntityAspect.LayerRemoved">
            <summary>
            Occurs when a layer is removed from the block
            </summary>
        </member>
        <member name="E:Emergent.Toolbench.WorldBuilder.GlobalEntityAspect.LayerPropertyChanged">
            <summary>
            Occurs when a layer's properties are changed
            </summary>
        </member>
        <member name="E:Emergent.Toolbench.WorldBuilder.GlobalEntityAspect.EntitiesLayerHierarchyChanged">
            <summary>
            Fired when the hierarchy of layers that contains an entity is modified (entity moved
            to a different layer, sub-layer moved to a different layer, layer renamed).
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.WorldBuilder.GlobalEntityAspect.RootLayer">
            <summary>
            Gets the root layer.
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.WorldBuilder.GlobalEntityAspect.Entities">
            <summary>
            Gets the entities currently instantiated in the entity aspect.
            </summary>
            <value>The entity instances.</value>
        </member>
        <member name="P:Emergent.Toolbench.WorldBuilder.GlobalEntityAspect.SelectedEntities">
            <summary>
            Gets the currently selected entities
            </summary>
            <value>The selected entities.</value>
        </member>
        <member name="P:Emergent.Toolbench.WorldBuilder.GlobalEntityAspect.HasSelection">
            <summary>
            Gets a value indicating if there are any entities selected.
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.WorldBuilder.GlobalEntityAspect.ActiveLayer">
            <summary>
            Gets or sets the currently active layer.  The active layer is where new entities will
            be created, other than that it has no other effect.
            </summary>
        </member>
        <member name="T:Emergent.Toolbench.WorldBuilder.GlobalEntityAspect.HierarchyState">
            <summary>
            State of a layers hierarchy.
            </summary>
        </member>
        <member name="F:Emergent.Toolbench.WorldBuilder.GlobalEntityAspect.HierarchyState.DoesNotExist">
            <summary>
            No part of the hierarchy exists in the current BlockDocument.
            </summary>
        </member>
        <member name="F:Emergent.Toolbench.WorldBuilder.GlobalEntityAspect.HierarchyState.ExistsLoaded">
            <summary>
            As far as we can tell, that hierarchy is currently loaded (doesn't mean that the
            whole hierarchy actually exists, but there is no unloaded layer in that hierarchy
            so if something doesn't exist, it's not because of an unloaded layer).
            </summary>
        </member>
        <member name="F:Emergent.Toolbench.WorldBuilder.GlobalEntityAspect.HierarchyState.ExistsUnloaded">
            <summary>
            At least part of the hierarchy exists and is currently unloaded. That means that
            if something is missing, chances are it exists but is just not currently loaded.
            </summary>
        </member>
        <member name="T:Emergent.Toolbench.WorldBuilder.SelectNextEntityAction">
            <summary>
            Exports the current block file out to an xblock file.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.WorldBuilder.SelectNextEntityAction.Execute(Emergent.Toolbench.Actions.ExecutionContext,Emergent.Toolbench.Actions.ExecutionStyle)">
            <summary>
            Performs a block export operation.
            </summary>
            <param name="context">The execution context of the action.</param>
            <param name="style">The execution style of the action.</param>
            <returns>The execution result.</returns>
        </member>
        <member name="M:Emergent.Toolbench.WorldBuilder.Entity.#ctor(Emergent.Toolbench.EntityModeling.EntityModel)">
            <summary>
            Initializes a new instance of the <see cref="T:Emergent.Toolbench.WorldBuilder.Entity"/> class.
            </summary>
            <param name="entityModel">The entity model.</param>
        </member>
        <member name="M:Emergent.Toolbench.WorldBuilder.Entity.#ctor(Emergent.Toolbench.EntityModeling.EntityModel,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Emergent.Toolbench.WorldBuilder.Entity"/> class.
            </summary>
            <param name="entityModel">The entity model.</param>
            <param name="isEditTimeOnly">if set to <c>true</c> [is edit time only].</param>
        </member>
        <member name="M:Emergent.Toolbench.WorldBuilder.Entity.#ctor(Emergent.Toolbench.EntityModeling.EntityModel,System.Guid)">
            <summary>
            Initializes a new instance of the <see cref="T:Emergent.Toolbench.WorldBuilder.Entity"/> class.
            </summary>
            <param name="entityModel">The entity model.</param>
            <param name="id">The id.</param>
        </member>
        <member name="M:Emergent.Toolbench.WorldBuilder.Entity.#ctor(Emergent.Toolbench.EntityModeling.EntityModel,System.Guid,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Emergent.Toolbench.WorldBuilder.Entity"/> class.
            </summary>
            <param name="entityModel">The entity model.</param>
            <param name="id">The id.</param>
            <param name="isEditTimeOnly">if set to <c>true</c> [is edit time only].</param>
        </member>
        <member name="M:Emergent.Toolbench.WorldBuilder.Entity.StartDirtyTracking">
            <summary>
            Starts dirty tracking, including iteration counter.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.WorldBuilder.Entity.StopDirtyTracking">
            <summary>
            Stops dirty tracking, including iteration counter.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.WorldBuilder.Entity.GenerateName(Emergent.Toolbench.EntityModeling.EntityModel)">
            <summary>
            Generates a name based on the model passed in. The method first looks for a property
            named "Name", either as an override or as a property on the model, and if it exists 
            and is valid, it is used. Otherwise, the model name is used.
            </summary>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="M:Emergent.Toolbench.WorldBuilder.Entity.Create(System.String,System.Guid,Emergent.Toolbench.EntityModeling.EntityModel,Emergent.Toolbench.WorldBuilder.LayerDocument)">
            <summary>
            Creates an entity from the specified entity model.
            </summary>
            <param name="name">The name to give to the entity.</param>
            <param name="id">A unique id for the entity.</param>
            <param name="model">The model.</param>
            <returns>A newly constructed entity.</returns>    
            <remarks>This method exists primarily to support creating entities
                from some persisted state. (e.g. an xml file). Therefore, it 
                should not be used in most cases.
            </remarks>
        </member>
        <member name="M:Emergent.Toolbench.WorldBuilder.Entity.SetParentLayer(Emergent.Toolbench.WorldBuilder.LayerDocument,System.Boolean)">
            <summary>
            Sets the parent layer of an entity.
            </summary>
            <param name="parent">The parent layer.</param>
            <param name="registerEntity">Should we register the entity with the layer.</param>
        </member>
        <member name="M:Emergent.Toolbench.WorldBuilder.Entity.SetParentLayer(Emergent.Toolbench.WorldBuilder.LayerDocument,System.Boolean,System.Boolean)">
            <summary>
            Sets the parent layer of an entity.
            </summary>
            <param name="parent">The parent layer.</param>
            <param name="registerEntity">Should we register the entity with the layer.</param>
            <param name="silent">Will any event handlers be called?</param>
        </member>
        <member name="M:Emergent.Toolbench.WorldBuilder.Entity.OnEntityModelPropertyChanged(System.Object,Emergent.Toolbench.EntityModeling.ModelPropertyChangedEventArgs)">
            <summary>
            Increments the iteration counter on changes to the entity.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The model property changing event arguments.</param>
        </member>
        <member name="M:Emergent.Toolbench.WorldBuilder.Entity.OnNameChange(System.String,System.String)">
            <summary>
            Performs any work associated with an entity name change.
            </summary>
            <param name="oldName">The old entity name.</param>
            <param name="newName">The new entity name.</param>
        </member>
        <member name="M:Emergent.Toolbench.WorldBuilder.Entity.HasMixin(Emergent.Toolbench.EntityModeling.EntityModel)">
            <summary>
            Gets a value indicating if the entity mixes in a model with a particular name.
            </summary>
            <param name="modelName">The model to look for.</param>
            <returns><c>true</c> if the entity mixes in the model; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Emergent.Toolbench.WorldBuilder.Entity.HasMixin(System.String)">
            <summary>
            Gets a value indicating if the entity mixes in a model with a particular name.
            </summary>
            <param name="modelName">The name of the mixed in model to look for.</param>
            <returns><c>true</c> if the entity mixes in the model; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Emergent.Toolbench.WorldBuilder.Entity.ToXml">
            <summary>
            Converts to entity to xml.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Emergent.Toolbench.WorldBuilder.Entity.ToString">
            <summary>
            Gets the string representation of the entity, which is just the name of the entity.
            </summary>
            <returns>The name of the entity.</returns>
        </member>
        <member name="P:Emergent.Toolbench.WorldBuilder.Entity.Document">
            <summary>
            Gets or sets the project.
            </summary>
            <value>The project.</value>
        </member>
        <member name="P:Emergent.Toolbench.WorldBuilder.Entity.Layer">
            <summary>
            Gets or sets the layer document.
            </summary>
            <value>The layer document.</value>
        </member>
        <member name="P:Emergent.Toolbench.WorldBuilder.Entity.LayerName">
            <summary>
            Gets or sets the layer name.
            </summary>
            <value>The layer name.</value>
        </member>
        <member name="P:Emergent.Toolbench.WorldBuilder.Entity.Traits">
            <summary>
            Gets a read-only collection of traits.
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.WorldBuilder.Entity.IsSelected">
            <summary>
            Gets or sets a value indicating if this entity is currently selected.
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.WorldBuilder.Entity.IsEditTimeOnly">
            <summary>
            Gets or sets a value indicating whether [edit time only].
            </summary>
            <value><c>true</c> if [edit time only]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Emergent.Toolbench.WorldBuilder.Entity.IsVisible">
            <summary>
            Gets or sets a value indicating if this entity is currently visible.  This
            is only applicable at tool time.
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.WorldBuilder.Entity.IsLocked">
            <summary>
            Gets or sets a value indicating if this entity is currently locked.  This
            is only applicable at tool time.
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.WorldBuilder.Entity.IsFunctionallyLocked">
            <summary>
            An entity can be locked from a variety of sources, this property encapsulates the 
            tests on all paths.
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.WorldBuilder.Entity.IsFunctionallyVisible">
            <summary>
            An entity can be made invisible from a variety of sources, this property encapsulates 
            the tests on all paths.
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.WorldBuilder.Entity.Iterations">
            <summary>
            Track the number of changes to entity state, for rapid iteration workflow.
            </summary>
        </member>
        <member name="T:Emergent.Toolbench.WorldBuilder.BlockExportEventArgs">
            <summary>
            The <see cref="T:Emergent.Toolbench.WorldBuilder.BlockExportEventArgs"/> class contains information relating to exporting a 
            block file being exported.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.WorldBuilder.BlockExportEventArgs.#ctor(System.Uri,Emergent.Toolbench.WorldBuilder.IWorldBuilderExporter)">
            <summary>
            Initializes a new instance of <see cref="T:Emergent.Toolbench.WorldBuilder.BlockExportEventArgs"/>.
            </summary>
            <param name="exportPath">The export path.</param>
            <param name="exporter">The exporter that was used.</param>
        </member>
        <member name="P:Emergent.Toolbench.WorldBuilder.BlockExportEventArgs.ExportPath">
            <summary>
            Gets the export path.
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.WorldBuilder.BlockExportEventArgs.Exporter">
            <summary>
            Gets the exporter that was used.
            </summary>
        </member>
        <member name="T:Emergent.Toolbench.WorldBuilder.Migration.MigrationStepXto1">
            <summary>
            This class migrates block and layer files to version 1.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.WorldBuilder.Migration.MigrationStepXto1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Emergent.Toolbench.WorldBuilder.Migration.MigrationStepXto1"/> class.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.WorldBuilder.Migration.MigrationStepXto1.GatherSubDocuments(Emergent.Toolbench.MigrationService.MigrationJob)">
            <summary>
            Gathers the sub documents that need to be migrated along with the main document
            specified in the <see cref="T:Emergent.Toolbench.MigrationService.MigrationJob"/>.
            </summary>
            <param name="job">The migration job.</param>
        </member>
        <member name="M:Emergent.Toolbench.WorldBuilder.Migration.MigrationStepXto1.GetBlockProjectDocuments(Emergent.Toolbench.MigrationService.MigrationJob)">
            <summary>
            Adds all referenced layer files to a <see cref="T:Emergent.Toolbench.MigrationService.MigrationJob"/>.
            </summary>
            <param name="job">The migration job.</param>
        </member>
        <member name="T:Emergent.Toolbench.WorldBuilder.Migration.MigrationStep1to2">
            <summary>
            This class migrates block and layer files from version 1 to 2.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.WorldBuilder.Migration.MigrationStep1to2.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Emergent.Toolbench.WorldBuilder.Migration.MigrationStep1to2"/> class.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.WorldBuilder.Migration.MigrationStep1to2.Migrate(Emergent.Toolbench.MigrationService.MigrationDocument)">
            <summary>
            Migrates the specified block or layer document from version 1 to 2. This wraps all
            properties in an explicit properties element and orders them by name. It also corrects
            the persisted relative paths to layers.
            </summary>
            <param name="document">The document to migrate.</param>
        </member>
        <member name="M:Emergent.Toolbench.WorldBuilder.Migration.MigrationStep1to2.GatherSubDocuments(Emergent.Toolbench.MigrationService.MigrationJob)">
            <summary>
            Gathers the sub documents that need to be migrated along with the main document
            specified in the <see cref="T:Emergent.Toolbench.MigrationService.MigrationJob"/>.
            </summary>
            <param name="job">The migration job.</param>
        </member>
        <member name="T:Emergent.Toolbench.WorldBuilder.Migration.MigrationStep2to3">
            <summary>
            This class migrates block and layer files from version 1 to 2.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.WorldBuilder.Migration.MigrationStep2to3.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Emergent.Toolbench.WorldBuilder.Migration.MigrationStep2to3"/> class.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.WorldBuilder.Migration.MigrationStep2to3.Migrate(Emergent.Toolbench.MigrationService.MigrationDocument)">
            <summary>
            Migrates the specified block or layer document from version 2 to 3. 
            This transforms any terrain entities into their new format. 
            </summary>
            <param name="document">The document to migrate.</param>
        </member>
        <member name="M:Emergent.Toolbench.WorldBuilder.Migration.MigrationStep2to3.GatherSubDocuments(Emergent.Toolbench.MigrationService.MigrationJob)">
            <summary>
            Gathers the sub documents that need to be migrated along with the main document
            specified in the <see cref="T:Emergent.Toolbench.MigrationService.MigrationJob"/>.
            </summary>
            <param name="job">The migration job.</param>
        </member>
        <member name="T:Emergent.Toolbench.WorldBuilder.LayerAspect">
            <summary>
            The layer aspect contains the list of sub layers contained in a piece of content.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.WorldBuilder.LayerAspect.FindLayerByName(System.String)">
            <summary>
            Find a layer by its name. If no layer matches the name, then return null.
            </summary>
            <param name="name">The name to look for.</param>
            <returns></returns>
        </member>
        <member name="M:Emergent.Toolbench.WorldBuilder.LayerAspect.CreateChildLayer(System.String)">
            <summary>
            Create a child layer with the given name
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Emergent.Toolbench.WorldBuilder.LayerAspect.CanCreateLayerByName(System.String)">
            <summary>
            Determine whether or not the name satisifies the criteria for being a valid filename.
            </summary>
            <param name="name">The suggested name of the layer.</param>
            <returns>Whether or not the layer name is valid.</returns>
        </member>
        <member name="M:Emergent.Toolbench.WorldBuilder.LayerAspect.MakeLayerUri(System.String)">
            <summary>
            Determine a layer's autogenerated Uri from its name.
            </summary>
            <param name="name">The name of the layer.</param>
            <returns>The location of that layer.</returns>
        </member>
        <member name="M:Emergent.Toolbench.WorldBuilder.LayerAspect.MakeLayerName(System.Uri)">
            <summary>
            Determine a layer's autogenerated name from its Uri.
            </summary>
            <param name="layerUri">The location of the layer file.</param>
            <returns>The name of the layer.</returns>
        </member>
        <member name="M:Emergent.Toolbench.WorldBuilder.LayerAspect.CreateChildLayerInternal(System.String)">
            <summary>
            Create a child layer with the given name
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Emergent.Toolbench.WorldBuilder.LayerAspect.AddChildLayer(Emergent.Toolbench.WorldBuilder.LayerDocument)">
            <summary>
            Add the specified child layer to the child list. If it already has a parent,
            it is removed from that parent.
            </summary>
            <param name="layer"></param>
            <returns></returns>
        </member>
        <member name="M:Emergent.Toolbench.WorldBuilder.LayerAspect.AddChildLayer(System.Uri)">
            <summary>
            Opens and adds the filename as a child layer of this layer. 
            </summary>
            <param name="layerUri"></param>
            <returns></returns>
        </member>
        <member name="M:Emergent.Toolbench.WorldBuilder.LayerAspect.ImportChildLayer(System.Uri)">
            <summary>
            Imports and adds the filename as a child layer of this layer. 
            </summary>
            <param name="layerUri"></param>
            <returns></returns>
        </member>
        <member name="M:Emergent.Toolbench.WorldBuilder.LayerAspect.RemoveChildLayer(Emergent.Toolbench.WorldBuilder.LayerDocument,System.Boolean)">
            <summary>
            Remove a child layer from the child list. The child layer is destroyed.
            </summary>
            <param name="layer">The layer to delete from block. All children will also be deleted.</param>
            <param name="deleteFromDisk">Should this layer and its descendents also be deleted from disk?</param>
            <returns></returns>
        </member>
        <member name="M:Emergent.Toolbench.WorldBuilder.LayerAspect.GetLayerHierarchyNames">
            <summary>
            Gets a list of layer names, starting with this layer, and going up the hierarchy
            until the root layer (a BlockDocument) is reached.
            </summary>
            <returns>A list of layer names, starting with this layer and going up the hierarchy
            until the root layer (a BlockDocument) is reached.</returns>
        </member>
        <member name="M:Emergent.Toolbench.WorldBuilder.LayerAspect.LoadChildrenFromDefinition(Emergent.Toolbench.WorldBuilder.LayerAspect.SubLayersOpenMode)">
            <summary>
            Loads children (sub-layers) from the current XML definition.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.WorldBuilder.LayerAspect.IsAncestorOf(Emergent.Toolbench.WorldBuilder.LayerDocument)">
            <summary>
            Checks if this layer is an ancestor of the specified potential descendant layer. Note
            that this method returns false if the specified layer is this layer (in other words,
            a layer is not considered to be an ancestor of itself).
            </summary>
            <param name="potentialDescendant">The layer that might be a descendant</param>
            <returns>true if this layer is an ancestor of potentialDescendant, false
            otherwise</returns>
        </member>
        <member name="M:Emergent.Toolbench.WorldBuilder.LayerAspect.OnLayerDocumentPropertyChanged(System.Object,System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            Handler for parent document changes so that they can be forwarded to
            the GlobalEntityAspect.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Emergent.Toolbench.WorldBuilder.LayerAspect.RaisePropertyChanged(System.String)">
            <summary>
            Raises the property changed.
            </summary>
            <param name="propertyName">Name of the property.</param>
        </member>
        <member name="P:Emergent.Toolbench.WorldBuilder.LayerAspect.Layers">
            <summary>
            Gets the child layers of this layer.
            </summary>
            <value>The child layers.</value>
        </member>
        <member name="P:Emergent.Toolbench.WorldBuilder.LayerAspect.Parent">
            <summary>
            The parent layer for this document.
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.WorldBuilder.LayerAspect.RootParent">
            <summary>
            The root parent layer of this document
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.WorldBuilder.LayerAspect.GlobalEntityAspect">
            <summary>
            The entity management aspect for the root parent
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.WorldBuilder.LayerAspect.IsActive">
            <summary>
            Gets or sets a value indicating if this layer document is active.
            This should only ever be set by the GlobalEntityAspect, not by a user.
            This is because GlobalEntityAspect must be kept in sync with the currently
            active layer; also GlobalEntityAspect handles changing this property for
            undo/redo.
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.WorldBuilder.LayerAspect.Load">
            <summary>
            Gets or sets a value indicating if this layer document is set to be loaded.
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.WorldBuilder.LayerAspect.Locked">
            <summary>
            Gets or sets a value indicating if this layer document is locked.
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.WorldBuilder.LayerAspect.Visible">
            <summary>
            Gets or sets a value indicating if this layer document is visible.
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.WorldBuilder.LayerAspect.ForceUnloadOnOpenedLayers">
            <summary>
            Gets or sets a value indicating whether layers should ignore the "Load" user setting
            and always open in the Unloaded state.
            </summary>
            <value>
                <c>true</c> to force layers to open in the unloaded state; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:Emergent.Toolbench.WorldBuilder.LayerAspect.SubLayersOpenMode">
            <summary>
            How should sub-layers be opened?
            </summary>
        </member>
        <member name="F:Emergent.Toolbench.WorldBuilder.LayerAspect.SubLayersOpenMode.Normal">
            <summary>
            Normally: User settings will be used to determine if a layer's
            contents should be loaded or not.
            </summary>
        </member>
        <member name="F:Emergent.Toolbench.WorldBuilder.LayerAspect.SubLayersOpenMode.ForceUnloaded">
            <summary>
            Force the unloaded state: Layer's contents will not be loaded
            regardless of user settings.
            </summary>
        </member>
        <member name="T:Emergent.Toolbench.WorldBuilder.BlockDocumentFactory">
            <summary>
            Implements a document factory for game world documents. Game world 
            documents are a tool time format for representing the contents of a 
            game including references to entity models, entities, geometry, etc.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.WorldBuilder.BlockDocumentFactory.New(Emergent.Toolbench.ContentService.ContentCreationSettings)">
            <summary>
            Creates an empty game world.
            </summary>
            <param name="args">Additional configuration data used to create
            the document.</param>
            <returns>A new game world document.</returns>
        </member>
        <member name="M:Emergent.Toolbench.WorldBuilder.BlockDocumentFactory.Open(Emergent.Toolbench.ContentService.ContentCreationSettings)">
            <summary>
            Opens an existing game world document. After the data is parsed 
            the different aspects attached to the document are responsible for
            extracting the necessary pieces.
            </summary>
            <param name="resourceLocation"></param>
            <returns>A new game world document.</returns>
        </member>
        <member name="M:Emergent.Toolbench.WorldBuilder.BlockDocumentFactory.Save(Emergent.Toolbench.ContentService.AbstractDocument)">
            <summary>
            Saves the game world document.
            </summary>
            <param name="document">The document to save.</param>
        </member>
        <member name="T:Emergent.Toolbench.WorldBuilder.RemoveLayerAction">
            <summary>
            This action implementation handles removing a layer.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.WorldBuilder.RemoveLayerAction.#ctor(Emergent.Toolbench.WorldBuilder.LayerDocument,System.Boolean)">
            <summary>
            Constructs the remove entity action.
            </summary>
            <param name="aspect">The entity aspect with which to operate on.
            </param>
            <param name="entities">The entities to be removed.
            </param>
        </member>
        <member name="M:Emergent.Toolbench.WorldBuilder.RemoveLayerAction.EndUndo">
            <summary>
            Removes the entity that was added by this action from the entity 
            aspect.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.WorldBuilder.RemoveLayerAction.BeginRedo">
            <summary>
            Re-adds the entity to the entity aspect.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.WorldBuilder.RemoveLayerAction.Execute(Emergent.Toolbench.Actions.ExecutionContext,Emergent.Toolbench.Actions.ExecutionStyle)">
            <summary>
            Removes the entities from the entity aspect.
            </summary>      
            <param name="context">The execution context of the action.</param>
            <param name="style">The execution style of the action.</param>
        </member>
        <member name="P:Emergent.Toolbench.WorldBuilder.RemoveLayerAction.IsUndoable">
            <summary>
            Gets a value indicating if the action is undo-able.
            </summary>
            <remarks>
            Normally this value should be true but if the action can conditionally become 
            non-undo-able, this property should reflect that.
            </remarks>
        </member>
        <member name="P:Emergent.Toolbench.WorldBuilder.RemoveLayerAction.Description">
            <summary>
            Gets a description used to display information about the undo/redo
            operation to the user.
            </summary>
            <value>The label.</value>
        </member>
        <member name="T:Emergent.Toolbench.WorldBuilder.ClearEntitySelectionAction">
            <summary>
            This action implementation handles clearing the current entity selection.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.WorldBuilder.ClearEntitySelectionAction.#ctor(Emergent.Toolbench.WorldBuilder.GlobalEntityAspect)">
            <summary>
            Constructs the entity selection clear action.
            </summary>
            <param name="aspect">The entity aspect on which to operate.
            </param>
        </member>
        <member name="M:Emergent.Toolbench.WorldBuilder.ClearEntitySelectionAction.EndUndo">
            <summary>
            Restores the previous entity selection.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.WorldBuilder.ClearEntitySelectionAction.BeginRedo">
            <summary>
            Clears the entity selection again.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.WorldBuilder.ClearEntitySelectionAction.Execute(Emergent.Toolbench.Actions.ExecutionContext,Emergent.Toolbench.Actions.ExecutionStyle)">
            <summary>
            Clears the current entity selection.
            </summary>      
            <param name="context">The execution context of the action.</param>
            <param name="style">The execution style of the action.</param>
        </member>
        <member name="P:Emergent.Toolbench.WorldBuilder.ClearEntitySelectionAction.Description">
            <summary>
            Gets a description used to display information about the undo/redo
            operation to the user.
            </summary>
            <value>The label.</value>
        </member>
        <member name="P:Emergent.Toolbench.WorldBuilder.ClearEntitySelectionAction.IsUndoable">
            <summary>
            Gets a value indicating if the action is undo-able.
            </summary>
            <remarks>
            Normally this value should be true but if the action can conditionally become 
            non-undo-able, this property should reflect that.
            </remarks>
        </member>
        <member name="T:Emergent.Toolbench.WorldBuilder.UnloadLayerAction">
            <summary>
            This action handles unloading a layer that is currently loaded.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.WorldBuilder.UnloadLayerAction.#ctor(Emergent.Toolbench.WorldBuilder.LayerDocument)">
            <summary>
            Constructs the unload entity action.
            </summary>
            <param name="layer">The layer to operate on.
            </param>
        </member>
        <member name="M:Emergent.Toolbench.WorldBuilder.UnloadLayerAction.BeginUndo">
            <summary>
            Restores the layer as it was before we unloaded it.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.WorldBuilder.UnloadLayerAction.EndUndo">
            <summary>
            Doesn't do anything in this implementation.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.WorldBuilder.UnloadLayerAction.BeginRedo">
            <summary>
            Re-unloads the layer.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.WorldBuilder.UnloadLayerAction.EndRedo">
            <summary>
            Doesn't do anything in this implementation.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.WorldBuilder.UnloadLayerAction.Execute(Emergent.Toolbench.Actions.ExecutionContext,Emergent.Toolbench.Actions.ExecutionStyle)">
            <summary>
            Unloads the layer's entities and sub-layers.
            </summary>      
            <param name="context">The execution context of the action.</param>
            <param name="style">The execution style of the action.</param>
        </member>
        <member name="P:Emergent.Toolbench.WorldBuilder.UnloadLayerAction.IsUndoable">
            <summary>
            Gets a value indicating if the action is undo-able.
            </summary>
            <remarks>
            Normally this value should be true but if the action can conditionally become 
            non-undo-able, this property should reflect that.
            </remarks>
        </member>
        <member name="P:Emergent.Toolbench.WorldBuilder.UnloadLayerAction.Description">
            <summary>
            Gets a description used to display information about the undo/redo
            operation to the user.
            </summary>
            <value>The label.</value>
        </member>
        <member name="T:Emergent.Toolbench.WorldBuilder.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.WorldBuilder.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.WorldBuilder.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.WorldBuilder.Properties.Resources.ActionDescription_LoadLayer">
            <summary>
              Looks up a localized string similar to Load Layer.
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.WorldBuilder.Properties.Resources.ActionDescription_UnloadLayer">
            <summary>
              Looks up a localized string similar to Unload Layer.
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.WorldBuilder.Properties.Resources.CannotActivateUnloadedLayer">
            <summary>
              Looks up a localized string similar to Cannot set an unloaded layer as active/current. Root layer will be activated instead..
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.WorldBuilder.Properties.Resources.CannotAddEntityToUnloadedLayer">
            <summary>
              Looks up a localized string similar to Cannot add an entity to an unloaded layer..
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.WorldBuilder.Properties.Resources.CannotAddSubLayerToUnloadedLayer">
            <summary>
              Looks up a localized string similar to Cannot add a sub-layer to an unloaded layer..
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.WorldBuilder.Properties.Resources.CannotChangeLockedStateOnUnloadedLayer">
            <summary>
              Looks up a localized string similar to Cannot change the Locked state of an unloaded layer..
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.WorldBuilder.Properties.Resources.CannotChangeVisibleStateOnUnloadedLayer">
            <summary>
              Looks up a localized string similar to Cannot change the Visible state of an unloaded layer..
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.WorldBuilder.Properties.Resources.CannotSaveUnloadedLayer">
            <summary>
              Looks up a localized string similar to Cannot save an unloaded layer..
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.WorldBuilder.Properties.Resources.CopyingXBlock">
            <summary>
              Looks up a localized string similar to Copying XBlock &quot;{0}&quot; to &quot;{1}&quot;..
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.WorldBuilder.Properties.Resources.ErrorLoadingLayerFromFile">
            <summary>
              Looks up a localized string similar to Unable to load layer from file:.
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.WorldBuilder.Properties.Resources.ErrorResolveMixin">
            <summary>
              Looks up a localized string similar to Could not find mixin source for model {0}..
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.WorldBuilder.Properties.Resources.ExportingBlock">
            <summary>
              Looks up a localized string similar to Exporting Block &quot;{0}&quot; to &quot;{1}&quot;..
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.WorldBuilder.Properties.Resources.FileAccessError">
            <summary>
              Looks up a localized string similar to File &quot;{0}&quot; is not found or its access is denied..
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.WorldBuilder.Properties.Resources.FileFormatError">
            <summary>
              Looks up a localized string similar to File &quot;{0}&quot; is badly formated..
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.WorldBuilder.Properties.Resources.FileSaveError">
            <summary>
              Looks up a localized string similar to Error saving file &quot;{0}&quot;..
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.WorldBuilder.Properties.Resources.OneInstanceGlobalEntity">
            <summary>
              Looks up a localized string similar to Cannot create more than one instance of &quot;{0}&quot;.  This model has a global trait or has a mixin with a global trait..
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.WorldBuilder.Properties.Resources.RemovingOverrideForProperty">
            <summary>
              Looks up a localized string similar to Entity &quot;{0}&quot;; Removing override for property &quot;{1}&quot;.
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.WorldBuilder.Properties.Resources.UnableToFindEntityModel">
            <summary>
              Looks up a localized string similar to Unable to find an entity model &quot;{0}&quot; for entity &quot;{1}&quot;, Entity id: &quot;{2}&quot;..
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.WorldBuilder.Properties.Resources.UnableToFindEntityModelProperty">
            <summary>
              Looks up a localized string similar to Unable to locate property: &quot;{0}&quot; on entity model: &quot;{1}&quot;.  The override was removed..
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.WorldBuilder.Properties.Resources.UnableToFindPaletteAspect">
            <summary>
              Looks up a localized string similar to Unable to create entities. The entity palette aspect could not be located..
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.WorldBuilder.Properties.Resources.UnableToRestoreEntityProperty">
            <summary>
              Looks up a localized string similar to Unable to restore an unknown property for entity &quot;{0}&quot; : {1}.
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.WorldBuilder.Properties.Resources.UnableToThreadEntityCreate">
            <summary>
              Looks up a localized string similar to Unable to create thread for entity creation..
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.WorldBuilder.Properties.Resources.UnknowIDFormat">
            <summary>
              Looks up a localized string similar to Unknown entity id format, generating new id. &quot;{0}&quot;.
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.WorldBuilder.Properties.Resources.XblockNotExportedBecauseLayerUnloaded">
            <summary>
              Looks up a localized string similar to The {0} file for layer &apos;{1}&apos; will not be exported because this layer is unloaded..
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.WorldBuilder.Properties.Resources.XblockNotExportedBecauseMultipleDescendantsUnloaded">
            <summary>
              Looks up a localized string similar to The {0} file for layer &apos;{1}&apos; will not be exported because the following sub-layers are unloaded: {2}..
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.WorldBuilder.Properties.Resources.XblockNotExportedBecauseSingleDescendantUnloaded">
            <summary>
              Looks up a localized string similar to The {0} file for layer &apos;{1}&apos; will not be exported because the following sub-layer is unloaded: {2}..
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.WorldBuilder.CreateNewLayerAction.#ctor(Emergent.Toolbench.WorldBuilder.LayerDocument,System.String)">
            <summary>
            Constructs the remove entity action.
            </summary>
            <param name="aspect">The entity aspect with which to operate on.
            </param>
            <param name="entities">The entities to be removed.
            </param>
        </member>
        <member name="M:Emergent.Toolbench.WorldBuilder.CreateNewLayerAction.EndUndo">
            <summary>
            Removes the entity that was added by this action from the entity 
            aspect.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.WorldBuilder.CreateNewLayerAction.BeginRedo">
            <summary>
            Re-adds the entity to the entity aspect.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.WorldBuilder.CreateNewLayerAction.Execute(Emergent.Toolbench.Actions.ExecutionContext,Emergent.Toolbench.Actions.ExecutionStyle)">
            <summary>
            Removes the entities from the entity aspect.
            </summary>      
            <param name="context">The execution context of the action.</param>
            <param name="style">The execution style of the action.</param>
        </member>
        <member name="P:Emergent.Toolbench.WorldBuilder.CreateNewLayerAction.IsUndoable">
            <summary>
            Gets a value indicating if the action is undo-able.
            </summary>
            <remarks>
            Normally this value should be true but if the action can conditionally become 
            non-undo-able, this property should reflect that.
            </remarks>
        </member>
        <member name="P:Emergent.Toolbench.WorldBuilder.CreateNewLayerAction.Description">
            <summary>
            Gets a description used to display information about the undo/redo
            operation to the user.
            </summary>
            <value>The label.</value>
        </member>
        <member name="T:Emergent.Toolbench.WorldBuilder.Plugin">
            <summary>
            Handles startup tasks for World Builder.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.WorldBuilder.Plugin.Start">
            <summary>
            Registers migration chains for World Builder documents.
            </summary>
        </member>
        <member name="T:Emergent.Toolbench.WorldBuilder.LayerDocument">
            <summary>
            Layers are combined together to form a sector.  They are an abstract separation
            of the data in a sector, allowing studios to breakup sectors into areas of importance
            based on content, or possibly who is responsible for that portion of the world.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.WorldBuilder.LayerDocument.OnPropertyChanging(System.String,System.Object,System.Object)">
            <summary>
            When a property is changing we need to check to see if the property is a resource 
            location.
            </summary>
            <param name="e">Property changing event args</param>
        </member>
        <member name="M:Emergent.Toolbench.WorldBuilder.LayerDocument.OnDirtyStatusChanged(Emergent.Toolbench.ContentService.AbstractContent)">
            <summary>
            Called when the document's dirty status is changed.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.WorldBuilder.LayerDocument.OnClosing">
            <summary>
            Called when the content is closing.
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.WorldBuilder.LayerDocument.Name">
            <summary>
            Gets or sets the name of the layer.
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.WorldBuilder.LayerDocument.Definition">
            <summary>
            Gets the xml definition of the layer that was loaded.
            </summary>
        </member>
        <member name="T:Emergent.Toolbench.WorldBuilder.BlockDocument">
            <summary>
            The block document represents a zone of entities.  A block is the smallest fragment
            that worlds can be composed of.  Blocks are composed of entities and layers.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.WorldBuilder.BlockDocument.GenerateExportPath">
            <summary>
            Generate the file path for exported content from World Builder.
            Note that this uses the "Emergent.WorldBuilder.ExportFolder" setting
            to generate the export path. Note that filenames are excluded from the path.
            </summary>
            <returns>A Uri containing the export path.</returns>
        </member>
        <member name="M:Emergent.Toolbench.WorldBuilder.BlockDocument.Export">
            <summary>
            Export out this block file using the IWorldBuilderExporter defined in the settings
            with the default export path generated by GenerateExportPath().
            </summary>
            <returns>A list of the Uri's that were exported to in the export process.</returns>
        </member>
        <member name="M:Emergent.Toolbench.WorldBuilder.BlockDocument.Export(Emergent.Toolbench.WorldBuilder.IWorldBuilderExporter,System.Uri)">
            <summary>
            Export out this block file using the specified IWorldBuilderExporter and exporter path
            arguments.
            </summary>
            <param name="exporter">The implementation of the exporter to use when exporting this block.</param>
            <param name="path">The file path to which all exported content should be written to.</param>
            <returns>A list of the Uri's that were exported to in the export process.</returns>
        </member>
        <member name="M:Emergent.Toolbench.WorldBuilder.BlockDocument.Export(System.Uri)">
            <summary>
            Export out this block file using the IWorldBuilderExporter defined in the settings
            to the path specified as the argument.
            </summary>
            <param name="path">The file path to which all exported content should be written to.</param>
            <returns>A list of the Uri's that were exported to in the export process.</returns>
        </member>
        <member name="M:Emergent.Toolbench.WorldBuilder.BlockDocument.OnContentOpened(System.Object,Emergent.Toolbench.ContentService.ContentEventArgs)">
            <summary>
            Adds the ReferenceGroupItem to the game solution item representing this block.
            </summary>
            <param name="sender">The content.</param>
            <param name="e">The event arguments.</param>
        </member>
        <member name="M:Emergent.Toolbench.WorldBuilder.BlockDocument.LoadAllLayers(Emergent.Toolbench.WorldBuilder.LayerDocument,System.Collections.Generic.List{Emergent.Toolbench.WorldBuilder.LayerDocument})">
            <summary>
            Reload all unloaded layer documents.
            </summary>
            <param name="layer">The layer document to start with.</param>
            <param name="loadedLayers">List of reloaded layer documents.</param>
        </member>
        <member name="M:Emergent.Toolbench.WorldBuilder.BlockDocument.UnLoadLayers(System.Collections.Generic.List{Emergent.Toolbench.WorldBuilder.LayerDocument})">
            <summary>
            Unload a list of layer documents.
            </summary>
            <param name="loadedLayers">List of layer documents to unload.</param>
        </member>
        <member name="M:Emergent.Toolbench.WorldBuilder.BlockDocument.BeginIgnoringDirtyAllLayers(Emergent.Toolbench.WorldBuilder.LayerDocument)">
            <summary>
            Begins ignoring dirty changes for all layers.
            There must be a matching End for every Begin.
            </summary>
            <param name="layer">The layer document to start with.</param>
        </member>
        <member name="M:Emergent.Toolbench.WorldBuilder.BlockDocument.EndIgnoringDirtyAllLayers(Emergent.Toolbench.WorldBuilder.LayerDocument)">
            <summary>
            Ends ignoring dirty changes for all layers.
            There must be a matching End for every Begin.
            </summary>
            <param name="layer">The layer document to start with.</param>
        </member>
        <member name="T:Emergent.Toolbench.WorldBuilder.EntityRefAspect">
            <summary>
            The <see cref="T:Emergent.Toolbench.WorldBuilder.EntityRefAspect"/> is designed to keep a running tab on all active entity 
            references contained within a block file.  These entity references should generally be 
            kept up to date with the current state of the world, so this class attempts to track
            those changes as they happen and update other entities accordingly.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.WorldBuilder.EntityRefAspect.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:Emergent.Toolbench.WorldBuilder.EntityRefAspect"/> class.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.WorldBuilder.EntityRefAspect.CanConnectContent(Emergent.Toolbench.ContentService.AbstractContent)">
            <summary>
            Checks if the destination content matches the expected.
            </summary>
            <param name="content">The content to attach to.</param>
            <returns><c>true</c> if this aspect can be attached; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Emergent.Toolbench.WorldBuilder.EntityRefAspect.OnContentConnected">
            <summary>
            Called when the aspect connects to the content.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.WorldBuilder.EntityRefAspect.OnContentDisconnected">
            <summary>
            Called when the aspect is disconnecting from the content.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.WorldBuilder.EntityRefAspect.OnEntityAdded(System.Object,Emergent.Toolbench.WorldBuilder.EntitiesEventArgs)">
            <summary>
            Called when a new entity is added to the <see cref="T:Emergent.Toolbench.WorldBuilder.GlobalEntityAspect"/>.  This will
            scan the incoming entity adding it to the tables of the references it has and hooking 
            any events that need to be watched.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The event arguments.</param>
        </member>
        <member name="M:Emergent.Toolbench.WorldBuilder.EntityRefAspect.OnEntityRemoved(System.Object,Emergent.Toolbench.WorldBuilder.EntitiesEventArgs)">
            <summary>
            Called when an entity is removed from the <see cref="T:Emergent.Toolbench.WorldBuilder.GlobalEntityAspect"/>.  This will
            unscan the entity from the system, removing it from the tables of entities it 
            references, but only removing references to itself if <see cref="P:Emergent.Toolbench.WorldBuilder.EntityRefAspect.IsFixupSuspended"/> 
            is <c>false</c>.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The event arguments.</param>
        </member>
        <member name="M:Emergent.Toolbench.WorldBuilder.EntityRefAspect.OnPropertyChanging(System.Object,System.ComponentModel.PropertyChangingEventArgs)">
            <summary>
            Called when a class property of an entity is changing.  We watch this to unscan an
            entity when its model is about to change, as this could impact which properties the
            entity will support after the model has been changed and we don't want stale data to
            be kept around.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The event arguments.</param>
        </member>
        <member name="M:Emergent.Toolbench.WorldBuilder.EntityRefAspect.OnPropertyChanged(System.Object,System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            Called when a class property of an entity has changed.  When the model of an entity
            is finally swapped out, we want to rescan the entity into the system restoring 
            references it had that still exist after the change over to the new model type.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The event arguments.</param>
        </member>
        <member name="M:Emergent.Toolbench.WorldBuilder.EntityRefAspect.OnEntityPropertyChanging(System.Object,Emergent.Toolbench.WorldBuilder.EntityPropertyEventArgs)">
            <summary>
            Called when a model property is changing on an entity.  When a property is changing, we
            assume the worst and remove the reference or references (map or list of references)
            the property contains from the system.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The event arguments.</param>
        </member>
        <member name="M:Emergent.Toolbench.WorldBuilder.EntityRefAspect.OnEntityPropertyChanged(System.Object,Emergent.Toolbench.WorldBuilder.EntityPropertyEventArgs)">
            <summary>
            Called when a model property is changed on an entity.  When a property is changed, we
            check for references and add any new references we find to an entity id.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The event arguments.</param>
        </member>
        <member name="M:Emergent.Toolbench.WorldBuilder.EntityRefAspect.OnEntitiesLayerHierarchyChanged(System.Object,Emergent.Toolbench.WorldBuilder.EntitiesLayerHierarchyEventArgs)">
            <summary>
            Called when an entity's layer hierarchy changed. Updates the TargetContainerHierarchy
            property on each EntityRef that refers to the specified entities.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:Emergent.Toolbench.WorldBuilder.EntitiesEventArgs"/>
            instance containing the event data.</param>
        </member>
        <member name="M:Emergent.Toolbench.WorldBuilder.EntityRefAspect.UpdateEntityHierarchy(Emergent.Toolbench.WorldBuilder.Entity,Emergent.Toolbench.TypeService.Types.EntityRef.ContainerHierarchy)">
            <summary>
            Updates the TargetContainerHierarchy member of all EntityRefs that target the specified
            entity.
            </summary>
            <param name="entity">The updated entity.</param>
            <param name="newLayersHierarchy">A list of layer names, starting with the layer that
            contains the entity, and going up the hierarchy up to the Root layer. For example
            LayerAspect.GetLayerHierarchyNames() or
            EntitiesLayerHierarchyEventArgs.NewLayersHierarchy.</param>
        </member>
        <member name="M:Emergent.Toolbench.WorldBuilder.EntityRefAspect.ScanEntity(Emergent.Toolbench.WorldBuilder.Entity)">
            <summary>
            Scans the incoming entity, hooking the events we are interested in and checking for 
            existing references contained on the entity.
            </summary>
            <param name="entity">The entity to scan.</param>
        </member>
        <member name="M:Emergent.Toolbench.WorldBuilder.EntityRefAspect.UnscanEntity(Emergent.Toolbench.WorldBuilder.Entity)">
            <summary>
            Unscans the entity from known lists of refers for references the entity currently has.
            Also removing event hooks we no longer should be watching.
            </summary>
            <param name="entity">The entity to unscan.</param>
        </member>
        <member name="M:Emergent.Toolbench.WorldBuilder.EntityRefAspect.CheckReference(Emergent.Toolbench.WorldBuilder.Entity,Emergent.Toolbench.TypeService.Types.DataValue)">
            <summary>
            Takes in an entity and property value, then determines if the value is of an 
            <see cref="T:Emergent.Toolbench.TypeService.Types.EntityRef"/> or collection of them, and then adds the entity
            containing the <see cref="T:Emergent.Toolbench.TypeService.Types.EntityRef"/> to the list of refers.
            </summary>
            <param name="entity">The entity that contains the property.</param>
            <param name="value">The potential entity reference property value.</param>
        </member>
        <member name="M:Emergent.Toolbench.WorldBuilder.EntityRefAspect.CheckDereference(Emergent.Toolbench.WorldBuilder.Entity,Emergent.Toolbench.TypeService.Types.DataValue)">
            <summary>
            Takes in an entity and property value, then determines if the value is of an 
            <see cref="T:Emergent.Toolbench.TypeService.Types.EntityRef"/> or collection of them, then removes the entity from the 
            list of refers matching the entity reference.
            </summary>
            <param name="entity">The entity that contains the property.</param>
            <param name="value">The potential entity reference property value.</param>
        </member>
        <member name="M:Emergent.Toolbench.WorldBuilder.EntityRefAspect.Reference(Emergent.Toolbench.WorldBuilder.Entity,Emergent.Toolbench.TypeService.Types.EntityRef)">
            <summary>
            This code will add the entity to the list of refers for the corresponding 
            entity reference.
            </summary>
            <param name="entity">The entity to add as a refer.</param>
            <param name="entityRef">The reference the entity has.</param>
        </member>
        <member name="M:Emergent.Toolbench.WorldBuilder.EntityRefAspect.Dereference(Emergent.Toolbench.WorldBuilder.Entity,Emergent.Toolbench.TypeService.Types.EntityRef)">
            <summary>
            This code will remove the entity from the list of refers for the corresponding 
            entity reference.
            </summary>
            <param name="entity">The entity to remove as a refer.</param>
            <param name="entityRef">The reference the entity has.</param>
        </member>
        <member name="M:Emergent.Toolbench.WorldBuilder.EntityRefAspect.RemoveEntityReferences(System.Guid)">
            <summary>
            Removes all references to the given entity id.
            </summary>
            <param name="entityId">The entity id to remove references to.</param>
        </member>
        <member name="M:Emergent.Toolbench.WorldBuilder.EntityRefAspect.RaiseValueInvalidated(System.Guid)">
            <summary>
            Triggers the RaiseValueInvalidated event for EntityRefs that refer to
            the specified entity.
            </summary>
            <param name="entityId">The entity id to remove references to.</param>
        </member>
        <member name="M:Emergent.Toolbench.WorldBuilder.EntityRefAspect.ChangeEntityReferences(System.Guid,System.Guid,System.String,System.Collections.Generic.List{System.String})">
            <summary>
            Changes all entity references matching a specific entity id over to a new id and name.
            </summary>
            <param name="oldId">The old entity id.</param>
            <param name="newId">The new entity id.</param>
            <param name="newName">The new entity name.</param>
            <param name="newLayersHierarchy">A list of layer names, starting with the layer that
            contains the entity, and going up the hierarchy up to the Root layer. See
            LayerAspect.GetLayerHierarchyNames() for an easy way to get this list..</param>
        </member>
        <member name="P:Emergent.Toolbench.WorldBuilder.EntityRefAspect.IsFixupSuspended">
            <summary>
            Gets or sets a value indicating if fixups are currently suspended.
            </summary>
        </member>
    </members>
</doc>
