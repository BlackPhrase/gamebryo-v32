<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Emergent.Toolbench.UI</name>
    </assembly>
    <members>
        <member name="T:Emergent.Toolbench.UI.ViewState">
            <summary>
            The <see cref="T:Emergent.Toolbench.UI.ViewState"/> holds the state information for a given view.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.UI.ViewState.#ctor(System.String,System.Runtime.Serialization.IFormatter)">
            <summary>
            Initializes a new instance of <see cref="T:Emergent.Toolbench.UI.ViewState"/>.
            </summary>
            <param name="viewId">The viewid associated with this viewstate.</param>
            <param name="dataFormatter">The <see cref="T:System.Runtime.Serialization.IFormatter"/> to use to serialize 
            and deserialize the viewstate data.</param>
        </member>
        <member name="M:Emergent.Toolbench.UI.ViewState.GetState``1(System.String,``0)">
            <summary>
            Gets a state.
            </summary>
            <typeparam name="T">The type stored in the viewstate.</typeparam>
            <param name="stateId">The state key to lookup the state with.</param>
            <param name="defaultValue">The default value to return if for whatever reason 
            getting the view state failed.</param>
            <returns>The state information.</returns>
        </member>
        <member name="M:Emergent.Toolbench.UI.ViewState.GetState``1(System.String,``0@)">
            <summary>
            Gets a state.
            </summary>
            <typeparam name="T">The type stored in the viewstate.</typeparam>
            <param name="stateId">The state key to lookup the state with.</param>
            <param name="state">The state object to set to the value.</param>
            <returns><c>true</c> if getting the state was successful, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Emergent.Toolbench.UI.ViewState.SetState(System.String,System.Object)">
            <summary>
            Sets the state of something in the view.
            </summary>
            <param name="stateId">The state key to use to set the state.</param>
            <param name="state">The state object to save.</param>
        </member>
        <member name="M:Emergent.Toolbench.UI.ViewState.Save">
            <summary>
            Saves the view state data to an xml stream.
            </summary>
            <returns>The xml stream.</returns>
        </member>
        <member name="M:Emergent.Toolbench.UI.ViewState.Load(System.Xml.Linq.XElement)">
            <summary>
            Loads the viewstate from an xml element.
            </summary>
            <param name="xViewState">The viewstate xml element.</param>
        </member>
        <member name="P:Emergent.Toolbench.UI.ViewState.ViewId">
            <summary>
            Gets the viewid this viewstate is associated with.
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.UI.ViewState.Accessed">
            <summary>
            Gets or sets a value indicating if the viewstate has been accessed.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.UI.Plugin.HackSelectionHighlightColor">
            <summary>
            This will fix the default selection color so that it's not a dark blue that is hard to see with the dark
            background of Toolbench.  But this is a hack, they are fixing this in .Net 4.0 so that you can change it without
            this hack (@see http://blogs.msdn.com/llobo/archive/2009/10/27/new-wpf-features-caretbrush-selectionbrush.aspx )
            But for now, I need to hack it with a bit of reflection.
            </summary>
        </member>
        <member name="T:Emergent.Toolbench.UI.IViewModel">
            <summary>
            The <see cref="T:Emergent.Toolbench.UI.IViewModel"/> interface is the base class of view models.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.UI.IViewModel.Load(System.Windows.FrameworkElement)">
            <summary>
            Load should be called when the UI component the <see cref="T:Emergent.Toolbench.UI.IViewModel"/> has been
            data bound to has been loaded.  For this to work correctly, you should be using the
            <see cref="T:Emergent.Toolbench.UI.ViewModelBehavior"/> attachable behavior class.
            </summary>
            <param name="element">The element that is data-bound to this 
            <see cref="T:Emergent.Toolbench.UI.IViewModel"/>.</param>
        </member>
        <member name="M:Emergent.Toolbench.UI.IViewModel.Unload(System.Windows.FrameworkElement)">
            <summary>
            Unload should be called when the UI component the <see cref="T:Emergent.Toolbench.UI.IViewModel"/> has been
            data bound to has been unloaded.  For this to work correctly, you should be using the
            <see cref="T:Emergent.Toolbench.UI.ViewModelBehavior"/> attachable behavior class.
            </summary>
            <param name="element">The element that is data-bound to this 
            <see cref="T:Emergent.Toolbench.UI.IViewModel"/>.</param>
        </member>
        <member name="P:Emergent.Toolbench.UI.IViewModel.Initialized">
            <summary>
            Initialized will be set to true just before Load is called, and set to
            false just after Unload is called.  Don't ever set this manually, this should
            only be set by the attachable behavior <see cref="T:Emergent.Toolbench.UI.ViewModelBehavior"/> calling 
            Load and Unload.
            </summary>
        </member>
        <member name="T:Emergent.Toolbench.UI.Wizard">
            <summary>
            Interaction logic for Wizard.xaml
            </summary>
            <summary>
            Wizard
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.UI.Wizard.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Emergent.Toolbench.UI.WatermarkTextBox">
            <summary>
            The watermarked TextBox allows developers to provide users with useful information about 
            what data needs to be entered into the TextBox.  It displays a message to the user
            that is removed as soon as the TextBox receives focus.  The message reappears when focus 
            is lost if the TextBox is empty.  Or if the text is ever cleared regardless of focus.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.UI.WatermarkTextBox.AddWatermark">
            <summary>
            Adds the watermark if it is currently possible.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.UI.WatermarkTextBox.RemoveWatermark">
            <summary>
            Removes the watermark if there is one.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.UI.WatermarkTextBox.OnInitialized(System.EventArgs)">
            <summary>
            Called when the control is initialized.
            </summary>
            <param name="e">The event arguments.</param>
        </member>
        <member name="M:Emergent.Toolbench.UI.WatermarkTextBox.OnGotKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)">
            <summary>
            When the watermark textbox gets focus from the keyboard.
            </summary>
            <param name="e">The focus changed event arguments.</param>
        </member>
        <member name="M:Emergent.Toolbench.UI.WatermarkTextBox.OnLostKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)">
            <summary>
            When the watermark textbox gets lost from the keyboard.
            </summary>
            <param name="e">The focus changed event arguments.</param>
        </member>
        <member name="M:Emergent.Toolbench.UI.WatermarkTextBox.OnTextChanged(System.Windows.Controls.TextChangedEventArgs)">
            <summary>
            Called when the text changes.
            </summary>
            <param name="e">The event arguments.</param>
        </member>
        <member name="P:Emergent.Toolbench.UI.WatermarkTextBox.WatermarkText">
            <summary>
            Gets or sets the watermark text to display.  This is a dependency property.
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.UI.WatermarkTextBox.WatermarkForeground">
            <summary>
            Gets or sets the foreground brush used for the watermark.  This is a dependency property.
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.UI.WatermarkTextBox.WatermarkFontFamily">
            <summary>
            Gets or sets the font family used for the watermark.  This is a dependency property.
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.UI.WatermarkTextBox.WatermarkFontSize">
            <summary>
            Gets or sets the font size used for the watermark.  This is a dependency property.
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.UI.WatermarkTextBox.WatermarkFontStretch">
            <summary>
            Gets or sets the font stretch used for the watermark.  This is a dependency property.
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.UI.WatermarkTextBox.WatermarkFontStyle">
            <summary>
            Gets or sets the font style used for the watermark.  This is a dependency property.
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.UI.WatermarkTextBox.WatermarkFontWeight">
            <summary>
            Gets or sets the font weight used for the watermark.  This is a dependency property.
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.UI.WatermarkTextBox.IsWatermarkVisible">
            <summary>
            Gets a value indicating if the watermark is currently visible.  So when checking or 
            reading the text of a watermarked textbox you should first check if the watermark is
            visible before querying the text otherwise your result will be the currently displayed
            watermark text.
            </summary>
        </member>
        <member name="T:Emergent.Toolbench.UI.CollectionToVisibilityConverter">
            <summary>
            Provides conversion between collection and visibility. If the collection is not empty, the
            visibility is set to Visible, otherwise the visibility is set to Collapsed.
            </summary>
        </member>
        <member name="T:Emergent.Toolbench.UI.ViewStateAspect">
            <summary>
            The <see cref="T:Emergent.Toolbench.UI.ViewStateAspect"/> is used to track view states associated with content.
            since the same view is shared with multiple opened instances of content you may want to
            keep button states separate.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.UI.ViewStateAspect.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:Emergent.Toolbench.UI.ViewStateAspect"/>.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.UI.ViewStateAspect.GetViewState(System.String)">
            <summary>
            Gets the view state for a given view id.  The viewId is whatever you want it to be
            but it should be consistent, and should be unique.  Usually a good bet is to use
            the fully expressed type name for the view.
            </summary>
            <param name="viewId">The view id associated with the view state.</param>
            <returns>The view state.</returns>
        </member>
        <member name="M:Emergent.Toolbench.UI.ViewStateAspect.GetViewState(System.String,Emergent.Toolbench.UI.ViewState@)">
            <summary>
            Gets the view state for a given view id.  The viewId is whatever you want it to be
            but it should be consistent, and should be unique.  Usually a good bet is to use
            the fully expressed type name for the view.
            </summary>
            <param name="viewId">The view id associated with the view state</param>
            <param name="view">The view state.</param>
            <returns>Returns true if the view state was newly created with this resquest, false if its old</returns>
        </member>
        <member name="M:Emergent.Toolbench.UI.ViewStateAspect.OnContentConnected">
            <summary>
            Called when content is connected to the aspect.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.UI.ViewStateAspect.OnContentDisconnected">
            <summary>
            Called when content is disconnected from the aspect.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.UI.ViewStateAspect.Save">
            <summary>
            Used to save the <see cref="T:Emergent.Toolbench.UI.ViewStateAspect"/> to a separate ui.usersetting
            file.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.UI.ViewStateAspect.Load">
            <summary>
            Used to load the <see cref="T:Emergent.Toolbench.UI.ViewStateAspect"/> from a separate ui.usersetting
            file.
            </summary>
        </member>
        <member name="T:Emergent.Toolbench.UI.Util.WpfTreeHelper">
            <summary>
            This utility class facilitates the parsing of wpf trees.
            
            Example of use:
            
            foreach (Run curRun in WpfTreeHelper.GetChildren &lt;Run&gt;
            (flowDocumentReader.Document, true)) curRun.MouseDown +=
                new MouseButtonEventHandler(curRun_MouseDown);
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.UI.Util.WpfTreeHelper.FindChildInTemplate(System.String,System.Windows.Controls.Control)">
            <summary>
            Looks up the first object in the <see cref="P:System.Windows.Controls.Control.Template"/>
            of the control and returns this.
            </summary>
            <param name="name">The name of the object to look for.</param>
            <param name="control">The control to look in.</param>
            <returns></returns>
        </member>
        <member name="M:Emergent.Toolbench.UI.Util.WpfTreeHelper.FindInTree``1(System.Windows.DependencyObject)">
            <summary>
            Searches up the visual tree starting at the specified object untill it finds the first 
            object of the specified type or null.
            </summary>
            <param name="start">The object to start walking up the tree.</param>
            <typeparam name="T">The type to look for</typeparam>
        </member>
        <member name="M:Emergent.Toolbench.UI.Util.WpfTreeHelper.FindInLTree``1(System.Windows.DependencyObject)">
            <summary>
            Searches up the Logical tree starting at the specified object untill it finds an object
            of the specified type or null.
            </summary>
            <typeparam name="T">The type to look for.</typeparam>
            <param name="aStart">The object to start walking up the tree.</param>
            <returns>The result of the search</returns>
        </member>
        <member name="M:Emergent.Toolbench.UI.Util.WpfTreeHelper.FindInTreeAsDataContext``1(System.Windows.DependencyObject)">
            <summary>
            Searches up the visual tree starting at the specified point untill it finds an object 
            that has a dataContext of the specified type.
            </summary>
            <typeparam name="T">The data type to look for.</typeparam>
            <param name="aStart">The UI element to start looking at.</param>
            <returns>The DataContext object that was found.</returns>
        </member>
        <member name="M:Emergent.Toolbench.UI.Util.WpfTreeHelper.FindPanelFor(System.Windows.Controls.ItemsControl)">
            <summary>
            Looks up the Panel used by the ItemsControl
            </summary>
            <remarks>
            This function searches all the children of the 
            </remarks>
            <param name="list"></param>
            <returns></returns>
        </member>
        <member name="M:Emergent.Toolbench.UI.Util.WpfTreeHelper.FindPanelForInternal(System.Windows.DependencyObject)">
            <summary>
            Recursive part of <see cref="M:Emergent.Toolbench.UI.Util.WpfTreeHelper.FindPanelFor(System.Windows.Controls.ItemsControl)"/>.
            </summary>
            <param name="item">The item who's children to walk through in search of the first panel
            that is an ItemsHost.</param>
            <returns></returns>
        </member>
        <member name="M:Emergent.Toolbench.UI.Util.WpfTreeHelper.GetChildren(System.Windows.DependencyObject,System.Boolean)">
            <summary>
            Parses the hierarchy to find the children of a given object.
            </summary>
            <param name="obj">The object we want the children for</param>
            <param name="allChildrenInHierarchy">Return the first child or all the children</param>
            <returns>Returns a list containing the first child or all the children </returns>
        </member>
        <member name="M:Emergent.Toolbench.UI.Util.WpfTreeHelper.GetChildren``1(System.Windows.DependencyObject,System.Boolean)">
            <summary>
            Parses the hierarchy to find the children of a given object.
            Returns the first child found that is of type T
            </summary>
            <typeparam name="T">The type we are looking for</typeparam>
            <param name="obj">The object we want the children for</param>
            <param name="allChildrenInHierarchy">Parse the first child or all the children</param>
            <returns>The first child of Type T</returns>
        </member>
        <member name="T:Emergent.Toolbench.UI.Generic">
            <summary>
            Generic
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.UI.Generic.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Emergent.Toolbench.UI.Controls.PersistantTabControl">
            <summary>
            
            </summary>
            <remarks>
            http://eric.burke.name/dotnetmania/2009/04/26/22.09.28
            </remarks>
        </member>
        <member name="M:Emergent.Toolbench.UI.Controls.PersistantTabControl.ItemContainerGenerator_StatusChanged(System.Object,System.EventArgs)">
            <summary>
            if containers are done, generate the selected item
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Emergent.Toolbench.UI.Controls.PersistantTabControl.OnApplyTemplate">
            <summary>
            get the ItemsHolder and generate any children
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.UI.Controls.PersistantTabControl.OnItemsChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            when the items change we remove any generated panel children and add any new ones as necessary
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Emergent.Toolbench.UI.Controls.PersistantTabControl.OnSelectionChanged(System.Windows.Controls.SelectionChangedEventArgs)">
            <summary>
            update the visible child in the ItemsHolder
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Emergent.Toolbench.UI.Controls.PersistantTabControl.UpdateSelectedItem">
            <summary>
            generate a ContentPresenter for the selected item
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.UI.Controls.PersistantTabControl.CreateChildContentPresenter(System.Object)">
            <summary>
            create the child ContentPresenter for the given item (could be data or a TabItem)
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:Emergent.Toolbench.UI.Controls.PersistantTabControl.FindChildContentPresenter(System.Object)">
            <summary>
            Find the CP for the given object.  data could be a TabItem or a piece of data
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:Emergent.Toolbench.UI.Controls.PersistantTabControl.GetSelectedTabItem">
            <summary>
            copied from TabControl; wish it were protected in that class instead of private
            </summary>
            <returns></returns>
        </member>
        <member name="T:Emergent.Toolbench.UI.BreadcrumbBar.BreadcrumbButton">
            <summary>
            A breadcrumb button is part of a BreadcrumbItem and contains  a header and a dropdown button.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.UI.BreadcrumbBar.BreadcrumbButton.RemoveSelectedItem(System.Object)">
            <summary>
            When a BreadcrumbItem is selected from a dropdown menu, the SelectedItem of the new selected item must be set to null.
            Since no event is raised when a DependencyProperty is assigned to it's current value, this cannot be recognized at this place,
            therefore the SelectedItem DependencyProperty must previously set to null before setting it to it's new value to raise event
            when SelectedItem is changed:
            </summary>
            <param name="dataItem"></param>
        </member>
        <member name="M:Emergent.Toolbench.UI.BreadcrumbBar.BreadcrumbButton.OnMouseEnter(System.Windows.Input.MouseEventArgs)">
            <summary>
            Focus this BreadcrumbButton if the focus is currently within the BreadcrumbBar where this BreadcrumbButton is embedded:
            </summary>
        </member>
        <member name="F:Emergent.Toolbench.UI.BreadcrumbBar.BreadcrumbButton.IsPressedProperty">
            <summary>
            Gets or sets whether the button is pressed.
            </summary>
        </member>
        <member name="F:Emergent.Toolbench.UI.BreadcrumbBar.BreadcrumbButton.IsDropDownPressedProperty">
            <summary>
            Gets or sets whether the drop down button is pressed.
            </summary>
        </member>
        <member name="F:Emergent.Toolbench.UI.BreadcrumbBar.BreadcrumbButton.IsDropDownVisibleProperty">
            <summary>
            Gets or sets whether the drop down button is visible.
            </summary>
        </member>
        <member name="F:Emergent.Toolbench.UI.BreadcrumbBar.BreadcrumbButton.IsButtonVisibleProperty">
            <summary>
            Gets or sets whether the button is visible.
            </summary>
        </member>
        <member name="F:Emergent.Toolbench.UI.BreadcrumbBar.BreadcrumbButton.IsImageVisibleProperty">
            <summary>
            Gets or sets whether the Image is visible
            </summary>
        </member>
        <member name="F:Emergent.Toolbench.UI.BreadcrumbBar.BreadcrumbButton.EnableVisualButtonStyleProperty">
            <summary>
            Gets or sets whether to use visual background style on MouseOver and/or MouseDown.
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.UI.BreadcrumbBar.BreadcrumbButton.Image">
            <summary>
            Gets or sets the Image of the BreadcrumbButton.
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.UI.BreadcrumbBar.BreadcrumbButton.SelectedItem">
            <summary>
            Gets or sets the selectedItem.
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.UI.BreadcrumbBar.BreadcrumbButton.Mode">
            <summary>
            Gets or sets the ButtonMode for the BreadcrumbButton.
            </summary>
        </member>
        <member name="E:Emergent.Toolbench.UI.BreadcrumbBar.BreadcrumbButton.Click">
            <summary>
            Occurs when the Button is clicked.
            </summary>
        </member>
        <member name="E:Emergent.Toolbench.UI.BreadcrumbBar.BreadcrumbButton.Select">
            <summary>
            Occurs when the SelectedItem is changed.
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.UI.BreadcrumbBar.BreadcrumbButton.IsPressed">
            <summary>
            Gets or sets whether the button is pressed.
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.UI.BreadcrumbBar.BreadcrumbButton.IsDropDownPressed">
            <summary>
            Gets or sets whether the drop down button is pressed.
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.UI.BreadcrumbBar.BreadcrumbButton.DropDownContentTemplate">
            <summary>
            Gets or sets the DataTemplate for the drop down items.
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.UI.BreadcrumbBar.BreadcrumbButton.IsDropDownVisible">
            <summary>
            Gets or sets whether the drop down button is visible.
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.UI.BreadcrumbBar.BreadcrumbButton.IsButtonVisible">
            <summary>
            Gets or sets whether the button is visible.
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.UI.BreadcrumbBar.BreadcrumbButton.IsImageVisible">
            <summary>
            Gets or sets whether the Image is visible
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.UI.BreadcrumbBar.BreadcrumbButton.EnableVisualButtonStyle">
            <summary>
            Gets or sets whether to use visual background style on MouseOver and/or MouseDown.
            </summary>
        </member>
        <member name="T:Emergent.Toolbench.UI.BreadcrumbBar.BreadcrumbButton.ButtonMode">
            <summary>
            Specifies how to display the BreadcrumbButton.
            </summary>
        </member>
        <member name="F:Emergent.Toolbench.UI.BreadcrumbBar.BreadcrumbButton.ButtonMode.Breadcrumb">
            <summary>
            Display as Breadcrumb.
            </summary>
        </member>
        <member name="F:Emergent.Toolbench.UI.BreadcrumbBar.BreadcrumbButton.ButtonMode.Overflow">
            <summary>
            Display as overflow.
            </summary>
        </member>
        <member name="F:Emergent.Toolbench.UI.BreadcrumbBar.BreadcrumbButton.ButtonMode.DropDown">
            <summary>
            Display as drop down.
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.UI.BreadcrumbBar.ApplyPropertiesEventArgs.Breadcrumb">
            <summary>
            The breadcrumb for which to apply the properites.
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.UI.BreadcrumbBar.ApplyPropertiesEventArgs.Item">
            <summary>
            The data item of the breadcrumb.
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.UI.BreadcrumbBar.ApplyPropertiesEventArgs.Trace">
            <summary>
            The trace that is used to show the title of a breadcrumb.
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.UI.BreadcrumbBar.ApplyPropertiesEventArgs.TraceValue">
            <summary>
            The trace that is used to build the path.
            This can be used to remove the trace of the root item in the path, if necassary.
            </summary>
        </member>
        <member name="T:Emergent.Toolbench.UI.CharacterInOrderFilter">
            <summary>
            The <see cref="T:Emergent.Toolbench.UI.CharacterInOrderFilter"/> is designed to find the filter characters
            in order, but they are not necessarily contiguous.  If a series of characters are
            separated by a space they be tested separately as an AND operation such that the 
            content must pass both character filters separately.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.UI.CharacterInOrderFilter.IsMatch(System.String,System.String)">
            <summary>
            Checks if the content matches the provided filter.
            </summary>
            <param name="filter">The filter of characters to use.</param>
            <param name="content">The content to test against the filter.</param>
            <returns><c>true</c> if the content passes the filter; otherwise <c>false</c>.</returns>
        </member>
        <member name="T:Emergent.Toolbench.UI.DragDetector">
            <summary>
            The drag detector is used to know if the user is moving the mouse.
            It can't use the WPF functions because it's blocking the UI thread.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.UI.DragDetector.IsDragging">
            <summary>
            Determines whether the mouse is dragging right now using the Win32 API.
            </summary>
            <returns><c>true</c> if the mouse is dragging; otherwise, <c>false</c>.</returns>
        </member>
        <member name="T:Emergent.Toolbench.UI.DragDropHelper">
            <summary>
            Helper class for supporting drag and drop operations.
            </summary>
        </member>
        <member name="F:Emergent.Toolbench.UI.DragDropHelper.IsDragSourceProperty">
            <summary>
            The IsDragSource indicates if the object can start a drag or not
            </summary>
        </member>
        <member name="F:Emergent.Toolbench.UI.DragDropHelper.DropCommandProperty">
            <summary>
            The Drop Command attached property defined the ICommand associated with the drop
            operation when the drop occurs.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Emergent.Toolbench.UI.DragDropHelper.IsDropDataAllowed(System.Object,System.Windows.DragEventArgs)" -->
        <member name="T:Emergent.Toolbench.UI.BreadcrumbBar.BreadcrumbItem">
            <summary>
            A breadcrumb item that is part of a BreadcrumbBar and contains a BreadcrumbButton and nested child BreadcrumbItems.
            </summary>
        </member>
        <member name="F:Emergent.Toolbench.UI.BreadcrumbBar.BreadcrumbItem.IsDropDownPressedProperty">
            <summary>
            Gets or sets whether the dropdown button is pressed.
            </summary>
        </member>
        <member name="F:Emergent.Toolbench.UI.BreadcrumbBar.BreadcrumbItem.IsOverflowProperty">
            <summary>
            Gets or sets whether the BreadcrumbItem is in overflow mode, which means that the header property is not visible.
            </summary>
        </member>
        <member name="F:Emergent.Toolbench.UI.BreadcrumbBar.BreadcrumbItem.IsRootProperty">
            <summary>
            Gets or sets whether this BreadcrumbItem is the Root of a BreadcrumbBar.
            </summary>
        </member>
        <member name="F:Emergent.Toolbench.UI.BreadcrumbBar.BreadcrumbItem.OverflowItemTemplateSelectorProperty">
            <summary>
            Gets or sets the TemplateSelector of an Item.
            </summary>
        </member>
        <member name="F:Emergent.Toolbench.UI.BreadcrumbBar.BreadcrumbItem.ImageProperty">
            <summary>
            Gets or sets the ImageSource.
            </summary>
        </member>
        <member name="F:Emergent.Toolbench.UI.BreadcrumbBar.BreadcrumbItem.TraceProperty">
            <summary>
            Gets or sets the Trace string to build the Path.
            </summary>
        </member>
        <member name="F:Emergent.Toolbench.UI.BreadcrumbBar.BreadcrumbItem.HeaderProperty">
            <summary>
            Gets or sets the Header.
            </summary>
        </member>
        <member name="F:Emergent.Toolbench.UI.BreadcrumbBar.BreadcrumbItem.DropDownPressedChangedEvent">
            <summary>
            Occurs when the IsDropDownPressed property is changed.
            </summary>
        </member>
        <member name="F:Emergent.Toolbench.UI.BreadcrumbBar.BreadcrumbItem.TraceChangedEvent">
            <summary>
            Occurs when the Trace property is changed.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.UI.BreadcrumbBar.BreadcrumbItem.#ctor">
            <summary>
            Creates a new instance of BreadcrumbItem.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.UI.BreadcrumbBar.BreadcrumbItem.CreateItem(System.Object)">
            <summary>
            Creates a new BreadcrumbItem out of the specified data.
            </summary>
            <param name="dataContext">The DataContext for the BreadcrumbItem</param>
            <returns>DataContext if dataContext is a Breadcrumbitem, otherwhise a new BreadcrumbItem.</returns>
        </member>
        <member name="M:Emergent.Toolbench.UI.BreadcrumbBar.BreadcrumbItem.OnSelectedBreadcrumbChanged(System.Object,System.Object)">
            <summary>
            Occurs when the selected BreadcrumbItem is changed.
            </summary>
            <param name="oldItem"></param>
            <param name="newItem"></param>
        </member>
        <member name="M:Emergent.Toolbench.UI.BreadcrumbBar.BreadcrumbItem.DropDownPressedPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Occurs when the IsDropDownPressed property is changed.
            </summary>
            <param name="d"></param>
            <param name="e"></param>
        </member>
        <member name="M:Emergent.Toolbench.UI.BreadcrumbBar.BreadcrumbItem.OnDropDownPressedChanged">
            <summary>
            Occurs when the DropDown button is pressed or released.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.UI.BreadcrumbBar.BreadcrumbItem.OverflowPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Occurs when the Overflow property is changed.
            </summary>
            <param name="d"></param>
            <param name="e"></param>
        </member>
        <member name="F:Emergent.Toolbench.UI.BreadcrumbBar.BreadcrumbItem.OverflowChangedEvent">
            <summary>
            Occurs when the Overflow property is changed.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.UI.BreadcrumbBar.BreadcrumbItem.OnOverflowChanged(System.Boolean)">
            <summary>
            Occurs when the Overflow property is changed.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.UI.BreadcrumbBar.BreadcrumbItem.MeasureOverride(System.Windows.Size)">
            <summary>
            Perform a special measurement that checks whether to collapse the header.
            </summary>
            <param name="constraint"></param>
            <returns></returns>
        </member>
        <member name="M:Emergent.Toolbench.UI.BreadcrumbBar.BreadcrumbItem.ContainerFromItem(System.Object)">
            <summary>
            Generates a new BreadcrumbItem out of the specified item.
            </summary>
            <param name="item">The item for which to create a new BreadcrumbItem.</param>
            <returns>Item, if item is a BreadcrumbItem, otherwhise a newly created BreadcrumbItem.</returns>
        </member>
        <member name="M:Emergent.Toolbench.UI.BreadcrumbBar.BreadcrumbItem.ApplyBinding">
            <summary>
             Appies the binding to the breadcrumb item.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.UI.BreadcrumbBar.BreadcrumbItem.GetTracePathValue">
            <summary>
            Gets the string trace that is used to build the path.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Emergent.Toolbench.UI.BreadcrumbBar.BreadcrumbItem.GetTraceItem(System.String)">
            <summary>
            Gets the item that represents the specified trace otherwise null.
            </summary>
            <param name="trace">The Trace property of the associated BreadcrumbItem.</param>
            <returns>An object included in Items, otherwise null.</returns>
        </member>
        <member name="F:Emergent.Toolbench.UI.BreadcrumbBar.BreadcrumbItem.IsImageVisibleProperty">
            <summary>
            Gets or sets whether the Image is visible.
            </summary>
        </member>
        <member name="E:Emergent.Toolbench.UI.BreadcrumbBar.BreadcrumbItem.DropDownPressedChanged">
            <summary>
            Occurs when the IsDropDownPressed property is changed.
            </summary>
        </member>
        <member name="E:Emergent.Toolbench.UI.BreadcrumbBar.BreadcrumbItem.TraceChanged">
            <summary>
            Occurs when the Trace property is changed.
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.UI.BreadcrumbBar.BreadcrumbItem.IsDropDownPressed">
            <summary>
            Gets or sets wheter the dropdown button is pressed.
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.UI.BreadcrumbBar.BreadcrumbItem.IsOverflow">
            <summary>
            Gets whether the breadcrumb item is overflowed which means it is not visible in the breadcrumb bar but in the
            drop down menu of the breadcrumb bar.
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.UI.BreadcrumbBar.BreadcrumbItem.IsRoot">
            <summary>
            Set to true, to collapse the item if SelectedItem is not null. otherwise false.
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.UI.BreadcrumbBar.BreadcrumbItem.SelectedBreadcrumb">
            <summary>
            Gets the selected BreadcrumbItem.
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.UI.BreadcrumbBar.BreadcrumbItem.Image">
            <summary>
            Gets or sets the image that is used to display this item.
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.UI.BreadcrumbBar.BreadcrumbItem.Trace">
            <summary>
            Gets or sets the Trace of the breadcrumb
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.UI.BreadcrumbBar.BreadcrumbItem.TraceBinding">
            <summary>
            Gets or sets the Binding to the Trace property. This is not a dependency property.
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.UI.BreadcrumbBar.BreadcrumbItem.ImageBinding">
            <summary>
            Gets or sets the Binding to the Image property.  This is not a dependency property.
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.UI.BreadcrumbBar.BreadcrumbItem.Header">
            <summary>
            Gets or sets the header for the breadcrumb item.
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.UI.BreadcrumbBar.BreadcrumbItem.HeaderTemplate">
            <summary>
            Gets or sets the header template.
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.UI.BreadcrumbBar.BreadcrumbItem.HeaderTemplateSelector">
            <summary>
            Gets or sets the header template selector.
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.UI.BreadcrumbBar.BreadcrumbItem.BreadcrumbBar">
            <summary>
            Gets the parent BreadcrumbBar container.
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.UI.BreadcrumbBar.BreadcrumbItem.ParentBreadcrumbItem">
            <summary>
            Gets the parent BreadcrumbItem, otherwise null.
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.UI.BreadcrumbBar.BreadcrumbItem.TraceValue">
            <summary>
            Gets the Trace string from the Trace property.
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.UI.BreadcrumbBar.BreadcrumbItem.IsButtonVisible">
            <summary>
            Gets or sets whether the button is visible.
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.UI.BreadcrumbBar.BreadcrumbItem.IsImageVisible">
            <summary>
            Gets or sets whether the Image is visible.
            </summary>
        </member>
        <member name="T:Emergent.Toolbench.UI.AutoSelectBehavior">
            <summary>
            Use this class to auto select the text in a TextBox when it gets the keyboard focus.
            Set the IsEnabled attached dependency property to true.
            </summary>
        </member>
        <member name="F:Emergent.Toolbench.UI.AutoSelectBehavior.OnFocusProperty">
            <summary>
            The OnFocus dependency property.
            </summary>
        </member>
        <member name="F:Emergent.Toolbench.UI.AutoSelectBehavior.OnReturnProperty">
            <summary>
            The OnReturn dependency property.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.UI.AutoSelectBehavior.GetOnFocus(System.Windows.DependencyObject)">
            <summary>
            Gets the state of the OnFocus property on an object.
            </summary>
            <param name="obj">The object of interest.</param>
            <returns>State of the OnFocus property.</returns>
        </member>
        <member name="M:Emergent.Toolbench.UI.AutoSelectBehavior.SetOnFocus(System.Windows.DependencyObject,System.Boolean)">
            <summary>
            Sets the OnFocus property on an object.
            </summary>
            <param name="obj">The object of interest.</param>
            <param name="value">The new value for the OnFocus property..</param>
        </member>
        <member name="M:Emergent.Toolbench.UI.AutoSelectBehavior.GetOnReturn(System.Windows.DependencyObject)">
            <summary>
            Gets the state of the OnReturn property on an object.
            </summary>
            <param name="obj">The object of interest.</param>
            <returns>State of the OnReturn property.</returns>
        </member>
        <member name="M:Emergent.Toolbench.UI.AutoSelectBehavior.SetOnReturn(System.Windows.DependencyObject,System.Boolean)">
            <summary>
            Sets the OnReturn property on an object.
            </summary>
            <param name="obj">The object of interest.</param>
            <param name="value">The new value for the OnReturn property..</param>
        </member>
        <member name="T:Emergent.Toolbench.UI.FormattedSlider">
            <summary>
            A custom slider control which also provides a way to modify the auto-tooltip text using a 
            custom format string property.
            </summary>
            <remarks>Code borrowed from the following blog:
                http://joshsmithonwpf.wordpress.com/2007/09/14/modifying-the-auto-tooltip-of-a-slider/
            </remarks>
        </member>
        <member name="M:Emergent.Toolbench.UI.FormattedSlider.OnThumbDragStarted(System.Windows.Controls.Primitives.DragStartedEventArgs)">
            <summary>
            Called when the user starts dragging the slider thumb. This method will apply the 
            string format text to the slider's value.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Emergent.Toolbench.UI.FormattedSlider.OnThumbDragDelta(System.Windows.Controls.Primitives.DragDeltaEventArgs)">
            <summary>
            Called as the user drags the slider thumb. This method updates the custom auto tooltip
            text.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Emergent.Toolbench.UI.FormattedSlider.FormatAutoToolTipContent">
            <summary>
            Applies the string format property to the auto tool tip text.
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.UI.FormattedSlider.AutoToolTipFormat">
            <summary>
            Gets or sets the format of the auto tooltip text. The format string is the standard 
            .NET string format string.
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.UI.FormattedSlider.AutoToolTip">
            <summary>
            Looks up the auto tool tip object via reflection and caches a reference to it.
            </summary>
        </member>
        <member name="T:Emergent.Toolbench.UI.BreadcrumbBar.PathConversionEventArgs">
            <summary>
            RoutedEventArgs to convert the display path to edit path and vice verca.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.UI.BreadcrumbBar.PathConversionEventArgs.#ctor(Emergent.Toolbench.UI.BreadcrumbBar.PathConversionEventArgs.ConversionMode,System.String,System.Object,System.Windows.RoutedEvent)">
            <summary>
            Creates a new PathConversionEventArgs class.
            </summary>
            <param name="mode">The conversion mode.</param>
            <param name="path">The initial values for DisplayPath and EditPath.</param>
            <param name="root">The root object.</param>
            <param name="routedEvent"></param>
        </member>
        <member name="P:Emergent.Toolbench.UI.BreadcrumbBar.PathConversionEventArgs.DisplayPath">
            <summary>
            Gets or sets the display path.
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.UI.BreadcrumbBar.PathConversionEventArgs.EditPath">
            <summary>
            Gets or sets the edit path.
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.UI.BreadcrumbBar.PathConversionEventArgs.Mode">
            <summary>
            Specifies what path property to convert.
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.UI.BreadcrumbBar.PathConversionEventArgs.Root">
            <summary>
            Gets the root object of the breadcrumb bar.
            </summary>
        </member>
        <member name="T:Emergent.Toolbench.UI.BreadcrumbBar.PathConversionEventArgs.ConversionMode">
            <summary>
            Specifies what property to convert.
            </summary>
        </member>
        <member name="F:Emergent.Toolbench.UI.BreadcrumbBar.PathConversionEventArgs.ConversionMode.DisplayToEdit">
            <summary>
            Convert the display path to edit path.
            </summary>
        </member>
        <member name="F:Emergent.Toolbench.UI.BreadcrumbBar.PathConversionEventArgs.ConversionMode.EditToDisplay">
            <summary>
            convert the edit path to display path.
            </summary>
        </member>
        <member name="T:Emergent.Toolbench.UI.IWizardPage">
            <summary>
            Each page in a Wizard must implement this interface. It provides basic navigation
            information for the containing dialog.
            </summary>
            <remarks>
            Implement <seealso cref="T:System.ComponentModel.INotifyPropertyChanged"/> if CanAdvance changes dynamically.
            </remarks>
        </member>
        <member name="M:Emergent.Toolbench.UI.IWizardPage.OnArrive(Emergent.Toolbench.UI.WizardContentEventArgs)">
            <summary>
            Called when the users arrives on the page.
            </summary>
            <param name="e">The arrival event arguments</param>
        </member>
        <member name="M:Emergent.Toolbench.UI.IWizardPage.OnNext(System.EventArgs)">
            <summary>
            Called when the user clicks next on the page.
            </summary>
            <param name="e">The event arguments</param>
        </member>
        <member name="M:Emergent.Toolbench.UI.IWizardPage.OnBack(System.EventArgs)">
            <summary>
            Called when the user clicks back on the page.
            </summary>
            <param name="e">The event arguments</param>
        </member>
        <member name="M:Emergent.Toolbench.UI.IWizardPage.OnFinish(System.EventArgs)">
            <summary>
            Called when the user clicks finished on the page.  This will be called on every page.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Emergent.Toolbench.UI.IWizardPage.OnCancel(System.EventArgs)">
            <summary>
            Called by the containing wizard if the user clicks Cancel. Every page will be notified
            that the user has canceled the operation.
            </summary>
            <param name="e">The event arguments</param>
        </member>
        <member name="P:Emergent.Toolbench.UI.IWizardPage.Title">
            <summary>
            Gets the Title text for this page, typically shown in boldface.
            </summary>
            <remarks>
            If NULL is returned for this value, no heading area is shown for the page.
            This is typically used for "full-screen" welcome and error pages.
            </remarks>
        </member>
        <member name="P:Emergent.Toolbench.UI.IWizardPage.Subtitle">
            <summary>
            Gets a value indicating if the subtitle text for this page. If none is desired, return 
            an empty string.
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.UI.IWizardPage.CanAdvance">
            <summary>
            Gets a value indicating if the Next/Finish buttons are permitted right now.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.UI.AutoComplete.RefreshAutoCompleteList">
            <summary>
            Refreshes the auto complete contents of the drop down.
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.UI.AutoComplete.AutoCompleteSource">
            <summary>
            This is a dependency property.
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.UI.AutoComplete.CurrentFragment">
            <summary>
            Gets the current fragments text.
            </summary>
            <returns>The current fragment.</returns>
        </member>
        <member name="T:Emergent.Toolbench.UI.UIUtility">
            <summary>
            
            </summary>
            <remarks>
            External Code
            
            The original utility class came from
            http://www.codeproject.com/KB/WPF/TreeView_SelectionWPF.aspx
            </remarks>
        </member>
        <member name="M:Emergent.Toolbench.UI.UIUtility.SetSelectedItem``1(System.Windows.Controls.ItemsControl,Emergent.Toolbench.UI.SetSelectedInfo{``0})">
            <summary>
            Selects an item in a hierarchical ItemsControl using a set of options
            </summary>
            <typeparam name="T">The type of the items present in the control and in the options</typeparam>
            <param name="control">The ItemsControl to select an item in</param>
            <param name="info">The options used for the selection process</param>
        </member>
        <member name="T:Emergent.Toolbench.UI.SetSelectedInfo`1">
            <summary>
            
            </summary>
            <remarks>
            This utility class came from
            http://www.codeproject.com/KB/WPF/TreeView_SelectionWPF.aspx
            </remarks>
        </member>
        <member name="P:Emergent.Toolbench.UI.SetSelectedInfo`1.Items">
            <summary>
            Gets or sets the chain of items to search for. The last item in the chain will be selected.
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.UI.SetSelectedInfo`1.CompareMethod">
            <summary>
            Gets or sets the method used to compare items in the control with items in the chain
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.UI.SetSelectedInfo`1.ConvertMethod">
            <summary>
            Gets or sets the method used to convert items in the control to be compare with items in the chain
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.UI.SetSelectedInfo`1.OnSelected">
            <summary>
            Gets or sets the method used to select the final item in the chain
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.UI.SetSelectedInfo`1.OnNeedMoreItems">
            <summary>
            Gets or sets the method used to request more child items to be generated in the control
            </summary>
        </member>
        <member name="T:Emergent.Toolbench.UI.EnumBooleanConverter">
            <summary>
            The <see cref="T:Emergent.Toolbench.UI.EnumBooleanConverter"/> is used to convert an enum value to a boolean.
            By passing in the enum value that is expected as the parameter in the binding expression
            a boolean value is returned.
            </summary>
            <remarks>
            External Code (Original Version)
            http://blog.larshildebrandt.de/binding-eines-enums-an-mehrere-radiobuttons/14.html
            </remarks>
        </member>
        <member name="M:Emergent.Toolbench.UI.EnumBooleanConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts the enum value to a boolean.
            </summary>
            <param name="value">The enum value.</param>
            <param name="targetType">The target type.</param>
            <param name="parameter">The enum value that was expected.</param>
            <param name="culture">The current culture.</param>
            <returns><c>true</c> if the value matches the parameter.</returns>
        </member>
        <member name="M:Emergent.Toolbench.UI.EnumBooleanConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts the boolean back into the parameter.  Because this should only be invoked when
            we're attempting to set the enum value, we just take the parameter convert it to the enum
            and return that.
            </summary>
            <param name="value">The current value.</param>
            <param name="targetType">The target type.</param>
            <param name="parameter">The parameter.</param>
            <param name="culture">The current culture.</param>
            <returns>The parameter converted into the enum type.</returns>
        </member>
        <member name="T:Emergent.Toolbench.UI.Controls.Spinner">
            <summary>
            Interaction logic for Spinner.xaml
            </summary>
            <summary>
            Spinner
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.UI.Controls.Spinner.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Emergent.Toolbench.UI.TreeViewEx">
            <summary>
            
            </summary>
            <remarks>
            External Code
            
            This utility class has been modified, but originally came from
            http://www.codeproject.com/KB/WPF/TreeView_SelectionWPF.aspx
            </remarks>
        </member>
        <member name="M:Emergent.Toolbench.UI.TreeViewEx.SetSelectedItem(System.Windows.Controls.TreeView,System.String)">
            <summary>
            Selects an item in a TreeView using a path
            </summary>
            <param name="treeView">The TreeView to select an item in</param>
            <param name="path">The path to the selected item.
            Components of the path are separated with Path.DirectorySeparatorChar.
            Items in the control are converted by calling the ToString method.</param>
        </member>
        <member name="M:Emergent.Toolbench.UI.TreeViewEx.SetSelectedItem(System.Windows.Controls.TreeView,System.String,System.Func{System.Object,System.String})">
            <summary>
            Selects an item in a TreeView using a path and a custom conversion method
            </summary>
            <param name="treeView">The TreeView to select an item in</param>
            <param name="path">The path to the selected item.
            Components of the path are separated with Path.DirectorySeparatorChar.</param>
            <param name="convertMethod">A custom method that converts items in the control to their respective path component</param>
        </member>
        <member name="M:Emergent.Toolbench.UI.TreeViewEx.SetSelectedItem(System.Windows.Controls.TreeView,System.String,System.Char)">
            <summary>
            Selects an item in a TreeView using a path and a custom path separator character.
            </summary>
            <param name="treeView">The TreeView to select an item in</param>
            <param name="path">The path to the selected item</param>
            <param name="separatorChar">The character that separates path components</param>
        </member>
        <member name="M:Emergent.Toolbench.UI.TreeViewEx.SetSelectedItem(System.Windows.Controls.TreeView,System.String,System.Func{System.Object,System.String},System.Char)">
            <summary>
            Selects an item in a TreeView using a path, a custom conversion method,
            and a custom path separator character.
            </summary>
            <param name="treeView">The TreeView to select an item in</param>
            <param name="path">The path to the selected item</param>
            <param name="convertMethod">A custom method that converts items in the control to their respective path component</param>
            <param name="separatorChar">The character that separates path components</param>
        </member>
        <member name="M:Emergent.Toolbench.UI.TreeViewEx.SetSelectedItem``1(System.Windows.Controls.TreeView,System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Selects an item in a TreeView using a custom item chain
            </summary>
            <typeparam name="T">The type of the items present in the control and the chain</typeparam>
            <param name="treeView">The TreeView to select an item in</param>
            <param name="items">The chain of items to walk. The last item in the chain will be selected</param>
        </member>
        <member name="M:Emergent.Toolbench.UI.TreeViewEx.SetSelectedItem``1(System.Windows.Controls.TreeView,System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0,System.Boolean})">
            <summary>
            Selects an item in a TreeView using a custom item chain and item comparison method
            </summary>
            <typeparam name="T">The type of the items present in the control and the chain</typeparam>
            <param name="treeView">The TreeView to select an item in</param>
            <param name="items">The chain of items to walk. The last item in the chain will be selected</param>
            <param name="compareMethod">The method used to compare items in the control with items in the chain</param>
        </member>
        <member name="M:Emergent.Toolbench.UI.TreeViewEx.SetSelectedItem``1(System.Windows.Controls.TreeView,System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0,System.Boolean},System.Func{System.Object,``0})">
            <summary>
            Selects an item in a TreeView using a custom item chain, an item comparison method,
            and an item conversion method.
            </summary>
            <typeparam name="T">The type of the items present in the control and the chain</typeparam>
            <param name="treeView">The TreeView to select an item in</param>
            <param name="items">The chain of items to walk. The last item in the chain will be selected</param>
            <param name="compareMethod">The method used to compare items in the control with items in the chain</param>
            <param name="convertMethod">The method used to convert items in the control to be compared with items in the chain</param>
        </member>
        <member name="M:Emergent.Toolbench.UI.TreeViewEx.ExpandItem``1(System.Windows.Controls.TreeView,System.Collections.Generic.IEnumerable{``0},System.Boolean)">
            <summary>
            Expands all nodes necessary to reach the last item in the path. 
            </summary>
            <typeparam name="T"></typeparam>
            <param name="treeView"></param>
            <param name="items"></param>
            <param name="bExpand"></param>
        </member>
        <member name="M:Emergent.Toolbench.UI.TreeViewEx.GetTreeViewItem``1(System.Windows.Controls.TreeView,System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Gets the the treeviewitem pointed by the given path
            </summary>
            <typeparam name="T"></typeparam>
            <param name="treeView"></param>
            <param name="items">Path to the item</param>
            <returns></returns>
        </member>
        <member name="M:Emergent.Toolbench.UI.TreeViewEx.ContainerFromItem(System.Windows.Controls.TreeView,System.Object)">
            <summary>
            Recursive helper for the ItemContainerGenerator.
            </summary>
            <param name="treeView">The tree view.</param>
            <param name="item">The item.</param>
            <returns>The TreeViewItem wrapper.</returns>
            <remarks>http://silverlight.net/forums/t/65277.aspx</remarks>
        </member>
        <member name="M:Emergent.Toolbench.UI.TreeViewEx.ItemFromContainer(System.Windows.Controls.TreeView,System.Windows.Controls.TreeViewItem)">
            <summary>
            Recursive helper for the ItemContainerGenerator.
            </summary>
            <param name="treeView">The tree view.</param>
            <param name="container">The container.</param>
            <returns>The data item.</returns>
            <remarks>http://silverlight.net/forums/t/65277.aspx</remarks>
        </member>
        <member name="M:Emergent.Toolbench.UI.TreeViewEx.GetDepth(System.Windows.Controls.TreeViewItem)">
            <summary>
            Gets the depth of a treeview item.
            </summary>
            <param name="item">The item.</param>
            <returns>The items depth.</returns>
        </member>
        <member name="T:Emergent.Toolbench.UI.ShellThumbnail">
            <summary>
            External Code
            
            http://www.vbforums.com/archive/index.php/t-527704.html
            http://www.experts-exchange.com/Programming/Languages/C_Sharp/Q_21789724.html
            </summary>
        </member>
        <member name="T:Emergent.Toolbench.UI.CommandReference">
            <summary>
            This class facilitates associating a key binding in XAML markup to a command defined in a
            View Model by exposing a Command dependency property. The class derives from Freezable to
            work around a limitation in WPF when data-binding from XAML.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.UI.CommandReference.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Emergent.Toolbench.UI.CommandReference"/> class.
            </summary>
        </member>
        <member name="F:Emergent.Toolbench.UI.CommandReference.CommandProperty">
            <summary>
            The Command DependencyProperty.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.UI.CommandReference.CanExecute(System.Object)">
            <summary>
            Defines the method that determines whether the command can execute in its current state.
            </summary>
            <param name="parameter">Data used by the command. If the command does not require data
            to be passed, this object can be set to null.</param>
            <returns>true if this command can be executed; otherwise, false.</returns>
        </member>
        <member name="M:Emergent.Toolbench.UI.CommandReference.Execute(System.Object)">
            <summary>
            Defines the method to be called when the command is invoked.
            </summary>
            <param name="parameter">Data used by the command. If the command does not require data
            to be passed, this object can be set to null.</param>
        </member>
        <member name="M:Emergent.Toolbench.UI.CommandReference.CreateInstanceCore">
            <summary>
            When implemented in a derived class, creates a new instance of the
            <see cref="T:System.Windows.Freezable"/> derived class.
            </summary>
            <returns>The new instance.</returns>
            <exception cref="T:System.NotImplementedException">Always thrown.</exception>
        </member>
        <member name="P:Emergent.Toolbench.UI.CommandReference.Command">
            <summary>
            Gets or sets the value of the command dependency property.
            </summary>
            <value>The command dependency property value.</value>
        </member>
        <member name="E:Emergent.Toolbench.UI.CommandReference.CanExecuteChanged">
            <summary>
            Occurs when changes occur that affect whether or not the command should execute.
            </summary>
        </member>
        <member name="T:Emergent.Toolbench.UI.Dialogs.InputBox">
            <summary>
            Interaction logic for InputBox.xaml
            </summary>
            <summary>
            InputBox
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.UI.Dialogs.InputBox.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Emergent.Toolbench.UI.Dialogs.InputBox"/> class.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.UI.Dialogs.InputBox.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.UI.Dialogs.InputBox.Prompt">
            <summary>
            Gets or sets the prompt.
            </summary>
            <value>The prompt.</value>
        </member>
        <member name="P:Emergent.Toolbench.UI.Dialogs.InputBox.Text">
            <summary>
            Gets or sets the text inside the input box.
            </summary>
            <value>The text.</value>
        </member>
        <member name="T:Emergent.Toolbench.UI.DelegateCommand">
            <summary>
            This class allows delegating the commanding logic to methods passed as parameters, and
            enables a View to bind commands to objects that are not part of the element tree.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.UI.DelegateCommand.#ctor(System.Action)">
            <summary>
            Initializes a new instance of the <see cref="T:Emergent.Toolbench.UI.DelegateCommand"/> class.
            </summary>
            <param name="executeMethod">The Execute method.</param>
        </member>
        <member name="M:Emergent.Toolbench.UI.DelegateCommand.#ctor(System.Action,System.Func{System.Boolean})">
            <summary>
            Initializes a new instance of the <see cref="T:Emergent.Toolbench.UI.DelegateCommand"/> class.
            </summary>
            <param name="executeMethod">The Execute method.</param>
            <param name="canExecuteMethod">The CanExecute method.</param>
        </member>
        <member name="M:Emergent.Toolbench.UI.DelegateCommand.#ctor(System.Action,System.Func{System.Boolean},System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Emergent.Toolbench.UI.DelegateCommand"/> class.
            </summary>
            <param name="executeMethod">The Execute method.</param>
            <param name="canExecuteMethod">The CanExecute method.</param>
            <param name="isAutomaticRequeryDisabled">Specifies whether automatic requeries are
            performed.</param>
        </member>
        <member name="M:Emergent.Toolbench.UI.DelegateCommand.CanExecute">
            <summary>
            Method to determine if the command can be executed.
            </summary>
            <returns><c>true</c> if this instance can execute; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Emergent.Toolbench.UI.DelegateCommand.Execute">
            <summary>
            Execution of the command.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.UI.DelegateCommand.RaiseCanExecuteChanged">
            <summary>
            Raises the CanExecuteChaged event.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.UI.DelegateCommand.OnCanExecuteChanged">
            <summary>
            Protected virtual method to raise CanExecuteChanged event.
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.UI.DelegateCommand.IsAutomaticRequeryDisabled">
            <summary>
            Property to enable or disable CommandManager's automatic requery on this command.
            </summary>
            <value><c>true</c> if this instance is automatic requery disabled; otherwise,
            <c>false</c>.</value>
        </member>
        <member name="E:Emergent.Toolbench.UI.DelegateCommand.CanExecuteChanged">
            <summary>
            ICommand.CanExecuteChanged implementation.
            </summary>
        </member>
        <member name="T:Emergent.Toolbench.UI.DelegateCommand`1">
            <summary>
            This class allows delegating the commanding logic to methods passed as parameters, and
            enables a View to bind commands to objects that are not part of the element tree.
            </summary>
            <typeparam name="T">Type of the parameter passed to the delegates.</typeparam>
        </member>
        <member name="M:Emergent.Toolbench.UI.DelegateCommand`1.#ctor(System.Action{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Emergent.Toolbench.UI.DelegateCommand`1"/> class.
            </summary>
            <param name="executeMethod">The Execute method.</param>
        </member>
        <member name="M:Emergent.Toolbench.UI.DelegateCommand`1.#ctor(System.Action{`0},System.Func{`0,System.Boolean})">
            <summary>
            Initializes a new instance of the <see cref="T:Emergent.Toolbench.UI.DelegateCommand`1"/> class.
            </summary>
            <param name="executeMethod">The Execute method.</param>
            <param name="canExecuteMethod">The CanExecute method.</param>
        </member>
        <member name="M:Emergent.Toolbench.UI.DelegateCommand`1.#ctor(System.Action{`0},System.Func{`0,System.Boolean},System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Emergent.Toolbench.UI.DelegateCommand`1"/> class.
            </summary>
            <param name="executeMethod">The Execute method.</param>
            <param name="canExecuteMethod">The CanExecute method.</param>
            <param name="isAutomaticRequeryDisabled">Specifies whether automatic requeries are
            performed.</param>
        </member>
        <member name="M:Emergent.Toolbench.UI.DelegateCommand`1.CanExecute(`0)">
            <summary>
            Method to determine if the command can be executed.
            </summary>
            <param name="parameter">The parameter.</param>
            <returns><c>true</c> if this instance can execute the specified parameter; otherwise,
            <c>false</c>.</returns>
        </member>
        <member name="M:Emergent.Toolbench.UI.DelegateCommand`1.Execute(`0)">
            <summary>
            Execution of the command.
            </summary>
            <param name="parameter">The parameter.</param>
        </member>
        <member name="M:Emergent.Toolbench.UI.DelegateCommand`1.RaiseCanExecuteChanged">
            <summary>
            Raises the CanExecuteChaged event.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.UI.DelegateCommand`1.OnCanExecuteChanged">
            <summary>
            Protected virtual method to raise CanExecuteChanged event.
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.UI.DelegateCommand`1.IsAutomaticRequeryDisabled">
            <summary>
            Property to enable or disable CommandManager's automatic requery on this command.
            </summary>
            <value><c>true</c> if this instance is automatic requery disabled; otherwise,
            <c>false</c>.</value>
        </member>
        <member name="E:Emergent.Toolbench.UI.DelegateCommand`1.CanExecuteChanged">
            <summary>
            ICommand.CanExecuteChanged implementation.
            </summary>
        </member>
        <member name="T:Emergent.Toolbench.UI.CommandManagerHelper">
            <summary>
            This class contains methods for the CommandManager that help avoid memory leaks by using
            weak references.
            </summary>
        </member>
        <member name="T:Emergent.Toolbench.UI.BreadcrumbBar.BreadcrumbBar">
            <summary>
            A breadcrumb bar the contains breadcrumb items, a dropdown control, additional buttons and a progress bar.
            </summary>
        </member>
        <member name="F:Emergent.Toolbench.UI.BreadcrumbBar.BreadcrumbBar.breadcrumbsToHide">
            <summary>
            Gets the number of the first breadcrumb to hide in the path if descending breadcrumbs are selected.
            </summary>
        </member>
        <member name="F:Emergent.Toolbench.UI.BreadcrumbBar.BreadcrumbBar.PopulateItemsEvent">
            <summary>
            Occurs before acessing the Items property of a BreadcrumbItem. This event can be used to populate the Items on demand.
            </summary>
        </member>
        <member name="F:Emergent.Toolbench.UI.BreadcrumbBar.BreadcrumbBar.PathConversionEvent">
            <summary>
            Occurs when a path needs to be converted between display path and edit path.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.UI.BreadcrumbBar.BreadcrumbBar.#ctor">
            <summary>
            Creates a new BreadcrumbBar.
            </summary>
        </member>
        <member name="F:Emergent.Toolbench.UI.BreadcrumbBar.BreadcrumbBar.initPath">
            <summary>
            On initializing, it is possible that the Path property is set before the RootItem property, thus the declarative xaml Path would be overwritten by settings the
            RootItem property later. To avoid this affect, setting the Path also sets initPath on initializing and after initializing, the Path is restored by this value:
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.UI.BreadcrumbBar.BreadcrumbBar.OnPathChanged(System.String,System.String)">
            <summary>
            Occurs when the Path property is changed.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.UI.BreadcrumbBar.BreadcrumbBar.BuildBreadcrumbsFromPath(System.String)">
            <summary>
            Traces the specified path and builds the associated BreadcrumbItems.
            </summary>
            <param name="path">The traces separated by the SepearatorString property.</param>
        </member>
        <member name="M:Emergent.Toolbench.UI.BreadcrumbBar.BreadcrumbBar.RemoveLastEmptySeparator(System.String)">
            <summary>
            Remove the last separator string from the path if there is no additional trace.
            </summary>
            <param name="path">The path from which to remove the last separator.</param>
            <returns>The path without an unecassary last separator.</returns>
        </member>
        <member name="M:Emergent.Toolbench.UI.BreadcrumbBar.BreadcrumbBar.OnDropDownOpenChanged(System.Boolean,System.Boolean)">
            <summary>
            Occurs when the IsDropDownOpen property is changed.
            </summary>
            <param name="oldValue"></param>
            <param name="newValue"></param>
        </member>
        <member name="M:Emergent.Toolbench.UI.BreadcrumbBar.BreadcrumbBar.buttonClickedEvent(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Remove the focus from a button when it was clicked.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.UI.BreadcrumbBar.BreadcrumbBar.OnPopulateItems(Emergent.Toolbench.UI.BreadcrumbBar.BreadcrumbItem)">
            <summary>
            Occurs before acessing the Items property of a BreadcrumbItem. This event can be used to populate the Items on demand.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.UI.BreadcrumbBar.BreadcrumbBar.OnBreadcrumbItemDropDownOpened(System.Windows.RoutedEventArgs)">
            <summary>
            Occurs when the dropdown of a BreadcrumbItem is opened.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.UI.BreadcrumbBar.BreadcrumbBar.OnBreadcrumbItemDropDownClosed(System.Windows.RoutedEventArgs)">
            <summary>
            Occurs when the dropdown of a BreadcrumbItem is closed.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.UI.BreadcrumbBar.BreadcrumbBar.CheckOverflowImage">
            <summary>
            Check what image to display in the drop down button of the overflow button:
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.UI.BreadcrumbBar.BreadcrumbBar.BuildTraces">
            <summary>
            Build the list of traces for the overflow button.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.UI.BreadcrumbBar.BreadcrumbBar.OnSelectedItemChanged(System.Object,System.Object)">
            <summary>
            Occurs when the selected item of an embedded BreadcrumbItem is changed.
            </summary>
            <param name="oldvalue"></param>
            <param name="newValue"></param>
        </member>
        <member name="M:Emergent.Toolbench.UI.BreadcrumbBar.BreadcrumbBar.OnRootChanged(System.Object,System.Object)">
            <summary>
            Occurs when the Root property is changed.
            </summary>
            <param name="oldValue"></param>
            <param name="newValue"></param>
        </member>
        <member name="M:Emergent.Toolbench.UI.BreadcrumbBar.BreadcrumbBar.GetFirstItem(System.Object)">
            <summary>
            Gets the first item of the specified value if it is a collection, otherwise it returns the value itself.
            </summary>
            <param name="entity">A collection, otherwise an object.</param>
            <returns>The first item of the collection, otherwise the entity.</returns>
        </member>
        <member name="M:Emergent.Toolbench.UI.BreadcrumbBar.BreadcrumbBar.OnOverflowPressedChanged">
            <summary>
            Occurs when the IsOverflowPressed property is changed.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.UI.BreadcrumbBar.BreadcrumbBar.GetEditPath">
            <summary>
            Gets the edit path from the tracess of the BreacrumbItems.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Emergent.Toolbench.UI.BreadcrumbBar.BreadcrumbBar.PathFromBreadcrumbItem(Emergent.Toolbench.UI.BreadcrumbBar.BreadcrumbItem)">
            <summary>
            Gets the path of the specified BreadcrumbItem.
            </summary>
            <param name="item">The BreadrumbItem for which to determine the path.</param>
            <returns>The path of the BreadcrumbItem which is the concenation of all Traces from all selected breadcrumbs.</returns>
        </member>
        <member name="M:Emergent.Toolbench.UI.BreadcrumbBar.BreadcrumbBar.GetDisplayPath">
            <summary>
            Gets the display path from the traces of the BreacrumbItems.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Emergent.Toolbench.UI.BreadcrumbBar.BreadcrumbBar.Exit(System.Boolean)">
            <summary>
            Do what's necassary to do when the BreadcrumbBar has lost focus.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.UI.BreadcrumbBar.BreadcrumbBar.CoerceProgressValue(System.Windows.DependencyObject,System.Object)">
            <summary>
            Check the desired value for ProgressValue and asure that it is between Minimum and Maximum:
            </summary>
            <param name="d"></param>
            <param name="baseValue"></param>
            <returns>The value between mimimum and maximum.</returns>
        </member>
        <member name="P:Emergent.Toolbench.UI.BreadcrumbBar.BreadcrumbBar.ShowDropDownCommand">
            <summary>
            This command shows the drop down part of the combobox.
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.UI.BreadcrumbBar.BreadcrumbBar.SelectTraceCommand">
            <summary>
            This command selects the BreadcrumbItem that is specified as Parameter. 
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.UI.BreadcrumbBar.BreadcrumbBar.SelectRootCommand">
            <summary>
            This command selects the root.
            </summary>
        </member>
        <member name="E:Emergent.Toolbench.UI.BreadcrumbBar.BreadcrumbBar.ApplyProperties">
            <summary>
            Occurs after a BreadcrumbItem is created for which to apply additional properties.
            </summary>
        </member>
        <member name="E:Emergent.Toolbench.UI.BreadcrumbBar.BreadcrumbBar.SelectedBreadcrumbChanged">
            <summary>
            Occurs when the selected BreadcrumbItem is changed.
            </summary>
        </member>
        <member name="E:Emergent.Toolbench.UI.BreadcrumbBar.BreadcrumbBar.PathChanged">
            <summary>
            Occurs when the Path property is changed.
            </summary>
        </member>
        <member name="E:Emergent.Toolbench.UI.BreadcrumbBar.BreadcrumbBar.PopulateItems">
            <summary>
            Occurs before acessing the Items property of a BreadcrumbItem. This event can be used to populate the Items on demand.
            </summary>
        </member>
        <member name="E:Emergent.Toolbench.UI.BreadcrumbBar.BreadcrumbBar.PathConversion">
            <summary>
            Occurs when a path needs to be converted between display path and edit path.
            </summary>
        </member>
        <member name="E:Emergent.Toolbench.UI.BreadcrumbBar.BreadcrumbBar.BreadcrumbItemDropDownOpened">
            <summary>
            Occurs when the dropdown of a BreadcrumbItem is opened.
            </summary>
        </member>
        <member name="E:Emergent.Toolbench.UI.BreadcrumbBar.BreadcrumbBar.BreadcrumbItemDropDownClosed">
            <summary>
            Occurs when the dropdown of a BreadcrumbItem is closed.
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.UI.BreadcrumbBar.BreadcrumbBar.IsRootSelected">
            <summary>
            Gets whether the selected breadcrumb is the RootItem. 
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.UI.BreadcrumbBar.BreadcrumbBar.OverflowItemTemplateSelector">
            <summary>
            Gets or sets the DataTemplateSelector for the overflow items.
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.UI.BreadcrumbBar.BreadcrumbBar.OverflowItemTemplate">
            <summary>
            Gets or set the DataTemplate for the OverflowItem.
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.UI.BreadcrumbBar.BreadcrumbBar.CollapsedTraces">
            <summary>
            Gets the collapsed traces. 
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.UI.BreadcrumbBar.BreadcrumbBar.Root">
            <summary>
            Gets or sets the root of the breadcrumb which can be a hierarchical data source or a BreadcrumbItem.
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.UI.BreadcrumbBar.BreadcrumbBar.SelectedItem">
            <summary>
            Gets or sets the selected item.
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.UI.BreadcrumbBar.BreadcrumbBar.SelectedBreadcrumb">
            <summary>
            Gets the selected BreadcrumbItem
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.UI.BreadcrumbBar.BreadcrumbBar.IsOverflowPressed">
            <summary>
            Gets whether the Overflow button is pressed.
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.UI.BreadcrumbBar.BreadcrumbBar.RootItem">
            <summary>
            Gets the Root BreadcrumbItem.
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.UI.BreadcrumbBar.BreadcrumbBar.BreadcrumbItemTemplateSelector">
            <summary>
            Gets or sets the TemplateSelector for an embedded BreadcrumbItem.
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.UI.BreadcrumbBar.BreadcrumbBar.BreadcrumbItemTemplate">
            <summary>
            Gets or sets the Template for an embedded BreadcrumbItem.
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.UI.BreadcrumbBar.BreadcrumbBar.OverflowMode">
            <summary>
            Gets the overflow mode for the Overflow BreadcrumbButton (PART_Root).
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.UI.BreadcrumbBar.BreadcrumbBar.DropDownItemsSource">
            <summary>
            Gets or sets the DataSource for the DropDownItems of the combobox.
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.UI.BreadcrumbBar.BreadcrumbBar.IsDropDownOpen">
            <summary>
            Gets or sets whether the combobox dropdown is opened.
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.UI.BreadcrumbBar.BreadcrumbBar.SeparatorString">
            <summary>
            Gets or sets the string that is used to separate between traces.
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.UI.BreadcrumbBar.BreadcrumbBar.Path">
            <summary>
            Gets or sets the selected path.
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.UI.BreadcrumbBar.BreadcrumbBar.Buttons">
            <summary>
            Gets the collection of buttons to appear on the right of the breadcrumb bar.
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.UI.BreadcrumbBar.BreadcrumbBar.DropDownItems">
            <summary>
            Gets or sets the DropDownItems for the combobox.
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.UI.BreadcrumbBar.BreadcrumbBar.HasDropDownItems">
            <summary>
            Gets whether the dropdown has items.
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.UI.BreadcrumbBar.BreadcrumbBar.DropDownItemsPanel">
            <summary>
            Gets or sets the ItemsPanelTemplate for the DropDownItems of the combobox.
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.UI.BreadcrumbBar.BreadcrumbBar.DropDownItemTemplateSelector">
            <summary>
            Gets or sets the ItemsPanelTemplateSelector for the DropDownItems of the combobox.
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.UI.BreadcrumbBar.BreadcrumbBar.DropDownItemTemplate">
            <summary>
            Gets or sets the DataTemplate for the DropDownItems of the combobox.
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.UI.BreadcrumbBar.BreadcrumbBar.IsEditable">
            <summary>
            Gets or sets whether the breadcrumb bar can change to edit mode where the path can be edited.
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.UI.BreadcrumbBar.BreadcrumbBar.SelectedDropDownIndex">
            <summary>
            Gets or sets the SelectedIndex of the combobox.
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.UI.BreadcrumbBar.BreadcrumbBar.ProgressValue">
            <summary>
            Gets or sets the current progress indicator value.
            </summary>
        </member>
        <member name="E:Emergent.Toolbench.UI.BreadcrumbBar.BreadcrumbBar.ProgressValueChanged">
            <summary>
            Occurs when the ProgressValue is changed.
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.UI.BreadcrumbBar.BreadcrumbBar.ProgressMaximum">
            <summary>
            Gets or sets the maximum progress value.
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.UI.BreadcrumbBar.BreadcrumbBar.ProgressMimimum">
            <summary>
            Gets or sets the minimum progess value.
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.UI.BreadcrumbBar.BreadcrumbBar.TraceBinding">
            <summary>
            Gets or sets the TraceBinding property that will be set to every child BreadcrumbItem. This is not a dependency property!
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.UI.BreadcrumbBar.BreadcrumbBar.ImageBinding">
            <summary>
            Gets or sets the ImageBinding property that will be set to every child BreadcrumbItem. This is not a dependency property!
            </summary>
        </member>
        <member name="T:Emergent.Toolbench.UI.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.UI.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.UI.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.UI.Properties.Resources.DuplicateName">
            <summary>
              Looks up a localized string similar to This name already exists for this scope.
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.UI.Properties.Resources.InvalidCharactersInName">
            <summary>
              Looks up a localized string similar to This name contains invalid characters or does not match the required format..
            </summary>
        </member>
        <member name="T:Emergent.Toolbench.UI.NameValidator">
            <summary>
            Provide functionality for validating the name
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.UI.NameValidator.Validate(System.Collections.Generic.IEnumerable{System.String},System.String,System.String,Emergent.Toolbench.UI.NameValidator.NamingScheme,System.Boolean)">
            <summary>
            Validates the specified name.
            </summary>
            <param name="source">The source from which to check for duplicates.</param>
            <param name="oldName">The old name.</param>
            <param name="newName">The new name.</param>
            <param name="namingScheme">The naming scheme.</param>
            <returns></returns>
        </member>
        <member name="M:Emergent.Toolbench.UI.NameValidator.ValidateFileName(System.String,System.String,System.String)">
            <summary>
            Validates the name of the file.
            </summary>
            <param name="directory">The directory.</param>
            <param name="oldFile">The old file.</param>
            <param name="newFile">The new file.</param>
            <returns></returns>
        </member>
        <member name="M:Emergent.Toolbench.UI.NameValidator.FindNewName(System.Collections.Generic.IEnumerable{System.String},System.String)">
            <summary>
            Finds the new name using the existing names defined in the specified scope.
            The algorithm with add a Index to the base name that is available for the scope.
            </summary>
            <param name="scopeSource">The scope source.</param>
            <param name="baseName">base Name for the new name.</param>
            <returns></returns>
        </member>
        <member name="M:Emergent.Toolbench.UI.NameValidator.DoesMatchNamingScheme(Emergent.Toolbench.UI.NameValidator.NamingScheme,System.String)">
            <summary>
            Verify the name matches the naming scheme.
            </summary>
            <param name="namingScheme">The naming scheme.</param>
            <param name="name">The name.</param>
            <returns></returns>
        </member>
        <member name="T:Emergent.Toolbench.UI.NameValidator.NamingScheme">
            <summary>
            Different naming schemes
            </summary>
        </member>
        <member name="F:Emergent.Toolbench.UI.NameValidator.NamingScheme.CIdentifier">
            <summary>
            C/C++ identifier syntax
            </summary>
        </member>
        <member name="F:Emergent.Toolbench.UI.NameValidator.NamingScheme.FileName">
            <summary>
            File name syntax
            </summary>
        </member>
        <member name="F:Emergent.Toolbench.UI.NameValidator.NamingScheme.None">
            <summary>
            No naming scheme, any value possible
            </summary>
        </member>
        <member name="T:Emergent.Toolbench.UI.ColorToBrushConverter">
            <summary>
            Converter to provide brushes from colors.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.UI.ColorToBrushConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value.
            </summary>
            <param name="value">The value produced by the binding source.</param>
            <param name="targetType">The type of the binding target property.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the converter.</param>
            <returns>A converted value. If the method returns null, the valid null value is used.
            </returns>
        </member>
        <member name="M:Emergent.Toolbench.UI.ColorToBrushConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value.
            </summary>
            <param name="value">The value that is produced by the binding target.</param>
            <param name="targetType">The type to convert to.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the converter.</param>
            <returns>A converted value. If the method returns null, the valid null value is used.
            </returns>
            <exception cref="T:System.NotImplementedException">Always thrown.</exception>
        </member>
        <!-- Badly formed XML comment ignored for member "T:Emergent.Toolbench.UI.Controls.SelectableLabel" -->
        <member name="T:Emergent.Toolbench.UI.PercentValueConverter">
            <summary>
            Value converter to convert to/from the range [0.0 .. 1.0] and [0 .. 100].
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.UI.PercentValueConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            </summary>
            <param name="value"></param>
            <param name="targetType"></param>
            <param name="parameter"></param>
            <param name="culture"></param>
            <returns></returns>
        </member>
        <member name="M:Emergent.Toolbench.UI.PercentValueConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            </summary>
            <param name="value"></param>
            <param name="targetType"></param>
            <param name="parameter"></param>
            <param name="culture"></param>
            <returns></returns>
        </member>
        <member name="T:Emergent.Toolbench.UI.BooleanInvertConverter">
            <summary>
            Used to logically invert (NOT or !).
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.UI.BooleanInvertConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value.
            </summary>
            <param name="value">The value produced by the binding source.</param>
            <param name="targetType">The type of the binding target property.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the converter.</param>
            <returns>A converted value. If the method returns null, the valid null value is used.
            </returns>
        </member>
        <member name="M:Emergent.Toolbench.UI.BooleanInvertConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value.
            </summary>
            <param name="value">The value that is produced by the binding target.</param>
            <param name="targetType">The type to convert to.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the converter.</param>
            <returns>A converted value. If the method returns null, the valid null value is used.
            </returns>
            <exception cref="T:System.NotImplementedException">Always thrown.</exception>
        </member>
        <member name="T:Emergent.Toolbench.UI.Validations.StringValidationRule">
            <summary>
            Simple validation rule that checks whether or not a string is null or empty. If it is, 
            the validation fails.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.UI.Validations.StringValidationRule.Validate(System.Object,System.Globalization.CultureInfo)">
            <summary>
            Makes sure the incoming string is not null and not empty.
            </summary>
            <param name="value">Incoming string value.</param>
            <param name="cultureInfo"></param>
            <returns>Valid if the string is not null and not empty.</returns>
        </member>
        <member name="T:Emergent.Toolbench.UI.ExpressionDark">
            <summary>
            ExpressionDark
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.UI.ExpressionDark.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Emergent.Toolbench.UI.ViewModelBehavior">
            <summary>
            The <see cref="T:Emergent.Toolbench.UI.ViewModelBehavior"/> attachable behavior class is designed to help map
            the load and the unload of a view model to the load and unload of the 
            <see cref="T:System.Windows.FrameworkElement"/> that an <see cref="T:Emergent.Toolbench.UI.IViewModel"/> has been data bound to.  
            When the the <see cref="T:System.Windows.FrameworkElement"/> is Loaded or Unloaded the 
            <see cref="T:Emergent.Toolbench.UI.IViewModel"/> will have its Load and Unload called.  Load and Unload will also
            be called if a <see cref="T:Emergent.Toolbench.UI.IViewModel"/> is connected or disconnected from the DataContext
            after the UI component has already loaded.
            </summary>
        </member>
        <member name="F:Emergent.Toolbench.UI.ViewModelBehavior.LoadUnloadProperty">
            <summary>
            The LoadUnloadProperty is for hooking up load and unload functionality from the UI to
            the <see cref="T:Emergent.Toolbench.UI.IViewModel"/> that is bound to it.
            </summary>
        </member>
        <member name="T:Emergent.Toolbench.UI.ViewModel">
            <summary>
            Base class for the view-model classes of a MVVM design.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.UI.ViewModel.Load(System.Windows.FrameworkElement)">
            <summary>
            Load should be called when the UI component the <see cref="T:Emergent.Toolbench.UI.IViewModel"/> has been
            data bound to has been loaded.  For this to work correctly, you should be using the
            <see cref="T:Emergent.Toolbench.UI.ViewModelBehavior"/> attachable behavior class.
            </summary>
            <param name="element">The element that is data-bound to this 
            <see cref="T:Emergent.Toolbench.UI.ViewModel"/>.</param>
        </member>
        <member name="M:Emergent.Toolbench.UI.ViewModel.Unload(System.Windows.FrameworkElement)">
            <summary>
            Unload should be called when the UI component the <see cref="T:Emergent.Toolbench.UI.IViewModel"/> has been
            data bound to has been unloaded.  For this to work correctly, you should be using the
            <see cref="T:Emergent.Toolbench.UI.ViewModelBehavior"/> attachable behavior class.
            </summary>
            <param name="element">The element that is data-bound to this 
            <see cref="T:Emergent.Toolbench.UI.ViewModel"/>.</param>
        </member>
        <member name="M:Emergent.Toolbench.UI.ViewModel.RaisePropertyChanged(System.String)">
            <summary>
            Raises the property changed.
            </summary>
            <param name="propertyName">Name of the property.</param>
        </member>
        <member name="E:Emergent.Toolbench.UI.ViewModel.PropertyChanged">
            <summary>
            Occurs when a property value changes.
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.UI.ViewModel.Initialized">
            <summary>
            Initialized will be set to true just before Load is called, and set to
            false just after Unload is called.  Don't ever set this manually, this should
            only be set by the attachable behavior <see cref="T:Emergent.Toolbench.UI.ViewModelBehavior"/> calling 
            Load and Unload.
            </summary>
        </member>
        <member name="T:Emergent.Toolbench.UI.ObjectToVisibilityConverter">
            <summary>
            Used to convert a object null test to WPF visibility
            An example: bind the Visibility of a control to the selection of a listbox
            </summary>
        </member>
        <member name="T:XamlGeneratedNamespace.GeneratedInternalTypeHelper">
            <summary>
            GeneratedInternalTypeHelper
            </summary>
        </member>
        <member name="M:XamlGeneratedNamespace.GeneratedInternalTypeHelper.CreateInstance(System.Type,System.Globalization.CultureInfo)">
            <summary>
            CreateInstance
            </summary>
        </member>
        <member name="M:XamlGeneratedNamespace.GeneratedInternalTypeHelper.GetPropertyValue(System.Reflection.PropertyInfo,System.Object,System.Globalization.CultureInfo)">
            <summary>
            GetPropertyValue
            </summary>
        </member>
        <member name="M:XamlGeneratedNamespace.GeneratedInternalTypeHelper.SetPropertyValue(System.Reflection.PropertyInfo,System.Object,System.Object,System.Globalization.CultureInfo)">
            <summary>
            SetPropertyValue
            </summary>
        </member>
        <member name="M:XamlGeneratedNamespace.GeneratedInternalTypeHelper.CreateDelegate(System.Type,System.Object,System.String)">
            <summary>
            CreateDelegate
            </summary>
        </member>
        <member name="M:XamlGeneratedNamespace.GeneratedInternalTypeHelper.AddEventHandler(System.Reflection.EventInfo,System.Object,System.Delegate)">
            <summary>
            AddEventHandler
            </summary>
        </member>
    </members>
</doc>
