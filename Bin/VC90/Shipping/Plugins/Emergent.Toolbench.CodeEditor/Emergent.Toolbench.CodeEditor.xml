<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Emergent.Toolbench.CodeEditor</name>
    </assembly>
    <members>
        <member name="T:Emergent.Toolbench.CodeEditor.CodeSyntaxDocument">
            <summary>
            Wrapper class for integrating the Puzzle code document.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.CodeEditor.CodeSyntaxDocument.#ctor(System.ComponentModel.IContainer)">
            <summary>
            Constructs a CodeSyntaxDocument.
            </summary>
            <param name="container">Container associated with the document.</param>
        </member>
        <member name="M:Emergent.Toolbench.CodeEditor.CodeSyntaxDocument.UndoWithoutFiringAction">
            <summary>
            Processes an undo operation without triggering a new action.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.CodeEditor.CodeSyntaxDocument.RedoWithoutFiringAction">
            <summary>
            Processes a redo operation without triggering a new action.
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.CodeEditor.CodeSyntaxDocument.IsUsingUndoBuffer">
            <summary>
            Determines whether change operations are currently using the undo buffer.
            </summary>
        </member>
        <member name="T:Emergent.Toolbench.CodeEditor.CodeEditorBox">
            <summary>
            Wrapper class for the code editor control.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.CodeEditor.CodeEditorBox.#ctor">
            <summary>
            Constructs a CodeEditorBox.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.CodeEditor.CodeEditorBox.IsInputKey(System.Windows.Forms.Keys)">
            <summary>
            Determines whether a key is a regular input key.
            </summary>
            <param name="keyData">Key information.</param>
            <returns>True if passed a regular input key.</returns>
        </member>
        <member name="M:Emergent.Toolbench.CodeEditor.CodeEditorBox.InitializeComponent">
            <summary>
            Initializes the component.
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.CodeEditor.CodeEditorBox.DebuggingActive">
            <summary>
            Sets if debugging is currently active or not. This has
            an effect on the appearence of breakpoints in the editor.
            </summary>
        </member>
        <member name="T:Emergent.Toolbench.CodeEditor.CodeDocument">
            <summary>
            Implements the document content interface providing access to plain 
            text files.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.CodeEditor.CodeDocument.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Emergent.Toolbench.CodeEditor.CodeDocument"/> class.
            The content changed event is also connected to an event handler.
            This is the preferred method of handling the content changed events
            since there are two methods that could modify content.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.CodeEditor.CodeDocument.Clear">
            <summary>
            Sets the text to the empty string.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.CodeEditor.CodeDocument.Reload">
            <summary>
            Reloads the document.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.CodeEditor.CodeDocument.OnTextContentChanged(Emergent.Toolbench.ContentService.AbstractContent,Emergent.Toolbench.ContentService.ContentChangedEventArgs)">
            <summary>
            Called when the content has been changed. The event data always 
            contains a string representing the new content.
            </summary>         
        </member>
        <member name="M:Emergent.Toolbench.CodeEditor.CodeDocument.OnDocumentSaved">
            <summary>
            Called when the document is saved. Raises a static event for further processing.
            </summary>
        </member>
        <member name="E:Emergent.Toolbench.CodeEditor.CodeDocument.CodeDocumentSaved">
            <summary>
            Event indicating that a CodeDocument has been saved.
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.CodeEditor.CodeDocument.Text">
            <summary>
            Gets the text currently in the document.
            </summary>
            <value>The text.</value>
        </member>
        <member name="P:Emergent.Toolbench.CodeEditor.CodeDocument.CanReload">
            <summary>
            Gets a value indicating that this document can be reloaded in place.
            </summary>
        </member>
        <member name="T:Emergent.Toolbench.CodeEditor.CodeDocumentEventArgs">
            <summary>
            Class for holding information about a generic CodeDocument event.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.CodeEditor.CodeDocumentEventArgs.#ctor(System.String)">
            <summary>
            Constructor for CodeDocumentEventArgs.
            </summary>
            <param name="file">Filename of CodeDocument content.</param>
        </member>
        <member name="P:Emergent.Toolbench.CodeEditor.CodeDocumentEventArgs.File">
            <summary>
            The filename of the CodeDocument content.
            </summary>
        </member>
        <member name="T:Emergent.Toolbench.CodeEditor.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.CodeEditor.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.CodeEditor.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.CodeEditor.Properties.Resources.CompileCodeNotAvailable">
            <summary>
              Looks up a localized string similar to Compile Code is not available for this script language..
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.CodeEditor.Properties.Resources.ExternalEditorLaunchFail">
            <summary>
              Looks up a localized string similar to Could not launch the external editor: {0} {1}.
            </summary>
        </member>
        <member name="T:Emergent.Toolbench.CodeEditor.CodeView">
            <summary>
            A view for editing code, script, or text documents.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.CodeEditor.CodeView.#cctor">
            <summary>
            One-time setup for CodeView.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.CodeEditor.CodeView.OnFontNameChanged(System.Object,Emergent.Toolbench.Settings.SettingChangedEventArgs)">
            <summary>
            Responds to a font name change in user settings.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The event arguments.</param>
        </member>
        <member name="M:Emergent.Toolbench.CodeEditor.CodeView.OnFontSizeChanged(System.Object,Emergent.Toolbench.Settings.SettingChangedEventArgs)">
            <summary>
            Responds to a font size change in user settings.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The event arguments.</param>
        </member>
        <member name="M:Emergent.Toolbench.CodeEditor.CodeView.#ctor">
            <summary>
            Constructs a CodeView.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.CodeEditor.CodeView.OnCodeDocumentUndoBufferChanged(System.Object,System.EventArgs)">
            <summary>
            Called when the undo buffer for the code document is manipulated.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The event arguments.</param>
        </member>
        <member name="M:Emergent.Toolbench.CodeEditor.CodeView.GoToLine(System.Int32)">
            <summary>
            Move the cursor to a specified line.
            </summary>
            <param name="line">Desired line for the cursor.</param>
        </member>
        <member name="M:Emergent.Toolbench.CodeEditor.CodeView.AddBreakpoint(System.Int32,System.Guid)">
            <summary>
            Add a breakpoint at the specified line.
            </summary>
            <param name="line">Line number for the new breakpoint.</param>
            <param name="id">Unique ID for the new breakpoint.</param>
        </member>
        <member name="M:Emergent.Toolbench.CodeEditor.CodeView.RemoveBreakpoint(System.Guid)">
            <summary>
            Removes the specified breakpoint.
            </summary>
            <param name="id">Unique ID of the breakpoint to be removed.</param>
            <returns>True if the breakpoint was removed.</returns>
        </member>
        <member name="M:Emergent.Toolbench.CodeEditor.CodeView.ToggleBreakpoint">
            <summary>
            Toggles a breakpoint at the current line.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.CodeEditor.CodeView.FindBreakpoint(System.Guid,System.Int32@)">
            <summary>
            Determines if the editor has a specified breakpoint.
            </summary>
            <param name="id">Unique ID of the breakpoint to find.</param>
            <param name="line">Line number where the breakpoint is found.</param>
            <returns>True if the breakpoint is found.</returns>
        </member>
        <member name="M:Emergent.Toolbench.CodeEditor.CodeView.GetCurrentLine">
            <summary>
            Finds the line number of the caret.
            </summary>
            <returns>The current line for the caret.</returns>
        </member>
        <member name="M:Emergent.Toolbench.CodeEditor.CodeView.SetLineHighlight(System.Int32)">
            <summary>
            Highlights the specified line.
            </summary>
            <param name="line">Line number of line to highlight.</param>
        </member>
        <member name="M:Emergent.Toolbench.CodeEditor.CodeView.ClearLineHighlight">
            <summary>
            Clears any line highlights in the file.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.CodeEditor.CodeView.GetCurrentText">
            <summary>
            Accesses the current text in the editor.
            </summary>
            <returns>Currently displayed text.</returns>
        </member>
        <member name="M:Emergent.Toolbench.CodeEditor.CodeView.FindText(System.String,System.Int32@)">
            <summary>
            Search for a string of text in the code view.
            </summary>
            <param name="text">The search text.</param>
            <param name="line">Line at which the text was found.</param>
            <returns>True if the text was found.</returns>
        </member>
        <member name="M:Emergent.Toolbench.CodeEditor.CodeView.AppendText(System.String)">
            <summary>
            Appends text to the end of the code document.
            </summary>
            <param name="text">Text to append.</param>
        </member>
        <member name="M:Emergent.Toolbench.CodeEditor.CodeView.OnContentConnected(Emergent.Toolbench.ContentService.AbstractContent)">
            <summary>
            Called when the view is connected to a text document. The system 
            ensures that only text documents are connected to a TextView. 
            When connected, the view's internal text editor UI is set to the 
            current text in the TextDocument.
            </summary>
            <param name="content">The content with which to connect.</param>
        </member>
        <member name="M:Emergent.Toolbench.CodeEditor.CodeView.OnContentDisconnecting">
            <summary>
            Called just before the content is disconnected from the view.  Unregisters event
            handlers.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.CodeEditor.CodeView.OnContentChanged(Emergent.Toolbench.ContentService.AbstractContent,Emergent.Toolbench.ContentService.ContentChangedEventArgs)">
            <summary>
            Called when the content is changed. Note, if the view id is this 
            view (meaning that this view generated the event) then no action 
            is taken.
            </summary>
            <param name="sender">The sender.</param>
            <param name="args">The <see cref="T:Emergent.Toolbench.ContentService.ContentChangedEventArgs"/> 
                instance containing the event data.
            </param>
        </member>
        <member name="M:Emergent.Toolbench.CodeEditor.CodeView.OnTextChanged(System.Object,System.EventArgs)">
            <summary>
            Called when the text is changed in the underlying code editor 
            control.
            </summary>        
        </member>
        <member name="M:Emergent.Toolbench.CodeEditor.CodeView.OnBreakpointAdded(System.Object,Puzzle.SourceCode.RowEventArgs)">
            <summary>
            Called when a breakpoint is added to the source file.
            </summary>
            <param name="sender">The event sender.</param>
            <param name="e">The event arguments.</param>
        </member>
        <member name="M:Emergent.Toolbench.CodeEditor.CodeView.OnBreakpointRemoved(System.Object,Puzzle.SourceCode.RowEventArgs)">
            <summary>
            Called when a breakpoint is removed from the source file.
            </summary>
            <param name="sender">The event sender.</param>
            <param name="e">The event arguments.</param>
        </member>
        <member name="F:Emergent.Toolbench.CodeEditor.CodeView.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.CodeEditor.CodeView.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Emergent.Toolbench.CodeEditor.CodeView.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="E:Emergent.Toolbench.CodeEditor.CodeView.CodeViewContentLoaded">
            <summary>
            Event indicating that a CodeView has opened new content or reloaded existing content.
            </summary>
        </member>
        <member name="E:Emergent.Toolbench.CodeEditor.CodeView.BreakpointSet">
            <summary>
            Event indicating that a breakpoint has been set.
            </summary>
        </member>
        <member name="E:Emergent.Toolbench.CodeEditor.CodeView.BreakpointCleared">
            <summary>
            Event indicating that a breakpoint has been cleared.
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.CodeEditor.CodeView.ContentFilename">
            <summary>
            Returns the filename of the code document associated with the view.
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.CodeEditor.CodeView.DebuggingActive">
            <summary>
            Sets if debugging is currently active or not. This has
            an effect on the appearence of breakpoints in the editor.
            </summary>
        </member>
        <member name="T:Emergent.Toolbench.CodeEditor.CodeViewEventArgs">
            <summary>
            Class for holding information about a generic CodeView event.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.CodeEditor.CodeViewEventArgs.#ctor(System.String)">
            <summary>
            Constructor for CodeViewEventArgs.
            </summary>
            <param name="file">Filename of CodeView content.</param>
        </member>
        <member name="P:Emergent.Toolbench.CodeEditor.CodeViewEventArgs.File">
            <summary>
            The filename of the CodeView content.
            </summary>
        </member>
        <member name="T:Emergent.Toolbench.CodeEditor.BreakpointEventArgs">
            <summary>
            Class for holding information about a breakpoint, passed during a
            breakpoint change event.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.CodeEditor.BreakpointEventArgs.#ctor(System.String,System.Int32,System.Guid)">
            <summary>
            Constructor for BreakpointEventArgs.
            </summary>
            <param name="file">Filename for the breakpoint.</param>
            <param name="line">Line number for the breakpoint.</param>
            <param name="id">Unique ID for the breakpoint.</param>
        </member>
        <member name="P:Emergent.Toolbench.CodeEditor.BreakpointEventArgs.File">
            <summary>
            The filename of the breakpoint.
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.CodeEditor.BreakpointEventArgs.Line">
            <summary>
            The line number of the breakpoint.
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.CodeEditor.BreakpointEventArgs.ID">
            <summary>
            The unique ID of the breakpoint.
            </summary>
        </member>
        <member name="T:Emergent.Toolbench.CodeEditor.CodeViewHelpers">
            <summary>
            Utility functions for interacting with CodeViews.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.CodeEditor.CodeViewHelpers.FindFile(System.String,System.String,System.Collections.Generic.List{System.String})">
            <summary>
            Helper function for finding a unique filename under a specific directory.
            </summary>
            <param name="startPath">Path to start the search.</param>
            <param name="filename">Filename to find.</param>
            <param name="results">Paths of the file instances found.</param>
        </member>
        <member name="M:Emergent.Toolbench.CodeEditor.CodeViewHelpers.ShowScriptView(System.String)">
            <summary>
            Activates a CodeView for a particular script.
            </summary>
            <param name="filename">Filename of the script to display for edit.</param>
            <returns>CodeView containing the script content.</returns>
        </member>
        <member name="M:Emergent.Toolbench.CodeEditor.CodeViewHelpers.FindScriptView(System.String)">
            <summary>
            Helper to find an existing CodeView for a given script.
            </summary>
            <param name="filename">The filename of the script.</param>
            <returns>The CodeView for editing the script.</returns>
        </member>
        <member name="M:Emergent.Toolbench.CodeEditor.CodeViewHelpers.SetDebuggingState(System.Boolean)">
            <summary>
            Sets the state of script debugging on all currently open CodeView views.
            </summary>
            <param name="debugging">New current debugging state.</param>
        </member>
        <member name="T:Emergent.Toolbench.CodeEditor.EditViewControlEditableAdapter">
            <summary>
            Helper class for integrating the code editing control with the standard Toolbench edit
            operations.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.CodeEditor.EditViewControlEditableAdapter.CanPerform(Emergent.Toolbench.UI.EditableService.EditOperation,System.Windows.Forms.Control)">
            <summary>
            Determines whether an edit operation is currently available.
            </summary>
            <param name="op">The edit operation.</param>
            <param name="control">The edit control.</param>
            <returns>True if the edit operation is valid.</returns>
        </member>
        <member name="M:Emergent.Toolbench.CodeEditor.EditViewControlEditableAdapter.Perform(Emergent.Toolbench.UI.EditableService.EditOperation,System.Windows.Forms.Control)">
            <summary>
            Performs an edit operation.
            </summary>
            <param name="op">The edit operation.</param>
            <param name="control">The edit control.</param>
        </member>
        <member name="M:Emergent.Toolbench.CodeEditor.EditViewControlEditableAdapter.CanCut(Puzzle.Windows.Forms.SyntaxBox.EditViewControl)">
            <summary>
            Determines whether a Cut operation is available.
            </summary>
            <param name="control">The edit control.</param>
            <returns>True if Cut is a valid operation.</returns>
        </member>
        <member name="M:Emergent.Toolbench.CodeEditor.EditViewControlEditableAdapter.Cut(Puzzle.Windows.Forms.SyntaxBox.EditViewControl)">
            <summary>
            Performs a Cut operation.
            </summary>
            <param name="control">The edit control.</param>
        </member>
        <member name="M:Emergent.Toolbench.CodeEditor.EditViewControlEditableAdapter.CanCopy(Puzzle.Windows.Forms.SyntaxBox.EditViewControl)">
            <summary>
            Determines whether a Copy operation is available.
            </summary>
            <param name="control">The edit control.</param>
            <returns>True if Copy is a valid operation.</returns>
        </member>
        <member name="M:Emergent.Toolbench.CodeEditor.EditViewControlEditableAdapter.Copy(Puzzle.Windows.Forms.SyntaxBox.EditViewControl)">
            <summary>
            Performs a Copy operation.
            </summary>
            <param name="control">The edit control.</param>
        </member>
        <member name="M:Emergent.Toolbench.CodeEditor.EditViewControlEditableAdapter.CanPaste(Puzzle.Windows.Forms.SyntaxBox.EditViewControl)">
            <summary>
            Determines whether a Paste operation is available.
            </summary>
            <param name="control">The edit control.</param>
            <returns>True if Paste is a valid operation.</returns>
        </member>
        <member name="M:Emergent.Toolbench.CodeEditor.EditViewControlEditableAdapter.Paste(Puzzle.Windows.Forms.SyntaxBox.EditViewControl)">
            <summary>
            Performs a Paste operation.
            </summary>
            <param name="control">The edit control.</param>
        </member>
        <member name="M:Emergent.Toolbench.CodeEditor.EditViewControlEditableAdapter.CanDelete(Puzzle.Windows.Forms.SyntaxBox.EditViewControl)">
            <summary>
            Determines whether a Delete operation is available.
            </summary>
            <param name="control">The edit control.</param>
            <returns>True if Delete is a valid operation.</returns>
        </member>
        <member name="M:Emergent.Toolbench.CodeEditor.EditViewControlEditableAdapter.Delete(Puzzle.Windows.Forms.SyntaxBox.EditViewControl)">
            <summary>
            Performs a Delete operation.
            </summary>
            <param name="control">The edit control.</param>
        </member>
        <member name="M:Emergent.Toolbench.CodeEditor.EditViewControlEditableAdapter.CanSelectAll(Puzzle.Windows.Forms.SyntaxBox.EditViewControl)">
            <summary>
            Determines whether a Select All operation is available.
            </summary>
            <param name="control">The edit control.</param>
            <returns>True if Select All is a valid operation.</returns>
        </member>
        <member name="M:Emergent.Toolbench.CodeEditor.EditViewControlEditableAdapter.SelectAll(Puzzle.Windows.Forms.SyntaxBox.EditViewControl)">
            <summary>
            Performs a Select All operation.
            </summary>
            <param name="control">The edit control.</param>
        </member>
        <member name="T:Emergent.Toolbench.CodeEditor.Plugin">
            <summary>
            Handles the starting and stopping of the help plug-in.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.CodeEditor.FindResultsDoubleClickHandler.ParseMessageForFileReference(System.String,System.String@,System.Int32@)">
            <summary>
            Utility function for parsing message text for a code file and line reference.
            </summary>
            <param name="text">Message text to be parsed.</param>
            <param name="file">Code filename found.</param>
            <param name="line">Code line number found.</param>
            <returns>True if a code reference was identified.</returns>
        </member>
        <member name="T:Emergent.Toolbench.CodeEditor.GotoCodeOutputChannel">
            <summary>
            Implements custom goto code behavior in response to a double-click on a log message in the
            OutputView.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.CodeEditor.GotoCodeOutputChannel.HandleDoubleClick(System.String,System.String)">
            <summary>
            Responds to a double-click event on an OutputView message.
            </summary>
            <param name="message">The message text.</param>
            <param name="detailedMessage">Detail text for the message.</param>
        </member>
        <member name="M:Emergent.Toolbench.CodeEditor.GotoCodeOutputChannel.ParseMessageForCodeReference(System.String,System.String@,System.Int32@)">
            <summary>
            Utility function for parsing message text for a code file and line reference.
            </summary>
            <param name="text">Message text to be parsed.</param>
            <param name="file">Code filename found.</param>
            <param name="line">Code line number found.</param>
            <returns>True if a code reference was identified.</returns>
        </member>
        <member name="T:Emergent.Toolbench.CodeEditor.CompileCodeAction">
            <summary>
            Invokes a compiler to check for syntax errors in script content.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.CodeEditor.CompileCodeAction.Execute(Emergent.Toolbench.Actions.ExecutionContext,Emergent.Toolbench.Actions.ExecutionStyle)">
            <summary>
            Executes the action.
            </summary>
            <param name="context">The execution context of the action.</param>
            <param name="style">The execution style of the action.</param>
            <returns></returns>
        </member>
        <member name="M:Emergent.Toolbench.CodeEditor.CompileCodeAction.RunStaticAnalysis(System.String,System.String)">
            <summary>
            Run additional checks on script.
            </summary>
            <param name="scriptPath">Path of script to validate.</param>
            <param name="scriptFilename">Filename of script to validate.</param>
        </member>
        <member name="M:Emergent.Toolbench.CodeEditor.CompileCodeAction.TrimCompilerOutput(System.String,System.String)">
            <summary>
            Removes the compiler path from Lua error messages.
            </summary>
            <param name="output">Compiler output to trim.</param>
            <param name="compilerPath">Full path of the compiler.</param>
            <returns>Condensed compiler output.</returns>
        </member>
        <member name="T:Emergent.Toolbench.CodeEditor.CodeEditorAction">
            <summary>
            An action for tracking changes to a code or script document.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.CodeEditor.CodeEditorAction.#ctor(Emergent.Toolbench.CodeEditor.CodeSyntaxDocument,Puzzle.SourceCode.UndoBlockCollection)">
            <summary>
            Constructs a CodeEditorAction.
            </summary>
            <param name="syntaxDocument">The document being edited.</param>
            <param name="undoBlockCollection">The undo object.</param>
        </member>
        <member name="M:Emergent.Toolbench.CodeEditor.CodeEditorAction.Execute(Emergent.Toolbench.Actions.ExecutionContext,Emergent.Toolbench.Actions.ExecutionStyle)">
            <summary>
            Normally performs the action.  In this case, the action is acknowledging a change that
            has already occurred.
            </summary>
            <param name="context">The execution context of the action.</param>
            <param name="style">The execution style of the action.</param>
            <returns>The execution result.</returns>
        </member>
        <member name="M:Emergent.Toolbench.CodeEditor.CodeEditorAction.BeginUndo">
            <summary>
            Ends the undo step
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.CodeEditor.CodeEditorAction.EndUndo">
            <summary>
            Reverts the change to the code document.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.CodeEditor.CodeEditorAction.BeginRedo">
            <summary>
            Performs the code document change again.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.CodeEditor.CodeEditorAction.EndRedo">
            <summary>
            Ends the redo step
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.CodeEditor.CodeEditorAction.ModifiesContent">
            <summary>
            Notes that the action does modify content.
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.CodeEditor.CodeEditorAction.IsUndoable">
            <summary>
            Gets a value indicating if the action is undo-able.
            </summary>
            <remarks>
            Normally this value should be true but if the action can conditionally become 
            non-undo-able, this property should reflect that.
            </remarks>
        </member>
        <member name="P:Emergent.Toolbench.CodeEditor.CodeEditorAction.Description">
            <summary>
            Constructs text to describe the code document change.
            </summary>
        </member>
        <member name="T:Emergent.Toolbench.CodeEditor.CodeFactory">
            <summary>
            A document factory for script or code content types.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.CodeEditor.CodeFactory.New(Emergent.Toolbench.ContentService.ContentCreationSettings)">
            <summary>
            Creates a new instance of a document. This method is called when the content is created.
            </summary>
            <param name="args">Additional configuration data used to create the document.</param>
            <returns>A new document instance.</returns>
        </member>
        <member name="M:Emergent.Toolbench.CodeEditor.CodeFactory.Open(Emergent.Toolbench.ContentService.ContentCreationSettings)">
            <summary>
            Opens content from the specified location and builds a new document from that content.
            </summary>
            <param name="args">Additional configuration data used to create the document.</param>
            <returns>A new document instance.</returns>
        </member>
        <member name="M:Emergent.Toolbench.CodeEditor.CodeFactory.Save(Emergent.Toolbench.ContentService.AbstractDocument)">
            <summary>
            Saves the specified document.
            </summary>
            <param name="document">The document to save.</param>
        </member>
        <member name="M:Emergent.Toolbench.CodeEditor.CodeFactory.CheckForWriteRights(System.String)">
            <summary>
            Checks for write rights.
            </summary>
            <param name="path">The path.</param>
            <returns></returns>
        </member>
    </members>
</doc>
