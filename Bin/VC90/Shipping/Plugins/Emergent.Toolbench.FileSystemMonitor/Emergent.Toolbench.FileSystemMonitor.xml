<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Emergent.Toolbench.FileSystemMonitor</name>
    </assembly>
    <members>
        <member name="T:Emergent.Toolbench.FileSystemMonitor.StatusChanges">
            <summary>
            Used to record what feature changed to cause a path changed event.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.FileSystemMonitor.StatusChanges.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.FileSystemMonitor.StatusChanges.#ctor(System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Public Constructor for initializing status
            </summary>
            <param name="changeInReadOnlyStatus">True if change in ReadOnly status.</param>
            <param name="changeInLastWriteTimeStatus">True if change in the last write time.</param>
            <param name="changeInName">True if change in name.</param>
            <param name="deleted">True if deletion occured.</param>
        </member>
        <member name="P:Emergent.Toolbench.FileSystemMonitor.StatusChanges.ChangeInReadOnlyStatus">
            <summary>
            Gets or sets a value indicating whether there is a change in read only status.
            </summary>
            <value><c>true</c> if there is a change in read only status; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Emergent.Toolbench.FileSystemMonitor.StatusChanges.ChangeInLastWriteTimeStatus">
            <summary>
            Gets or sets a value indicating whether there is a change in last write time status.
            </summary>
            <value><c>true</c> if there is a change in last write time status; otherwise,
            <c>false</c>.</value>
        </member>
        <member name="P:Emergent.Toolbench.FileSystemMonitor.StatusChanges.ChangeInName">
            <summary>
            Gets or sets a value indicating whether there is a change in name.
            </summary>
            <value><c>true</c> if there is a change in name; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Emergent.Toolbench.FileSystemMonitor.StatusChanges.Deleted">
            <summary>
            Gets or sets a value indicating whether there is a deletion.
            </summary>
            <value><c>true</c> if deleted; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Emergent.Toolbench.FileSystemMonitor.StatusChanges.ChangeOnlyInReadOnlyStatus">
            <summary>
            Gets a value indicating whether there was only a change in read only status.
            </summary>
            <value><c>true</c> if there was only a change in read only status; otherwise,
            <c>false</c>.</value>
        </member>
        <member name="T:Emergent.Toolbench.FileSystemMonitor.PathChangedEventArgs">
            <summary>
            Simple event args class that contains the necessary data for a change
            to a path being monitored by the file system monitor.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.FileSystemMonitor.PathChangedEventArgs.#ctor(System.IO.FileSystemEventArgs,Emergent.Toolbench.FileSystemMonitor.StatusChanges)">
            <summary>
            Initializes a new instance of the event args class. The necessary
            data is extracted from the specified file system event arguments.
            <param name="args">File system events arguments.</param>
            </summary>       
        </member>
        <member name="M:Emergent.Toolbench.FileSystemMonitor.PathChangedEventArgs.#ctor(System.IO.RenamedEventArgs,Emergent.Toolbench.FileSystemMonitor.StatusChanges)">
            <summary>
            Initializes a new instance of the event args class. The necessary
            data is extracted from the specified file system event arguments.
            <param name="args">File system events arguments.</param>
            </summary>       
        </member>
        <member name="T:Emergent.Toolbench.FileSystemMonitor.FileWatcherService">
            <summary>
            Implements the IService and IFileWatcherService interfaces.
            </summary>
        </member>
        <member name="T:Emergent.Toolbench.FileSystemMonitor.IFileWatcherService">
            <summary>
            This service provides the ability to listen for external changes to 
            files in the local file system. N paths may be registered with the 
            service and events are invoked when changes occur to those registered
            paths.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.FileSystemMonitor.IFileWatcherService.AddFile(System.String,System.String)">
            <summary>
            Adds a new path to the watcher service. Events are triggered when 
            changes occur to any file in the directory matching the specified 
            filter pattern.
            </summary>
            <param name="fullPath">The full path to the directory with which to 
                monitor.
            </param>
            <param name="filter">Filter pattern for the files to watch. 
                (e.g. *.xml)
            </param>
            <remarks>The file monitor will monitor all sub-directories as well.
            </remarks>
        </member>
        <member name="M:Emergent.Toolbench.FileSystemMonitor.IFileWatcherService.RemoveFile(System.String,System.String)">
            <summary>
            Removes the specified path from the watcher service.
            </summary>
            <param name="fullPath">The full path.</param>
        </member>
        <member name="M:Emergent.Toolbench.FileSystemMonitor.IFileWatcherService.RemovePath(System.String,System.String)">
            <summary>
            Removes the specified path from the watcher service.
            </summary>
            <param name="fullPath">The full path.</param>
        </member>
        <member name="M:Emergent.Toolbench.FileSystemMonitor.IFileWatcherService.RemovePath(System.String,System.String,System.String)">
            <summary>
            Removes the specified path from the watcher service.
            </summary>
            <param name="fullPath">The full path.</param>
        </member>
        <member name="M:Emergent.Toolbench.FileSystemMonitor.IFileWatcherService.TogglePath(System.String,System.String,System.String,System.Boolean)">
            <summary>
            Instead of removing the specified path from the watcher service, 
            this method will disable the notification of events on the 
            specified path. To enable event notification, call the EnablePath
            method. If the path does not exist, this method is a no-op.
            </summary>
            <param name="fullPath">The full path.</param>
        </member>
        <member name="M:Emergent.Toolbench.FileSystemMonitor.FileWatcherService.#ctor">
            <summary>
            Initializes a new instance of the 
            <see cref="T:Emergent.Toolbench.FileSystemMonitor.FileWatcherService"/> class.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.FileSystemMonitor.FileWatcherService.Initialize">
            <summary>
            Initializes the file watcher service.
            </summary>
            <exception cref="T:Emergent.Toolbench.PlatformException">Thrown if a catastrophic error
                occurs during initialization.
            </exception>
        </member>
        <member name="M:Emergent.Toolbench.FileSystemMonitor.FileWatcherService.Dispose">
            <summary>
            Disposes the object
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Emergent.Toolbench.FileSystemMonitor.FileWatcherService.AddPath(System.String,System.String)" -->
        <member name="M:Emergent.Toolbench.FileSystemMonitor.FileWatcherService.AddPath(System.String,System.String,System.Boolean)">
            <summary>
            Adds a new path to the watcher service. Events are triggered when 
            changes occur to any file in the directory or in a sub directory.
            </summary>
            <param name="fullPath">The full path to the directory with
                which to monitor.
            </param>
            <param name="includeSubdirectories">Controls if the monitor should
            also monitor sub directories.
            </param>
        </member>
        <member name="M:Emergent.Toolbench.FileSystemMonitor.FileWatcherService.RemoveFile(System.String,System.String)">
            <summary>
            Removes the specified path from the watcher service.
            </summary>
            <param name="fullPath">The full path.</param>
        </member>
        <member name="M:Emergent.Toolbench.FileSystemMonitor.FileWatcherService.RemovePath(System.String,System.String)">
            <summary>
            Removes the specified path from the watcher service.
            </summary>
            <param name="fullPath">The full path.</param>
        </member>
        <member name="M:Emergent.Toolbench.FileSystemMonitor.FileWatcherService.RemovePath(System.String,System.String,System.String)">
            <summary>
            Removes the specified path from the watcher service.
            </summary>
            <param name="fullPath">The full path.</param>
        </member>
        <member name="M:Emergent.Toolbench.FileSystemMonitor.FileWatcherService.ToggleFile(System.String,System.String,System.Boolean)">
            <summary>
            Removes the specified path from the watcher service.
            </summary>
            <param name="fullPath">The full path.</param>
        </member>
        <member name="M:Emergent.Toolbench.FileSystemMonitor.FileWatcherService.TogglePath(System.String,System.String,System.String,System.Boolean)">
            <summary>
            Instead of removing the specified path from the watcher service, 
            this method will disable the notification of events on the 
            specified path. To enable event notification, call the EnablePath
            method. If the path does not exist, this method is a no-op.
            </summary>
            <param name="fullPath">The full path.</param>
        </member>
        <member name="M:Emergent.Toolbench.FileSystemMonitor.FileWatcherService.OnFileRenamed(System.Object,System.IO.RenamedEventArgs)">
            <summary>
            Called when a path being monitored by the file watcher has been 
            renamed by some external means. (e.g. In the windows file 
            explorer).
            </summary>        
        </member>
        <member name="M:Emergent.Toolbench.FileSystemMonitor.FileWatcherService.OnFileChanged(System.Object,System.IO.FileSystemEventArgs)">
            <summary>
            Called when a path being monitored by the file watcher has been 
            modified outside of the Toolbench framework.
            </summary>        
        </member>
        <member name="M:Emergent.Toolbench.FileSystemMonitor.FileWatcherService.OnFileDeleted(System.Object,System.IO.FileSystemEventArgs)">
            <summary>
            Called when a path being monitored by the file watcher has been 
            modified outside of the Toolbench framework.
            </summary>        
        </member>
        <member name="M:Emergent.Toolbench.FileSystemMonitor.FileWatcherService.IsFileLocked(System.String)">
            <summary>
            Tests to see if the file is currently locked for writing.
            </summary>
            <param name="file">The file to test.</param>
            <returns><c>true</c> if the file is locked; otherwise, 
            <c>false</c>.</returns>
        </member>
        <member name="M:Emergent.Toolbench.FileSystemMonitor.FileWatcherService.IsFileLocked(System.IO.FileInfo)">
            <summary>
            Tests to see if the file is currently locked for writing.
            </summary>
            <param name="fileInfo">The file info to test.</param>
            <returns><c>true</c> if the file is locked; otherwise, 
            <c>false</c>.</returns>
        </member>
        <member name="P:Emergent.Toolbench.FileSystemMonitor.FileWatcherService.Name">
            <summary>
            Gets the name of this service. Services must have unique names.
            </summary>
            <value>"Emergent.Toolbench.FileSystemWatcher"</value>
        </member>
        <member name="T:Emergent.Toolbench.FileSystemMonitor.Plugin">
            <summary>
            Implements the plug-in interface for the file system monitor.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.FileSystemMonitor.Plugin.Start">
            <summary>
            Initializes the file system watcher service.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.FileSystemMonitor.Plugin.Stop">
            <summary>
            This method is called just before a plug-in is removed from the
            run-time.
            </summary>
        </member>
        <member name="T:Emergent.Toolbench.FileSystemMonitor.PathChangedHandler">
            <summary>
            Delegate used to handle changes to a path being monitored by the 
            file watcher service.
            </summary>
        </member>
    </members>
</doc>
