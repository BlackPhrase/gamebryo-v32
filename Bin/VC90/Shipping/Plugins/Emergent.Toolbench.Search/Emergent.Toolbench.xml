<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Emergent.Toolbench</name>
    </assembly>
    <members>
        <member name="T:Emergent.Toolbench.Windows.PEUtility.PEHeader">
            <summary>
            Utility for extracting the attributes of a portable executable (PE) file header.
            </summary>
            <remarks>Data fields total 20 bytes.</remarks>
        </member>
        <member name="T:Emergent.Toolbench.IO.IStreamable">
            <summary>
            The IStreamable interface is used for classes that want to able to be
            serialized out to a Stream.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.IO.IStreamable.FromStream(Emergent.Toolbench.IO.BinaryStream)">
            <summary>
            Called when the object is being deserialized from a stream.
            </summary>
            <param name="stream">The stream to read the object information
            from.</param>
        </member>
        <member name="M:Emergent.Toolbench.IO.IStreamable.ToStream(Emergent.Toolbench.IO.BinaryStream)">
            <summary>
            Called when the object is being serialized to a stream.
            </summary>
            <param name="stream">The stream to write the object information
            to.</param>
        </member>
        <member name="F:Emergent.Toolbench.Windows.PEUtility.PEHeader.Machine">
            <summary>
            The CPU the file is intended for.
            </summary>
        </member>
        <member name="F:Emergent.Toolbench.Windows.PEUtility.PEHeader.SectionsCount">
            <summary>
            The number of sections in the file.
            </summary>
        </member>
        <member name="F:Emergent.Toolbench.Windows.PEUtility.PEHeader.DateTimeStamp">
            <summary>
            The time that the linker produced the file.
            </summary>
        </member>
        <member name="F:Emergent.Toolbench.Windows.PEUtility.PEHeader.SymbolTablePointer">
            <summary>
            The file offset of the symbol table.
            </summary>
        </member>
        <member name="F:Emergent.Toolbench.Windows.PEUtility.PEHeader.SymbolsCount">
            <summary>
            The number of symbols in the symbol table.
            </summary>
        </member>
        <member name="F:Emergent.Toolbench.Windows.PEUtility.PEHeader.OptionalHeaderSize">
            <summary>
            The size of an optional header that can follow.
            </summary>
        </member>
        <member name="F:Emergent.Toolbench.Windows.PEUtility.PEHeader.Characteristics">
            <summary>
            Flags with information about the file.
            </summary>
        </member>
        <member name="F:Emergent.Toolbench.Windows.PEUtility.PEHeader.StandardFields">
            <summary>
            PE header standard fields.
            </summary>
        </member>
        <member name="F:Emergent.Toolbench.Windows.PEUtility.PEHeader.NTFields">
            <summary>
            PE header Windows NT-specific fields.
            </summary>
        </member>
        <member name="F:Emergent.Toolbench.Windows.PEUtility.PEHeader.DataDirectory">
            <summary>
            PE header data directory.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.Windows.PEUtility.PEHeader.FromStream(Emergent.Toolbench.IO.BinaryStream)">
            <summary>
            Called when the object is being deserialized from a stream.
            </summary>
            <param name="stream">The stream to read the object information from.</param>
        </member>
        <member name="M:Emergent.Toolbench.Windows.PEUtility.PEHeader.ToStream(Emergent.Toolbench.IO.BinaryStream)">
            <summary>
            Called when the object is being serialized to a stream.
            </summary>
            <param name="stream">The stream to write the object information to.</param>
            <exception cref="T:System.NotImplementedException">Always thrown.</exception>
            <remarks>This method is not implemented.</remarks>
        </member>
        <member name="T:Emergent.Toolbench.Windows.PEUtility.PEHeader.PEHeaderStardardFields">
            <summary>
            Utility for extracting portable executable (PE) file header standard fields.
            </summary>
            <remarks>Data fields total 28 bytes.</remarks>
        </member>
        <member name="F:Emergent.Toolbench.Windows.PEUtility.PEHeader.PEHeaderStardardFields.Magic">
            <summary>
            A signature WORD.
            </summary>
        </member>
        <member name="F:Emergent.Toolbench.Windows.PEUtility.PEHeader.PEHeaderStardardFields.LMajor">
            <summary>
            Major version of the linker that produced the file.
            </summary>
        </member>
        <member name="F:Emergent.Toolbench.Windows.PEUtility.PEHeader.PEHeaderStardardFields.LMinor">
            <summary>
            Minor version of the linker that produced the file.
            </summary>
        </member>
        <member name="F:Emergent.Toolbench.Windows.PEUtility.PEHeader.PEHeaderStardardFields.CodeSize">
            <summary>
            Combined size of all code sections.
            </summary>
        </member>
        <member name="F:Emergent.Toolbench.Windows.PEUtility.PEHeader.PEHeaderStardardFields.InitializedDataSize">
            <summary>
            Total size of sections with initialized data.
            </summary>
        </member>
        <member name="F:Emergent.Toolbench.Windows.PEUtility.PEHeader.PEHeaderStardardFields.UninitializedDataSize">
            <summary>
            Total size of sections with uninitialized data.
            </summary>
        </member>
        <member name="F:Emergent.Toolbench.Windows.PEUtility.PEHeader.PEHeaderStardardFields.EntryPointRVA">
            <summary>
            Address where the loader will begin execution.
            </summary>
        </member>
        <member name="F:Emergent.Toolbench.Windows.PEUtility.PEHeader.PEHeaderStardardFields.CodeBase">
            <summary>
            RVA where the file's code section begins.
            </summary>
        </member>
        <member name="F:Emergent.Toolbench.Windows.PEUtility.PEHeader.PEHeaderStardardFields.DataBase">
            <summary>
            RVA where the file's data section begins.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.Windows.PEUtility.PEHeader.PEHeaderStardardFields.FromStream(Emergent.Toolbench.IO.BinaryStream)">
            <summary>
            Called when the object is being deserialized from a stream.
            </summary>
            <param name="stream">The stream to read the object information from.</param>
        </member>
        <member name="M:Emergent.Toolbench.Windows.PEUtility.PEHeader.PEHeaderStardardFields.ToStream(Emergent.Toolbench.IO.BinaryStream)">
            <summary>
            Called when the object is being serialized to a stream.
            </summary>
            <param name="stream">The stream to write the object information to.</param>
            <exception cref="T:System.NotImplementedException">Always thrown.</exception>
            <remarks>This method is not implemented.</remarks>
        </member>
        <member name="T:Emergent.Toolbench.Windows.PEUtility.PEHeader.PEHeaderNTFields">
            <summary>
            Utility for extracting portable executable (PE) file header Windows NT-specific fields.
            </summary>
            <remarks>Data fields total 68 bytes.</remarks>
        </member>
        <member name="F:Emergent.Toolbench.Windows.PEUtility.PEHeader.PEHeaderNTFields.ImageBase">
            <summary>
            Memory-mapped location for executable.
            </summary>
        </member>
        <member name="F:Emergent.Toolbench.Windows.PEUtility.PEHeader.PEHeaderNTFields.SectionAlignment">
            <summary>
            Alignment guarantee for memory-mapped sections.
            </summary>
        </member>
        <member name="F:Emergent.Toolbench.Windows.PEUtility.PEHeader.PEHeaderNTFields.FileAlignment">
            <summary>
            Alignment guarantee for the raw data of each section.
            </summary>
        </member>
        <member name="F:Emergent.Toolbench.Windows.PEUtility.PEHeader.PEHeaderNTFields.OSMajor">
            <summary>
            Major operating system version required to use executable.
            </summary>
        </member>
        <member name="F:Emergent.Toolbench.Windows.PEUtility.PEHeader.PEHeaderNTFields.OSMinor">
            <summary>
            Minor operating system version required to use executable.
            </summary>
        </member>
        <member name="F:Emergent.Toolbench.Windows.PEUtility.PEHeader.PEHeaderNTFields.UserMajor">
            <summary>
            User-defined major version number.
            </summary>
        </member>
        <member name="F:Emergent.Toolbench.Windows.PEUtility.PEHeader.PEHeaderNTFields.UserMinor">
            <summary>
            User-defined minor version number.
            </summary>
        </member>
        <member name="F:Emergent.Toolbench.Windows.PEUtility.PEHeader.PEHeaderNTFields.SubSysMajor">
            <summary>
            Major subsystem version required to use executable.
            </summary>
        </member>
        <member name="F:Emergent.Toolbench.Windows.PEUtility.PEHeader.PEHeaderNTFields.SubSysMinor">
            <summary>
            Minor subsystem version required to use executable.
            </summary>
        </member>
        <member name="F:Emergent.Toolbench.Windows.PEUtility.PEHeader.PEHeaderNTFields.Win32Version">
            <summary>
            Reserved version field.
            </summary>
        </member>
        <member name="F:Emergent.Toolbench.Windows.PEUtility.PEHeader.PEHeaderNTFields.ImageSize">
            <summary>
            Total size of the image needed by the loader.
            </summary>
        </member>
        <member name="F:Emergent.Toolbench.Windows.PEUtility.PEHeader.PEHeaderNTFields.HeaderSize">
            <summary>
            Size of the PE header and section table.
            </summary>
        </member>
        <member name="F:Emergent.Toolbench.Windows.PEUtility.PEHeader.PEHeaderNTFields.FileChecksum">
            <summary>
            CRC checksum of the file.
            </summary>
        </member>
        <member name="F:Emergent.Toolbench.Windows.PEUtility.PEHeader.PEHeaderNTFields.Subsystem">
            <summary>
            Type of subsystem used for user interface.
            </summary>
        </member>
        <member name="F:Emergent.Toolbench.Windows.PEUtility.PEHeader.PEHeaderNTFields.DLLFlags">
            <summary>
            Flags indicating when DLL initialization will be called.
            </summary>
        </member>
        <member name="F:Emergent.Toolbench.Windows.PEUtility.PEHeader.PEHeaderNTFields.StackReserveSize">
            <summary>
            Memory reserved for initial thread's stack.
            </summary>
        </member>
        <member name="F:Emergent.Toolbench.Windows.PEUtility.PEHeader.PEHeaderNTFields.StackCommitSize">
            <summary>
            Memory committed for initial thread's stack.
            </summary>
        </member>
        <member name="F:Emergent.Toolbench.Windows.PEUtility.PEHeader.PEHeaderNTFields.HeapReserveSize">
            <summary>
            Memory reserved for initial process heap.
            </summary>
        </member>
        <member name="F:Emergent.Toolbench.Windows.PEUtility.PEHeader.PEHeaderNTFields.HeapCommitSize">
            <summary>
            Memory committed for initial process heap.
            </summary>
        </member>
        <member name="F:Emergent.Toolbench.Windows.PEUtility.PEHeader.PEHeaderNTFields.LoaderFlags">
            <summary>
            Debugging support flags.
            </summary>
        </member>
        <member name="F:Emergent.Toolbench.Windows.PEUtility.PEHeader.PEHeaderNTFields.DataDirectoryCount">
            <summary>
            Number of entries in data directory (NumberOfRvaAndSizes).
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.Windows.PEUtility.PEHeader.PEHeaderNTFields.FromStream(Emergent.Toolbench.IO.BinaryStream)">
            <summary>
            Called when the object is being deserialized from a stream.
            </summary>
            <param name="stream">The stream to read the object information from.</param>
        </member>
        <member name="M:Emergent.Toolbench.Windows.PEUtility.PEHeader.PEHeaderNTFields.ToStream(Emergent.Toolbench.IO.BinaryStream)">
            <summary>
            Called when the object is being serialized to a stream.
            </summary>
            <param name="stream">The stream to write the object information to.</param>
            <exception cref="T:System.NotImplementedException">Always thrown.</exception>
            <remarks>This method is not implemented.</remarks>
        </member>
        <member name="T:Emergent.Toolbench.Windows.PEUtility.PEHeader.PEHeaderDataDirectory">
            <summary>
            Utility for extracting portable executable (PE) file header data directory.
            </summary>
            <remarks>Data fields total 128 bytes.</remarks>
        </member>
        <member name="F:Emergent.Toolbench.Windows.PEUtility.PEHeader.PEHeaderDataDirectory.ExportTable">
            <summary>
            Export table address and size.
            </summary>
        </member>
        <member name="F:Emergent.Toolbench.Windows.PEUtility.PEHeader.PEHeaderDataDirectory.ImportTable">
            <summary>
            Import table address and size.
            </summary>
        </member>
        <member name="F:Emergent.Toolbench.Windows.PEUtility.PEHeader.PEHeaderDataDirectory.ResourceTable">
            <summary>
            Resource table address and size.
            </summary>
        </member>
        <member name="F:Emergent.Toolbench.Windows.PEUtility.PEHeader.PEHeaderDataDirectory.ExceptionTable">
            <summary>
            Exception table address and size.
            </summary>
        </member>
        <member name="F:Emergent.Toolbench.Windows.PEUtility.PEHeader.PEHeaderDataDirectory.CertificateTable">
            <summary>
            Certificate table address and size.
            </summary>
        </member>
        <member name="F:Emergent.Toolbench.Windows.PEUtility.PEHeader.PEHeaderDataDirectory.BaseRelocationTable">
            <summary>
            Base relocation table address and size.
            </summary>
        </member>
        <member name="F:Emergent.Toolbench.Windows.PEUtility.PEHeader.PEHeaderDataDirectory.Debug">
            <summary>
            Debugging information starting address and size.
            </summary>
        </member>
        <member name="F:Emergent.Toolbench.Windows.PEUtility.PEHeader.PEHeaderDataDirectory.Copyright">
            <summary>
            Architecture-specific data address and size.
            </summary>
        </member>
        <member name="F:Emergent.Toolbench.Windows.PEUtility.PEHeader.PEHeaderDataDirectory.GlobalPtr">
            <summary>
            Global pointer register RVA.
            </summary>
        </member>
        <member name="F:Emergent.Toolbench.Windows.PEUtility.PEHeader.PEHeaderDataDirectory.TLSTable">
            <summary>
            Thread local storage (TLS) table address and size.
            </summary>
        </member>
        <member name="F:Emergent.Toolbench.Windows.PEUtility.PEHeader.PEHeaderDataDirectory.LoadConfigTable">
            <summary>
            Load configuration table address and size.
            </summary>
        </member>
        <member name="F:Emergent.Toolbench.Windows.PEUtility.PEHeader.PEHeaderDataDirectory.BoundImport">
            <summary>
            Bound import table address and size.
            </summary>
        </member>
        <member name="F:Emergent.Toolbench.Windows.PEUtility.PEHeader.PEHeaderDataDirectory.ImportAddressTable">
            <summary>
            Import address table address and size.
            </summary>
        </member>
        <member name="F:Emergent.Toolbench.Windows.PEUtility.PEHeader.PEHeaderDataDirectory.DelayImportDescriptor">
            <summary>
            Delay import descriptor address and size.
            </summary>
        </member>
        <member name="F:Emergent.Toolbench.Windows.PEUtility.PEHeader.PEHeaderDataDirectory.CLI_COM_Header">
            <summary>
            The CLR header address and size.
            </summary>
        </member>
        <member name="F:Emergent.Toolbench.Windows.PEUtility.PEHeader.PEHeaderDataDirectory.Reserved">
            <summary>
            Reserved space.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.Windows.PEUtility.PEHeader.PEHeaderDataDirectory.FromStream(Emergent.Toolbench.IO.BinaryStream)">
            <summary>
            Called when the object is being deserialized from a stream.
            </summary>
            <param name="stream">The stream to read the object information from.</param>
        </member>
        <member name="M:Emergent.Toolbench.Windows.PEUtility.PEHeader.PEHeaderDataDirectory.ToStream(Emergent.Toolbench.IO.BinaryStream)">
            <summary>
            Called when the object is being serialized to a stream.
            </summary>
            <param name="stream">The stream to write the object information to.</param>
            <exception cref="T:System.NotImplementedException">Always thrown.</exception>
            <remarks>This method is not implemented.</remarks>
        </member>
        <member name="T:Emergent.Toolbench.Windows.PEUtility.PEHeader.RVASize">
            <summary>
            Helper to manage a Relative Virtual Address (RVA) plus size.
            </summary>
        </member>
        <member name="F:Emergent.Toolbench.Windows.PEUtility.PEHeader.RVASize.RVA">
            <summary>
            The Relative Virtual Address (RVA).
            </summary>
        </member>
        <member name="F:Emergent.Toolbench.Windows.PEUtility.PEHeader.RVASize.Size">
            <summary>
            The size of content associated with the address.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.Windows.PEUtility.PEHeader.RVASize.FromStream(Emergent.Toolbench.IO.BinaryStream)">
            <summary>
            Called when the object is being deserialized from a stream.
            </summary>
            <param name="stream">The stream to read the object information from.</param>
        </member>
        <member name="M:Emergent.Toolbench.Windows.PEUtility.PEHeader.RVASize.ToStream(Emergent.Toolbench.IO.BinaryStream)">
            <summary>
            Called when the object is being serialized to a stream.
            </summary>
            <param name="stream">The stream to write the object information to.</param>
            <exception cref="T:System.NotImplementedException">Always thrown.</exception>
            <remarks>This method is not implemented.</remarks>
        </member>
        <member name="P:Emergent.Toolbench.Windows.PEUtility.PEHeader.RVASize.IsZero">
            <summary>
            Gets a value indicating whether this instance is zero.
            </summary>
            <value><c>true</c> if this instance is zero; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:Emergent.Toolbench.PluginLocalization">
            <summary>
            The plug-in localization class manages information relevant to the 
            localization of a plug-in.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.PluginLocalization.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the the plug-in localization.
            </summary>
            <param name="culture"></param>
            <param name="resourceBase"></param>
        </member>
        <member name="P:Emergent.Toolbench.PluginLocalization.FallbackCulture">
            <summary>
            Gets the fallback culture for the plug-in.
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.PluginLocalization.ResourceBase">
            <summary>
            Gets the resource base for the plug-in.
            </summary>
        </member>
        <member name="T:Emergent.Toolbench.Platform">
            <summary>
            This class is the main entry point for plug-ins to access the underlying core systems. It
            also serves as a bootstrapping class for initializing the plug-in loaders after which
            control is passed back to the application.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.Platform.StartTrace">
            <summary>
            Starts the trace log for Toolbench.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.Platform.EndTrace">
            <summary>
            Ends the trace and cleans up the file streams.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.Platform.ArchiveTrace(System.String)">
            <summary>
            Archives the trace file.
            </summary>
            <param name="archievedTrace">The archived trace path.</param>
        </member>
        <member name="M:Emergent.Toolbench.Platform.CheckForSleep(Emergent.Toolbench.Arguments)">
            <summary>
            Checks if a sleep command was passed to Toolbench. If it was, we need to sleep for the
            number of milliseconds specified. Developers will need this in situations where they are
            profiling, must attach to the process, and need execution to wait long enough for them
            to do that.
            </summary>
            <param name="commands">The command line arguments to check.</param>
        </member>
        <member name="M:Emergent.Toolbench.Platform.CheckForIgnoreLocalSettings(Emergent.Toolbench.Arguments)">
            <summary>
            Checks if an IgnoreLocalSettings command was passed to Toolbench. If it was, the
            IgnoreLocalSettings property will be set to false. Any services that use local settings
            should test the property and ignore load or save settings in the event that
            IgnoreLocalSettings is true.
            </summary>
            <param name="commands">The command line arguments to check.</param>
        </member>
        <member name="M:Emergent.Toolbench.Platform.CheckForNoRapidIteration(Emergent.Toolbench.Arguments)">
            <summary>
            Checks if a NoRapidIteration command was passed to Toolbench. If it was, then the
            NoRapidIteration property will be set to true. Any services that use rapid iteration
            should test the property and abort.
            </summary>
            <param name="commands">The command line arguments to check.</param>
        </member>
        <member name="M:Emergent.Toolbench.Platform.Run(System.Reflection.Assembly,System.String[])">
            <summary>
            Starts the bootstrapping process. The run method leverages the plug-in registry to
            search for all plug-ins and their metadata.
            </summary>
            <param name="bootStrap">The bootstrap assembly.</param>
            <param name="commandArguments">The command line arguments.</param>
            <returns>Error code to pass to application exit, 0 on success.</returns>
        </member>
        <member name="M:Emergent.Toolbench.Platform.RunInternal(System.Reflection.Assembly,Emergent.Toolbench.Arguments)">
            <summary>
            Performs the actual initialization of all the plug-ins and loads the starter plug-in.
            </summary>
            <param name="bootStrap">The assembly that is bootstrapping this process.</param>
            <param name="commands">The commands to execute.</param>
            <returns>0 if no problems occurred otherwise something else.</returns>
        </member>
        <member name="M:Emergent.Toolbench.Platform.GetExtensionPoint(System.String)">
            <summary>
            Gets the extension point matching the provided id.
            </summary>
            <param name="extensionPointId">The extension point id.</param>
            <returns>The extension point.</returns>
        </member>
        <member name="M:Emergent.Toolbench.Platform.GetExtensions(System.String)">
            <summary>
            Gets the collection of extensions that implement the extension point id.
            </summary>
            <param name="extensionPointId">The extension point.</param>
            <returns>The extensions.</returns>
        </member>
        <member name="M:Emergent.Toolbench.Platform.GetService``1">
            <summary>
            Convenience wrapper around <see cref="T:Emergent.Toolbench.IServiceProvider"/> that gets a specified service.
            </summary>
            <typeparam name="T">The service class type.</typeparam>
            <returns>The requested service.</returns>
        </member>
        <member name="M:Emergent.Toolbench.Platform.AddService(Emergent.Toolbench.IService,System.Type)">
            <summary>
            Convenience wrapper around <see cref="T:Emergent.Toolbench.IServiceProvider"/> that adds a service.
            </summary>
            <param name="service">The service to add.</param>
            <param name="serviceType">Type of the service.</param>
        </member>
        <member name="M:Emergent.Toolbench.Platform.ActivatePlugin(Emergent.Toolbench.IPluginDescriptor)">
            <summary>
            Activates a plug-in by loading the plug-in runtime assembly and ensuring that its
            dependencies are loaded in the correct order.
            </summary>
            <param name="descriptor">The plug-in descriptor.</param>
            <remarks>If the plug-in has already been activated, this method results in a no-op.
            </remarks>
        </member>
        <member name="M:Emergent.Toolbench.Platform.CreateObject``1(Emergent.Toolbench.IPluginDescriptor,System.String)">
            <summary>
            Generic factory method for creating an object given its class name. Plug-ins should use
            this method for creating objects from other plug-ins.
            </summary>
            <param name="pluginDesc">Descriptor for the plug-in containing the class.</param>
            <param name="fullClassName">Full name of the class.</param>
            <returns>A run-time instance of the specified class.</returns>        
        </member>
        <member name="M:Emergent.Toolbench.Platform.CreateObject(Emergent.Toolbench.IPluginDescriptor,System.String)">
            <summary>
            Generic factory method for creating an object given its class name. Plug-ins should use
            this method for creating objects from other plug-ins. Note: Since this method returns a
            general object it can be used even if the type is not known at compile time. Useful for
            dynamic invocation of plug-in objects.
            </summary>
            <param name="pluginDesc">Descriptor for the plug-in containing the class.</param>
            <param name="fullClassName">Full name of the class.</param>
            <returns>A run-time instance of the specified class as an object.</returns>
        </member>
        <member name="M:Emergent.Toolbench.Platform.FindType(System.String)">
            <summary>
            Generic method to resolve a Type from a class name.
            </summary>
            <param name="fullClassName">Full name of the class.</param>
            <returns>A Type object representing the specified class.</returns>   
            <remarks>This method will only locate a type in the currently loaded set of assemblies.
            </remarks>
        </member>
        <member name="M:Emergent.Toolbench.Platform.FindType(System.String,System.String)">
            <summary>
            Generic method to resolve a Type from a class name.
            </summary>
            <param name="fullClassName">Full name of the class.</param>
            <param name="classNamespace">The namespace where the class can be found.</param>
            <returns>A Type object representing the specified class.</returns>   
            <remarks>This method will only locate a type in the currently loaded set of assemblies.
            </remarks>
        </member>
        <member name="M:Emergent.Toolbench.Platform.FindType(Emergent.Toolbench.IPluginDescriptor,System.String)">
            <summary>
            This will find the type in the plug-in provided. If the plug-in has not been loaded it
            will be loaded and the the type will be looked up in the plug-in assembly.
            </summary>
            <param name="pluginDesc">Descriptor for the plug-in containing the class.</param>
            <param name="fullClassName">Full name of the class.</param>
            <returns>The runtime type information about the type contained in the assembly.
            </returns>
        </member>
        <member name="M:Emergent.Toolbench.Platform.Notify(System.String)">
            <summary>
            Sends out a notification to any registered notification handlers. Notifying plug-ins is
            a way of emitting information and allowing plug-ins to op-in to be loaded based on that
            notification. A plug-in can then perform some task in handler code.
            </summary>
            <param name="notifyId">The notification id.</param>
        </member>
        <member name="M:Emergent.Toolbench.Platform.Notify(System.String,System.String)">
            <summary>
            Sends out a notification to any registered notification handlers. Notifying plug-ins is
            a way of emitting information and allowing plug-ins to op-in to be loaded based on that
            notification. A plug-in can then perform some task in handler code.
            </summary>
            <param name="notifyId">The notification id.</param>
            <param name="parameter">The parameter associated with this notification.</param>
        </member>
        <member name="M:Emergent.Toolbench.Platform.Notify(System.String,System.String,System.Object)">
            <summary>
            Sends out a notification to any registered notification handlers. Notifying plug-ins is
            a way of emitting information and allowing plug-ins to op-in to be loaded based on that
            notification. A plug-in can then perform some task in handler code.
            </summary>
            <param name="notifyId">The notification id.</param>
            <param name="parameter">The parameter associated with this notification.</param>
            <param name="sender">The sender of the notification.</param>
        </member>
        <member name="M:Emergent.Toolbench.Platform.Notify(System.String,System.String,System.Object,System.EventArgs)">
            <summary>
            Sends out a notification to any registered notification handlers. Notifying plug-ins is
            a way of emitting information and allowing plug-ins to op-in to be loaded based on that
            notification. A plug-in can then perform some task in handler code.
            </summary>
            <param name="notifyId">The notification id.</param>
            <param name="parameter">The parameter associated with this notification.</param>
            <param name="sender">The sender of the notification.</param>
            <param name="e">The notification arguments.</param>
        </member>
        <member name="M:Emergent.Toolbench.Platform.CaptureCrash(System.Exception,System.Object)">
            <summary>
            Reports a crash that occurred while Toolbench was running. This does not mean shutdown
            of Toolbench; however, it will cause Toolbench to notify any crash report extensions, 
            giving them a chance to capture information about the crash. It will also cause them to
            perform any reporting of the crash upon exiting Toolbench.
            </summary>
            <param name="ex">The exception information associated with the crash.</param>
            <param name="data">The data field is just a blob of data the the reporter may want to 
            report to a handler.</param>
        </member>
        <member name="M:Emergent.Toolbench.Platform.InitializeThreadCulture">
            <summary>
            Initializes the current thread culture to be the current application-wide culture
            assigned to Toolbench.
            </summary>
            <remarks>Should be called first in any threaded operation.</remarks>
        </member>
        <member name="M:Emergent.Toolbench.Platform.RunExternalCommand(System.String[])">
            <summary>
            Utility function for passing data from external processes. Other instances of Toolbench
            may decide to pass their command lines to the running instance via this function. The
            runnable plug-in receives an <see cref="M:Emergent.Toolbench.IRunnable.OnExternalCommand(Emergent.Toolbench.Arguments)"/> notification.
            </summary>
            <param name="args">Command line arguments passed from the other process.</param>
        </member>
        <member name="F:Emergent.Toolbench.Platform.m_runnable">
            <summary>
            Reference to the "runnable plug-in," the entry point for the Toolbench application.
            </summary>
        </member>
        <member name="F:Emergent.Toolbench.Platform.m_runnablePluginLock">
            <summary>
            Empty object used to manage access to the runnable plug-in.
            </summary>
        </member>
        <member name="E:Emergent.Toolbench.Platform.PluginActivated">
            <summary>
            Pass-through event for plug-in activation.
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.Platform.PluginRegistry">
            <summary>
            Gets a reference to the plug-in registry interface.
            </summary>
            <value>The plug-in registry interface.</value>
        </member>
        <member name="P:Emergent.Toolbench.Platform.Resources">
            <summary>
            Gets the platform resources, allowing access to the satellite assemblies of a plug-in
            without loading the plug-in.
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.Platform.Settings">
            <summary>
            Gets the platform settings.
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.Platform.ExtensionRegistry">
            <summary>
            Gets a reference to the extension registry.
            </summary>
            <value>The extension registry interface.</value>
        </member>
        <member name="P:Emergent.Toolbench.Platform.ServiceProvider">
            <summary>
            Gets a reference to the service provider.
            </summary>
            <value>The service provider.</value>
        </member>
        <member name="P:Emergent.Toolbench.Platform.ExecutionPath">
            <summary>
            Gets the execution path of the bootloader.
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.Platform.ExecutionFile">
            <summary>
            Gets the execution bootloader file name.
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.Platform.Version">
            <summary>
            Gets the version information for Toolbench.
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.Platform.Status">
            <summary>
            Gets the current status of the platform.
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.Platform.IgnoreLocalSettings">
            <summary>
            Checks whether or not local settings should be ignored.
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.Platform.NoRapidIteration">
            <summary>
            Checks whether or not local settings should be ignored.
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.Platform.LocalSettingsFolder">
            <summary>
            Gets the full path to the local settings folder that is used to store user settings.
            </summary>
            <returns>A full path to the system settings folder.</returns>
        </member>
        <member name="P:Emergent.Toolbench.Platform.CommonSettingsFolder">
            <summary>
            Gets the full path to the common settings folder that is used to store settings used by
            all users.
            </summary>
            <returns>A full path to the system settings folder.</returns>
        </member>
        <member name="P:Emergent.Toolbench.Platform.Culture">
            <summary>
            Gets the culture that should be used for all file operations and anything related to
            data that is not displayed in the UI.  This culture should not vary from user to user
            as you do not want to invalidate data coming from another users machine with a 
            different culture.
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.Platform.Thread">
            <summary>
            Gets the main thread used by Toolbench. This should be the same thread used by the UI.
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.Platform.Dispatcher">
            <summary>
            Gets the main thread dispatcher used by Toolbench. This should be the same dispatcher 
            used by the UI.
            </summary>
        </member>
        <member name="T:Emergent.Toolbench.Platform.AssertTraceListener">
            <summary>
            This trace listener will just launch asserts, but will not write to a file or the 
            console.
            </summary>
        </member>
        <member name="T:Emergent.Toolbench.IPluginRegistry">
            <summary>
            Defines the interface that a plug-in registry must implement. Note, the
            plug-in registry itself is a completely internal implementation. Only
            the methods in this interface are accessible by clients.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.IPluginRegistry.GetPluginDescriptor(System.String)">
            <summary>
            Gets a plug-in descriptor with the specified unique identifier.
            </summary>
            <param name="uniqueID">The unique identifier string.</param>
            <returns>A valid plug-in descriptor or null if a plug-in 
                descriptor of the specified id does not exist.
            </returns>
            <remarks>If there are multiple versions of the same plug-in
                descriptor, the first one located will be returned.
            </remarks>
        </member>
        <member name="M:Emergent.Toolbench.IPluginRegistry.GetPluginDescriptor(System.Type)">
            <summary>
            Gets the first plugin descriptor that has an associated assembly containing the 
            specified type.
            </summary>
            <param name="objectType">The type to search for plugin for.</param>
            <returns>The plugin descriptor.</returns>
        </member>
        <member name="M:Emergent.Toolbench.IPluginRegistry.GetPluginDescriptor(System.Reflection.Assembly)">
            <summary>
            Finds the plug-in descriptor that describes the plug-in implemented 
            in the specified assembly.
            </summary>
            <param name="assembly">Plug-in assembly.</param>
            <returns>A valid plug-in descriptor or null if the specified 
                assembly is unknown to the platform as a plug-in.
            </returns>
        </member>
        <member name="M:Emergent.Toolbench.IPluginRegistry.GetPluginDescriptor(System.Reflection.AssemblyName)">
            <summary>
            Finds a plugin descriptor based on the name of the assembly.
            </summary>
            <param name="assemblyName">The assembly name.</param>
            <returns>The plugin descriptor or <value>null</value> if one could not be 
            found.</returns>
        </member>
        <member name="M:Emergent.Toolbench.IPluginRegistry.GetPluginDescriptors(System.String)">
            <summary>
            Gets all plug-in descriptor versions matching the specified unique
            identifier.
            </summary>
            <param name="uniqueID">The unique identifier string.</param>
            <returns>A readonly collection of plug-in descriptors, or null if no plug-in 
                descriptors are found matching the specified unique id.
            </returns>
        </member>
        <member name="M:Emergent.Toolbench.IPluginRegistry.GetPluginDescriptor(System.String,System.Version)">
            <summary>
            Gets the plugin descriptor matching the specified unique identifier
            and version.
            </summary>
            <param name="uniqueID">The unique identifier string.</param>
            <param name="version">The plug-in version.</param>
            <returns>A valid plug-in descriptor matching the specified query or
                null such a plug-in descriptor does not exist.
            </returns>
        </member>
        <member name="P:Emergent.Toolbench.IPluginRegistry.PluginDescriptors">
            <summary>
            Gets all plug-in descriptors in the registry.
            </summary>
            <returns>An array of plug-in descriptors. If there are not any
                plug-ins in the registry an empty array is returned.
            </returns>
        </member>
        <member name="T:Emergent.Toolbench.IExtensionRegistry">
            <summary>
            This interface defines a means by which clients can explore the 
            extension registry. The extension registry stores a master list of the 
            extensions and extension points currently known by the run-time.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.IExtensionRegistry.GetExtensionPoint(System.String)">
            <summary>
            Gets an extension point with the specified unique identifier.
            </summary>
            <param name="uniqueID">The unique identifier where the unique 
                identifier is unique within the registry. This is usually a 
                dot-delimited name containing the plug-in plus the extension
                point name.
            </param>
            <returns>An extension point or null if not found.</returns>
        </member>
        <member name="M:Emergent.Toolbench.IExtensionRegistry.GetExtension(System.String)">
            <summary>
            Gets an extension with the specified unique identifier.
            </summary>
            <param name="uniqueID">The unique identifier where the unique 
                identifier is unique within the registry. This is usually a 
                dot-delimited name containing the plug-in plus the extension
                name.
            </param>
            <returns>An extension or null if not found.</returns>
        </member>
        <member name="P:Emergent.Toolbench.IExtensionRegistry.ExtensionPoints">
            <summary>
            Gets all the extension points in the registry.
            </summary>
            <returns>An array of the extension points. If no extension points
                are currently in the registry an empty array is returned.
            </returns>
        </member>
        <member name="P:Emergent.Toolbench.IExtensionRegistry.Extensions">
            <summary>
            Gets all the extension in the registry.
            </summary>
            <returns>An array of the extensions. If no extension are currently 
                in the registry an empty array is returned.
            </returns>
        </member>
        <member name="T:Emergent.Toolbench.IExitToolbenchHandler">
            <summary>
            This interface must be used for extensions that wish to perform some
            sort of action when the toolbench platform is terminated.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.IExitToolbenchHandler.Execute">
            <summary>
            Executes an action just before the <see cref="T:Emergent.Toolbench.Platform"/>
            terminates.
            </summary>
        </member>
        <member name="T:Emergent.Toolbench.IO.FileTransaction">
            <summary>
            The file transaction class allows you to safely write out a bunch of files to a temporary
            destination and handles all the logic for committing the files or not.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.IO.FileTransaction.#ctor(System.String)">
            <summary>
            Creates a new instance of the file transaction class.
            </summary>
            <param name="application">The name of the application or sub-tool.</param>
        </member>
        <member name="M:Emergent.Toolbench.IO.FileTransaction.#ctor(System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Creates a new instance of the file transaction class with a list of files to back up.
            </summary>
            <param name="application">The name of the application or sub-tool.</param>
            <param name="files">The files that need to be backed up.</param>
        </member>
        <member name="M:Emergent.Toolbench.IO.FileTransaction.BackupFile(System.String)">
            <summary>
            Backs up the provided file.
            </summary>
            <param name="file">The file to backup.</param>
        </member>
        <member name="M:Emergent.Toolbench.IO.FileTransaction.GetNextTempFileName">
            <summary>
            Generates the next unique temp file name.
            </summary>
            <returns>A new temp file.</returns>
        </member>
        <member name="M:Emergent.Toolbench.IO.FileTransaction.Dispose">
            <summary>
            Disposes the file transaction. If it hasn't been rolled back it will be committed.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.IO.FileTransaction.Commit">
            <summary>
            Commits the transaction by moving the temporary files to the final destination.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.IO.FileTransaction.Rollback">
            <summary>
            Rolls back the transaction so that the newly written files do not replace the old files.
            It also attempts to clean up the new files.
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.IO.FileTransaction.HasRolledBack">
            <summary>
            Gets a value indicating if the transaction has been rolled-back.
            </summary>
            <value><c>true</c> if this instance has been rolled back; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:Emergent.Toolbench.IPlatformResources">
            <summary>
            The <see cref="T:Emergent.Toolbench.IPlatformResources"/> class manages resources in plug-ins. It is used to load
            satellite assemblies in the plug-ins to display localized information about the plug-ins so
            that the plug-ins themselves do not have to be loaded.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.IPlatformResources.GetResources(Emergent.Toolbench.IPluginDescriptor)">
            <summary>
            Gets the resource set for a plug-in based on the current culture.
            </summary>
            <param name="plugin">The plug-in whose resource to get.</param>
            <returns>The resource set.</returns>
        </member>
        <member name="M:Emergent.Toolbench.IPlatformResources.GetResources(Emergent.Toolbench.IPluginDescriptor,System.Globalization.CultureInfo)">
            <summary>
            Gets the resource set for a plug-in based on the provided culture. If the plug-in does
            not support that culture the plug-in's backup culture will be used.
            </summary>
            <param name="plugin">The plug-in whose resource to get.</param>
            <param name="culture">The culture to use.</param>
            <returns>The resource set.</returns>
        </member>
        <member name="M:Emergent.Toolbench.IPlatformResources.GetString(Emergent.Toolbench.IPluginDescriptor,System.String)">
            <summary>
            Looks up a string in a plug-in's resources based on the current culture. If the resource
            name is not found, it will attempt to locate the string in the fallback culture resource
            table of the plug-in. If that fails, <value>null</value> is returned.
            </summary>
            <param name="plugin">The plug-in to search in.</param>
            <param name="name">The resource name.</param>
            <returns>The resource string if it can be found.</returns>
        </member>
        <member name="M:Emergent.Toolbench.IPlatformResources.GetString(Emergent.Toolbench.IPluginDescriptor,System.String,System.Boolean)">
            <summary>
            Looks up a string in a plug-in's resources based on the current culture. If the resource
            name is not found, it will attempt to locate the string in the fallback culture resource
            table of the plug-in. If that fails, <value>null</value> is returned.
            </summary>
            <param name="plugin">The plug-in to search in.</param>
            <param name="name">The resource name.</param>
            <param name="ignoreCase">Ignore the case of the resource name?</param>
            <returns>The resource string if it can be found.</returns>
        </member>
        <member name="M:Emergent.Toolbench.IPlatformResources.Get``1(Emergent.Toolbench.IPluginDescriptor,System.String)">
            <summary>
            Looks up an object in a plug-in's resources based on the current culture. If the
            resource name is not found, it will attempt to locate the object in the fallback culture
            resource table of the plug-in. If that fails, <value>null</value> is returned.
            </summary>
            <typeparam name="T">The type to return.</typeparam>
            <param name="plugin">The plug-in to search in.</param>
            <param name="name">The resource name.</param>
            <returns>The resource if it can be found.</returns>
        </member>
        <member name="M:Emergent.Toolbench.IPlatformResources.Get``1(Emergent.Toolbench.IPluginDescriptor,System.String,System.Boolean)">
            <summary>
            Looks up an object in a plug-in's resources based on the current culture. If the
            resource name is not found, it will attempt to locate the object in the fallback culture
            resource table of the plug-in. If that fails, <value>null</value> is returned.
            </summary>
            <typeparam name="T">The type to return.</typeparam>
            <param name="plugin">The plug-in to search in.</param>
            <param name="name">The resource name.</param>
            <param name="ignoreCase">Ignore the case of the resource name?</param>
            <returns>The resource if it can be found.</returns>
        </member>
        <member name="P:Emergent.Toolbench.IPlatformResources.CurrentCulture">
            <summary>
            Gets or sets the default culture used when looking up resource information from a
            localized source.
            </summary>
        </member>
        <member name="T:Emergent.Toolbench.IEnumerableEx">
            <summary>
            Extension methods for IEnumerable.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.IEnumerableEx.Append``1(System.Collections.Generic.IEnumerable{``0},``0)">
            <summary>
            Appends a single item to the end of an enumerable source.
            </summary>
            <typeparam name="TSource">The type of the source.</typeparam>
            <param name="source">The enumerable source.</param>
            <param name="obj">The object to append.</param>
            <returns>The modified enumeration.</returns>
        </member>
        <member name="M:Emergent.Toolbench.IEnumerableEx.Prepend``1(System.Collections.Generic.IEnumerable{``0},``0)">
            <summary>
            Prepends a single item to the front of an enumerable source.
            </summary>
            <typeparam name="TSource">The type of the source.</typeparam>
            <param name="source">The enumerable source.</param>
            <param name="obj">The object to prepend.</param>
            <returns>The modified enumeration.</returns>
        </member>
        <member name="M:Emergent.Toolbench.IEnumerableEx.Distinct``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0,System.Boolean},System.Func{``0,System.Int32})">
            <summary>
            Finds the distinct elements of an enumerable source.
            </summary>
            <typeparam name="TSource">The type of the source.</typeparam>
            <param name="source">The enumerable source.</param>
            <param name="equalsPredicate">The equality predicate.</param>
            <param name="hashPredicate">The hash predicate.</param>
            <returns>The distinct elements.</returns>
        </member>
        <member name="M:Emergent.Toolbench.IEnumerableEx.PredicateEqualityComparer`1.#ctor(System.Func{`0,`0,System.Boolean},System.Func{`0,System.Int32})">
            <summary>
            Initializes a new instance of the <see cref="T:Emergent.Toolbench.IEnumerableEx.PredicateEqualityComparer`1"/>
            class.
            </summary>
            <param name="equalsPredicate">The equality predicate.</param>
            <param name="hashPredicate">The hash predicate.</param>
        </member>
        <member name="M:Emergent.Toolbench.IEnumerableEx.PredicateEqualityComparer`1.Equals(`0,`0)">
            <summary>
            Determines whether the specified objects are equal.
            </summary>
            <param name="x">The first object of type <paramref name="T"/> to compare.</param>
            <param name="y">The second object of type <paramref name="T"/> to compare.</param>
            <returns>true if the specified objects are equal; otherwise, false.</returns>
        </member>
        <member name="M:Emergent.Toolbench.IEnumerableEx.PredicateEqualityComparer`1.GetHashCode(`0)">
            <summary>
            Returns a hash code for the specified object.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> for which a hash code is to be
            returned.</param>
            <returns>A hash code for the specified object.</returns>
        </member>
        <member name="T:Emergent.Toolbench.Collections.ReadOnlyDictionary`2">
            <summary>
            A read-only dictionary.
            </summary>
            <typeparam name="TKey">The key type.</typeparam>
            <typeparam name="TValue">The value type.</typeparam>
        </member>
        <member name="M:Emergent.Toolbench.Collections.ReadOnlyDictionary`2.#ctor(System.Collections.Generic.IDictionary{`0,`1})">
            <summary>
            Initializes a new instance of the <see cref="T:Emergent.Toolbench.Collections.ReadOnlyDictionary`2"/>
            class.
            </summary>
            <param name="dictionary">The dictionary to wrap.</param>
        </member>
        <member name="M:Emergent.Toolbench.Collections.ReadOnlyDictionary`2.Add(`0,`1)">
            <summary>
            Adds an element with the provided key and value to the dictionary.
            </summary>
            <param name="key">The object to use as the key of the element to add.</param>
            <param name="value">The object to use as the value of the element to add.</param>
            <exception cref="T:System.NotSupportedException">Always thrown.</exception>
        </member>
        <member name="M:Emergent.Toolbench.Collections.ReadOnlyDictionary`2.ContainsKey(`0)">
            <summary>
            Determines whether the dictionary contains an element with the specified key.
            </summary>
            <param name="key">The key to locate in the dictionary.</param>
            <returns>true if the dictionary contains an element with the key; otherwise, false.
            </returns>
        </member>
        <member name="M:Emergent.Toolbench.Collections.ReadOnlyDictionary`2.Remove(`0)">
            <summary>
            Removes the element with the specified key from the dictionary.
            </summary>
            <param name="key">The key of the element to remove.</param>
            <returns>true if the element is successfully removed; otherwise, false. This method also
            returns false if <paramref name="key"/> was not found in the original dictionary.
            </returns>
            <exception cref="T:System.NotSupportedException">Always thrown.</exception>
        </member>
        <member name="M:Emergent.Toolbench.Collections.ReadOnlyDictionary`2.TryGetValue(`0,`1@)">
            <summary>
            Gets the value associated with the specified key.
            </summary>
            <param name="key">The key whose value to get.</param>
            <param name="value">When this method returns, the value associated with the specified
            key, if the key is found; otherwise, the default value for the type of the
            <paramref name="value"/> parameter. This parameter is passed uninitialized.</param>
            <returns>true if the dictionary contains an element with the specified key; otherwise,
            false.</returns>
        </member>
        <member name="M:Emergent.Toolbench.Collections.ReadOnlyDictionary`2.Add(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Adds an item to the collection.
            </summary>
            <param name="item">The object to add to the collection.</param>
            <exception cref="T:System.NotSupportedException">Always thrown.</exception>
        </member>
        <member name="M:Emergent.Toolbench.Collections.ReadOnlyDictionary`2.Clear">
            <summary>
            Removes all items from the collection.
            </summary>
            <exception cref="T:System.NotSupportedException">Always thrown.</exception>
        </member>
        <member name="M:Emergent.Toolbench.Collections.ReadOnlyDictionary`2.Contains(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Determines whether the collection contains a specific value.
            </summary>
            <param name="item">The object to locate in the collection.</param>
            <returns>true if <paramref name="item"/> is found in the collection; otherwise, false.
            </returns>
        </member>
        <member name="M:Emergent.Toolbench.Collections.ReadOnlyDictionary`2.CopyTo(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Int32)">
            <summary>
            Copies the elements of the collection to an array, starting at a particular index.
            </summary>
            <param name="array">The one-dimensional array that is the destination of the elements
            copied from the collection. The array must have zero-based indexing.</param>
            <param name="arrayIndex">The zero-based index in <paramref name="array"/> at which
            copying begins.</param>
        </member>
        <member name="M:Emergent.Toolbench.Collections.ReadOnlyDictionary`2.Remove(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Removes the first occurrence of a specific object from the collection.
            </summary>
            <param name="item">The object to remove from the collection.</param>
            <returns>true if <paramref name="item"/> was successfully removed from the collection;
            otherwise, false. This method also returns false if <paramref name="item"/> is not found
            in the original collection.</returns>
            <exception cref="T:System.NotSupportedException">Always thrown.</exception>
        </member>
        <member name="M:Emergent.Toolbench.Collections.ReadOnlyDictionary`2.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>An enumerator that can be used to iterate through the collection.</returns>
        </member>
        <member name="M:Emergent.Toolbench.Collections.ReadOnlyDictionary`2.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>An enumerator that can be used to iterate through the collection.</returns>
        </member>
        <member name="M:Emergent.Toolbench.Collections.ReadOnlyDictionary`2.Add(System.Object,System.Object)">
            <summary>
            Adds an element with the provided key and value to the dictionary.
            </summary>
            <param name="key">The <see cref="T:System.Object"/> to use as the key of the element to
            add.</param>
            <param name="value">The <see cref="T:System.Object"/> to use as the value of the element
            to add.</param>
            <exception cref="T:System.NotSupportedException">Always thrown.</exception>
        </member>
        <member name="M:Emergent.Toolbench.Collections.ReadOnlyDictionary`2.Contains(System.Object)">
            <summary>
            Determines whether the dictionary contains an element with the specified key.
            </summary>
            <param name="key">The key to locate in the dictionary.</param>
            <returns>true if the dictionary contains an element with the key; otherwise, false.
            </returns>
        </member>
        <member name="M:Emergent.Toolbench.Collections.ReadOnlyDictionary`2.System#Collections#IDictionary#GetEnumerator">
            <summary>
            Returns an <see cref="T:System.Collections.IDictionaryEnumerator"/> object for the
            dictionary.
            </summary>
            <returns>An <see cref="T:System.Collections.IDictionaryEnumerator"/> object for the
            dictionary.</returns>
        </member>
        <member name="M:Emergent.Toolbench.Collections.ReadOnlyDictionary`2.Remove(System.Object)">
            <summary>
            Removes the element with the specified key from the dictionary.
            </summary>
            <param name="key">The key of the element to remove.</param>
            <exception cref="T:System.NotSupportedException">Always thrown.</exception>
        </member>
        <member name="M:Emergent.Toolbench.Collections.ReadOnlyDictionary`2.CopyTo(System.Array,System.Int32)">
            <summary>
            Copies the elements of the collection to an array, starting at a particular index.
            </summary>
            <param name="array">The one-dimensional array that is the destination of the elements
            copied from the collection. The array must have zero-based indexing.</param>
            <param name="index">The zero-based index in <paramref name="array"/> at which copying
            begins.</param>
        </member>
        <member name="M:Emergent.Toolbench.Collections.ReadOnlyDictionary`2.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo"/> with the data
            needed to serialize the target object.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> to
            populate with data.</param>
            <param name="context">The destination (see
            <see cref="T:System.Runtime.Serialization.StreamingContext"/>) for this serialization.
            </param>
        </member>
        <member name="M:Emergent.Toolbench.Collections.ReadOnlyDictionary`2.OnDeserialization(System.Object)">
            <summary>
            Runs when the entire object graph has been deserialized.
            </summary>
            <param name="sender">The object that initiated the callback.</param>
        </member>
        <member name="P:Emergent.Toolbench.Collections.ReadOnlyDictionary`2.Keys">
            <summary>
            Gets a collection containing the keys of the dictionary.
            </summary>
            <returns>A collection containing the keys of the dictionary.</returns>
        </member>
        <member name="P:Emergent.Toolbench.Collections.ReadOnlyDictionary`2.Values">
            <summary>
            Gets a collection containing the values in the dictionary.
            </summary>
            <returns>A collection containing the values in the dictionary.</returns>
        </member>
        <member name="P:Emergent.Toolbench.Collections.ReadOnlyDictionary`2.Item(`0)">
            <summary>
            Gets the value for the specified key.
            </summary>
            <returns>The value for the specified key.</returns>
            <exception cref="T:System.NotSupportedException">Always thrown on set.</exception>
        </member>
        <member name="P:Emergent.Toolbench.Collections.ReadOnlyDictionary`2.Count">
            <summary>
            Gets the number of elements contained in the collection.
            </summary>
            <returns>The number of elements contained in the collection.</returns>
        </member>
        <member name="P:Emergent.Toolbench.Collections.ReadOnlyDictionary`2.IsReadOnly">
            <summary>
            Gets a value indicating whether the collection is read-only.
            </summary>
            <returns>true, indicating that the collection is read-only.</returns>
        </member>
        <member name="P:Emergent.Toolbench.Collections.ReadOnlyDictionary`2.IsFixedSize">
            <summary>
            Gets a value indicating whether the dictionary has a fixed size.
            </summary>
            <returns>true, indicating that the dictionary has a fixed size.</returns>
        </member>
        <member name="P:Emergent.Toolbench.Collections.ReadOnlyDictionary`2.System#Collections#IDictionary#Keys">
            <summary>
            Gets a collection containing the keys of the dictionary.
            </summary>
            <returns>A collection containing the keys of the dictionary.</returns>
        </member>
        <member name="P:Emergent.Toolbench.Collections.ReadOnlyDictionary`2.System#Collections#IDictionary#Values">
            <summary>
            Gets a collection containing the values in the dictionary.
            </summary>
            <returns>A collection containing the values in the dictionary.</returns>
        </member>
        <member name="P:Emergent.Toolbench.Collections.ReadOnlyDictionary`2.Item(System.Object)">
            <summary>
            Gets the value for the specified key.
            </summary>
            <returns>The value for the specified key.</returns>
            <exception cref="T:System.NotSupportedException">Always thrown on set.</exception>
        </member>
        <member name="P:Emergent.Toolbench.Collections.ReadOnlyDictionary`2.IsSynchronized">
            <summary>
            Gets a value indicating whether access to the collection is synchronized (thread safe).
            </summary>
            <returns>true if access to the collection is synchronized (thread safe); otherwise,
            false.</returns>
        </member>
        <member name="P:Emergent.Toolbench.Collections.ReadOnlyDictionary`2.SyncRoot">
            <summary>
            Gets an object that can be used to synchronize access to the collection.
            </summary>
            <returns>An object that can be used to synchronize access to the collection.</returns>
        </member>
        <member name="T:Emergent.Toolbench.Collections.DispatchingObservableCollection`1">
            <summary>
            A collection that provides notifications on changes via a dispatcher.
            </summary>
            <typeparam name="T">The type stored in the collection.</typeparam>
        </member>
        <member name="M:Emergent.Toolbench.Collections.DispatchingObservableCollection`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Emergent.Toolbench.Collections.DispatchingObservableCollection`1"/>
            class.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.Collections.DispatchingObservableCollection`1.#ctor(System.Windows.Threading.Dispatcher)">
            <summary>
            Initializes a new instance of the <see cref="T:Emergent.Toolbench.Collections.DispatchingObservableCollection`1"/>
            class.
            </summary>
            <param name="dispatcher">The dispatcher to be used by the collection.</param>
        </member>
        <member name="M:Emergent.Toolbench.Collections.DispatchingObservableCollection`1.OnCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Raises the CollectionChanged event using the dispatcher.
            </summary>
            <param name="e">Arguments of the event being raised.</param>
        </member>
        <member name="M:Emergent.Toolbench.Collections.DispatchingObservableCollection`1.OnPropertyChanged(System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            Raises the PropertyChanged event using the dispatcher.
            </summary>
            <param name="e">Arguments of the event being raised.</param>
        </member>
        <member name="E:Emergent.Toolbench.Collections.DispatchingObservableCollection`1.CollectionChanged">
            <summary>
            Occurs when an item is added, removed, changed, moved, or the entire list is refreshed.
            </summary>
        </member>
        <member name="E:Emergent.Toolbench.Collections.DispatchingObservableCollection`1.PropertyChanged">
            <summary>
            Occurs when a property value changes.
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.Collections.DispatchingObservableCollection`1.Dispatcher">
            <summary>
            Gets or sets the dispatcher.
            </summary>
            <value>The dispatcher.</value>
        </member>
        <member name="T:Emergent.Toolbench.Windows.PEUtility.PEFile">
            <summary>
            Utility for extracting the attributes of a portable executable (PE) file.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.Windows.PEUtility.PEFile.FromStream(Emergent.Toolbench.IO.BinaryStream)">
            <summary>
            Called when the object is being deserialized from a stream.
            </summary>
            <param name="stream">The stream to read the object information from.</param>
        </member>
        <member name="M:Emergent.Toolbench.Windows.PEUtility.PEFile.RVAToPointer(System.UInt32)">
            <summary>
            Converts a relative virtual address to a pointer.
            </summary>
            <param name="RVA">The relative virtual address.</param>
            <returns>The pointer.</returns>
        </member>
        <member name="M:Emergent.Toolbench.Windows.PEUtility.PEFile.ToStream(Emergent.Toolbench.IO.BinaryStream)">
            <summary>
            Called when the object is being serialized to a stream.
            </summary>
            <param name="stream">The stream to write the object information to.</param>
            <exception cref="T:System.NotImplementedException">Always thrown.</exception>
        </member>
        <member name="P:Emergent.Toolbench.Windows.PEUtility.PEFile.PEHeader">
            <summary>
            Gets or sets the PE header.
            </summary>
            <value>The PE header.</value>
        </member>
        <member name="P:Emergent.Toolbench.Windows.PEUtility.PEFile.Sections">
            <summary>
            Gets or sets the section headers.
            </summary>
            <value>The section headers.</value>
        </member>
        <member name="P:Emergent.Toolbench.Windows.PEUtility.PEFile.ImportTable">
            <summary>
            Gets or sets the import table.
            </summary>
            <value>The import table.</value>
        </member>
        <member name="T:Emergent.Toolbench.PluginManifest">
            <summary>
            This class is a helper class for the plug-in registry and handles the
            parsing of the plug-in XML manifest files.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.PluginManifest.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Emergent.Toolbench.PluginManifest"/> 
            class.
            </summary>
            <param name="fullPath">Absolute path name to the plugin manifest.
            </param>
        </member>
        <member name="M:Emergent.Toolbench.PluginManifest.Preparse(System.Xml.Schema.XmlSchemaSet)">
            <summary>
            Parses the manifest file and extracts information into properties
            of this manifest class.
            </summary>
            <param name="xmlSchemaSet">Set of schemas used to validate the 
                manifest file.
            </param>
            <returns>Boolean indicating if the plugin was successfully 
            parsed.</returns>
        </member>
        <member name="M:Emergent.Toolbench.PluginManifest.Parse(System.Xml.Schema.XmlSchemaSet)">
            <summary>
            Parses the manifest file and extracts information into properties
            of this manifest class.
            </summary>
            <param name="xmlSchemaSet">Set of schemas used to validate the 
                manifest file.
            </param>
            <returns>Boolean indicating if the plugin was successfully 
            parsed.</returns>
        </member>
        <member name="M:Emergent.Toolbench.PluginManifest.PluginXmlValidationHandler(System.Object,System.Xml.Schema.ValidationEventArgs)">
            <summary>
            Handles errors encountered during validation of the manifest.
            </summary>
            <param name="sender">The sender.</param>
            <param name="args">The 
                <see cref="T:System.Xml.Schema.ValidationEventArgs"/> 
                instance containing the event data.
            </param>
            <exception cref="T:Emergent.Toolbench.PluginXmlValidationException">If the severity
                level is not warning, then the exception will be thrown.
            </exception>
        </member>
        <member name="M:Emergent.Toolbench.PluginManifest.ParseRootElement">
            <summary>
            Parses the root element in the plug-in manifest. Note that 
            validation has already occurred at load time via the Schema files.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.PluginManifest.ParseRuntime">
            <summary>
            Parses the runtime. Note that validation has already
            occurred at load time via the Schema files.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.PluginManifest.ParseLocalization">
            <summary>
            Parses the localization.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.PluginManifest.ParseDependencies">
            <summary>
            Parses the dependencies.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.PluginManifest.ParseExtensions">
            <summary>
            Parses the extensions.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.PluginManifest.ValidateExtensionXml(System.Xml.XmlNode,Emergent.Toolbench.IExtensionPoint)">
            <summary>
            Validates the xml fragment of an extension to ensure it conforms
            to the schema specified by the extension point.
            </summary>
            <param name="extNode">The extension xml node.</param>
            <param name="extension">The extension point to validate with.</param>
            <returns><c>true</c> if the xml is valid, otherwise; <c>false</c>.
            </returns>
        </member>
        <member name="M:Emergent.Toolbench.PluginManifest.ParseExtensionPoints">
            <summary>
            Parses the extension points.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.PluginManifest.BuildElementData(System.Xml.XmlNode)">
            <summary>
            Recursively builds an element data structure from the specified XML 
            node.
            </summary>
            <param name="customChild">The XML node with which to construct a
                matching element data instance.</param>
            <returns></returns>
        </member>
        <member name="P:Emergent.Toolbench.PluginManifest.PluginDescriptor">
            <summary>
            Gets the plugin descriptor generated from the XML manifest.
            </summary>
            <value>The plugin descriptor.</value>
        </member>
        <member name="T:Emergent.Toolbench.PluginManifest.XmlTextWriterNamespaceless">
            <summary>
            Writes XML without the incoming namespace, so that XML fragments
            in a document can be separated from the documents primary 
            namespace.
            </summary>
        </member>
        <member name="T:Emergent.Toolbench.IO.DirectoryEx">
            <summary>
            A utility class for checking various information about a directory.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.IO.DirectoryEx.Exists(System.String)">
            <summary>
            This function checks if a directory exists with a timeout. So if the directory is
            located on a network share or some other location where the platform could potentially
            take a very long time to timeout, you can forcefully place a constraint on how long the
            check should take.
            </summary>
            <param name="directory">The directory path.</param>
            <returns><c>true</c> if the directory exists; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Emergent.Toolbench.IO.DirectoryEx.Exists(System.String,System.Int32)">
            <summary>
            This function checks if a directory exists with a timeout. So if the directory is
            located on a network share or some other location where the platform could potentially
            take a very long time to timeout, you can forcefully place a constraint on how long the
            check should take.
            </summary>
            <param name="directory">The directory path.</param>
            <param name="millisecondTimeout">The timeout in milliseconds.</param>
            <returns><c>true</c> if the directory exists; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Emergent.Toolbench.IO.DirectoryEx.Copy(System.String,System.String)">
            <summary>
            Copies all the files in the <paramref name="sourceDirectory"/> to the 
            <paramref name="destDirectory"/>.
            </summary>
            <param name="sourceDirectory">The source directory.</param>
            <param name="destDirectory">The destination directory.</param>
        </member>
        <member name="M:Emergent.Toolbench.IO.DirectoryEx.Copy(System.String,System.String,System.Boolean)">
            <summary>
            Copies all the files in the <paramref name="sourceDirectory"/> to the 
            <paramref name="destDirectory"/>.
            </summary>
            <param name="sourceDirectory">The source directory.</param>
            <param name="destDirectory">The destination directory.</param>
            <param name="overwrite"><c>True</c> to overwrite the destination file if one is found.
            </param>
        </member>
        <member name="P:Emergent.Toolbench.IO.DirectoryEx.DirectoryTimeout">
            <summary>
            Gets or sets the directory timeout.
            </summary>
            <value>The directory timeout in milliseconds.</value>
        </member>
        <member name="T:Emergent.Toolbench.IO.DirectoryEx.DirectoryExistsThread">
            <summary>
            This class is essentially a threaded functor whose job is to contain all the information
            needed by the thread that is checking if a directory exists. Though it is not
            asynchronous, when called, the main thread waits to join the spawned thread, and if it
            does not within the timeout, the new thread is aborted.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.IO.DirectoryEx.DirectoryExistsThread.DirectoryExists(System.String,System.Int32)">
            <summary>
            Checks if a directory exists in a threaded, but blocked fashion so that the thread
            can be aborted.
            </summary>
            <param name="directory">The directory path.</param>
            <param name="millisecondTimeout">The timeout in milliseconds.</param>
            <returns><c>true</c> if the directory exists; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Emergent.Toolbench.IO.DirectoryEx.DirectoryExistsThread.InternalDirectoryExists">
            <summary>
            Called by the new thread to check if the directory exists.
            </summary>
        </member>
        <member name="T:Emergent.Toolbench.IRunnable">
            <summary>
            This interface defines a "runnable" extension. Typically, this is the
            entry point for a single plug-in to assume an application role in the
            system where an application could be a .NET Forms based UI or a console
            application.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.IRunnable.Run(Emergent.Toolbench.Arguments)">
            <summary>
            Called by the platform. Depending on the application, this method
            could start the event loop or process data. This method is 
            considered analogous to a main entry point function. Note, the 
            <see cref="T:Emergent.Toolbench.Platform"/> class can be used to query for command line
            arguments and other system information.
            </summary>
            <param name="args">The arguments.</param>
            <returns>Application return code. 0 indicates success.</returns>
        </member>
        <member name="M:Emergent.Toolbench.IRunnable.OnExternalCommand(Emergent.Toolbench.Arguments)">
            <summary>
            Called by the platform when single-instance applications are started.
            Newer instances will pass their command-line parameters to the original
            instance via this function. Note that this function will not be run
            on the original main thread, so plugins will likely need to Invoke a
            helper function on their UI thread.
            </summary>
            <param name="args">The arguments.</param>
        </member>
        <member name="T:Emergent.Toolbench.ElementData">
            <summary>
            This class implements the element data class and provides additional functionality for
            extracting the necessary data from a given XML node contained in a plug-in manifest.
            </summary>
        </member>
        <member name="T:Emergent.Toolbench.IElementData">
            <summary>
            This interface reflects the data contained in an extension's XML declaration, thereby
            allowing extensions to define additional data based on the contract established between the
            extension and its associated extension point.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.IElementData.HasAttribute(System.String)">
            <summary>
            Gets a value indicating if the element data contains the attribute.
            </summary>
            <param name="attribName">The attribute to check.</param>
            <returns><c>true</c> if the attribute exists; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Emergent.Toolbench.IElementData.GetAttribute(System.String)">
            <summary>
            Gets the value from the specified attribute.
            </summary>
            <param name="attribName">Name of the attribute.</param>
            <returns>A string containing the value of the attribute or null if the attribute was not
            found in this data element.</returns>
        </member>
        <member name="M:Emergent.Toolbench.IElementData.GetAttribute(System.String,System.Byte)">
            <summary>
            Gets the value from the specified attribute.
            </summary>
            <param name="attribName">Name of the attribute.</param>
            <param name="defaultValue">The value to return if the attribute is not found.</param>
            <returns>The value of the attribute if found, else the default value passed in.
            </returns>
        </member>
        <member name="M:Emergent.Toolbench.IElementData.GetAttribute(System.String,System.SByte)">
            <summary>
            Gets the value from the specified attribute.
            </summary>
            <param name="attribName">Name of the attribute.</param>
            <param name="defaultValue">The value to return if the attribute is not found.</param>
            <returns>The value of the attribute if found, else the default value passed in.
            </returns>
        </member>
        <member name="M:Emergent.Toolbench.IElementData.GetAttribute(System.String,System.Boolean)">
            <summary>
            Gets the value from the specified attribute.
            </summary>
            <param name="attribName">Name of the attribute.</param>
            <param name="defaultValue">The value to return if the attribute is not found.</param>
            <returns>The value of the attribute if found, else the default value passed in.
            </returns>
        </member>
        <member name="M:Emergent.Toolbench.IElementData.GetAttribute(System.String,System.Int16)">
            <summary>
            Gets the value from the specified attribute.
            </summary>
            <param name="attribName">Name of the attribute.</param>
            <param name="defaultValue">The value to return if the attribute is not found.</param>
            <returns>The value of the attribute if found, else the default value passed in.
            </returns>
        </member>
        <member name="M:Emergent.Toolbench.IElementData.GetAttribute(System.String,System.UInt16)">
            <summary>
            Gets the value from the specified attribute.
            </summary>
            <param name="attribName">Name of the attribute.</param>
            <param name="defaultValue">The value to return if the attribute is not found.</param>
            <returns>The value of the attribute if found, else the default value passed in.
            </returns>
        </member>
        <member name="M:Emergent.Toolbench.IElementData.GetAttribute(System.String,System.Int32)">
            <summary>
            Gets the value from the specified attribute.
            </summary>
            <param name="attribName">Name of the attribute.</param>
            <param name="defaultValue">The value to return if the attribute is not found.</param>
            <returns>The value of the attribute if found, else the default value passed in.
            </returns>
        </member>
        <member name="M:Emergent.Toolbench.IElementData.GetAttribute(System.String,System.UInt32)">
            <summary>
            Gets the value from the specified attribute.
            </summary>
            <param name="attribName">Name of the attribute.</param>
            <param name="defaultValue">The value to return if the attribute is not found.</param>
            <returns>The value of the attribute if found, else the default value passed in.
            </returns>
        </member>
        <member name="M:Emergent.Toolbench.IElementData.GetAttribute(System.String,System.Int64)">
            <summary>
            Gets the value from the specified attribute.
            </summary>
            <param name="attribName">Name of the attribute.</param>
            <param name="defaultValue">The value to return if the attribute is not found.</param>
            <returns>The value of the attribute if found, else the default value passed in.
            </returns>
        </member>
        <member name="M:Emergent.Toolbench.IElementData.GetAttribute(System.String,System.UInt64)">
            <summary>
            Gets the value from the specified attribute.
            </summary>
            <param name="attribName">Name of the attribute.</param>
            <param name="defaultValue">The value to return if the attribute is not found.</param>
            <returns>The value of the attribute if found, else the default value passed in.
            </returns>
        </member>
        <member name="M:Emergent.Toolbench.IElementData.GetAttribute(System.String,System.Single)">
            <summary>
            Gets the value from the specified attribute.
            </summary>
            <param name="attribName">Name of the attribute.</param>
            <param name="defaultValue">The value to return if the attribute is not found.</param>
            <returns>The value of the attribute if found, else the default value passed in.
            </returns>
        </member>
        <member name="M:Emergent.Toolbench.IElementData.GetAttribute(System.String,System.Double)">
            <summary>
            Gets the value from the specified attribute.
            </summary>
            <param name="attribName">Name of the attribute.</param>
            <param name="defaultValue">The value to return if the attribute is not found.</param>
            <returns>The value of the attribute if found, else the default value passed in.
            </returns>
        </member>
        <member name="M:Emergent.Toolbench.IElementData.GetAttribute(System.String,System.Decimal)">
            <summary>
            Gets the value from the specified attribute.
            </summary>
            <param name="attribName">Name of the attribute.</param>
            <param name="defaultValue">The value to return if the attribute is not found.</param>
            <returns>The value of the attribute if found, else the default value passed in.
            </returns>
        </member>
        <member name="M:Emergent.Toolbench.IElementData.GetAttribute(System.String,System.Char)">
            <summary>
            Gets the value from the specified attribute.
            </summary>
            <param name="attribName">Name of the attribute.</param>
            <param name="defaultValue">The value to return if the attribute is not found.</param>
            <returns>The value of the attribute if found, else the default value passed in.
            </returns>
        </member>
        <member name="M:Emergent.Toolbench.IElementData.GetAttribute(System.String,System.String)">
            <summary>
            Gets the value from the specified attribute.
            </summary>
            <param name="attribName">Name of the attribute.</param>
            <param name="defaultValue">The value to return if the attribute is not found.</param>
            <returns>The value of the attribute if found, else the default value passed in.
            </returns>
        </member>
        <member name="M:Emergent.Toolbench.IElementData.GetAttribute``1(System.String,System.Enum)">
            <summary>
            Gets the value from the specified attribute.
            </summary>
            <param name="attribName">Name of the attribute.</param>
            <param name="defaultValue">The value to return if the attribute is not found.</param>
            <returns>The value of the attribute if found, else the default value passed in.
            </returns>
        </member>
        <member name="M:Emergent.Toolbench.IElementData.FirstElement">
            <summary>
            Gets the first child element of the element data or null if there are no children.
            </summary>
            <returns>The first child element or null if there are no children.</returns>
        </member>
        <member name="M:Emergent.Toolbench.IElementData.FirstElement(System.String)">
            <summary>
            Walks all the children of this IElementData and returns the first element matching the
            name provided. This search will also consider the starting parent element in the search.
            </summary>
            <param name="name">The element name to look for.</param>
            <returns>An element matching the name.</returns>
        </member>
        <member name="M:Emergent.Toolbench.IElementData.FirstElement(System.String,System.Boolean)">
            <summary>
            Walks all the children of this IElementData if recursive is true and returns the first 
            element matching the name provided. This search will also consider the starting parent
            element in the search.
            </summary>
            <param name="name">The element name to look for.</param>
            <param name="recursive">Should a recursive search be performed.</param>
            <returns>An element matching the name.</returns>
        </member>
        <member name="M:Emergent.Toolbench.IElementData.Elements(System.String)">
            <summary>
            Walks all the children of this IElementData and returns an enumerable of all elements
            with a name matching the one provided. This is only the top level.
            </summary>
            <param name="name">The element name to look for.</param>
            <returns>A list of elements matching the provided name.</returns>
        </member>
        <member name="M:Emergent.Toolbench.IElementData.Elements(System.String,System.Boolean)">
            <summary>
            Recursively walks all the children of this IElementData and returns an enumerable of all
            elements with a name matching the one provided.
            </summary>
            <param name="name">The element names to look for.</param>
            <param name="recursive">If true the matching elements are pulled recursively from all
            children.</param>
            <returns>A list of elements matching the provided name.</returns>
        </member>
        <member name="M:Emergent.Toolbench.IElementData.CreateInstance``1(System.String)">
            <summary>
            Creates an object instance of the templated type using the specified attribute.
            </summary>
            <param name="attributeName">Name of the attribute where the value contains the full
            class name of the instance to create.</param>
            <returns>A new instance of the templated type.</returns>
            <exception cref="T:Emergent.Toolbench.PlatformException">Thrown if the attribute name is invalid or if the
            type of the template parameter does not match the type of the resulting object instance.
            </exception>
            <remarks>The plug-in descriptor on the element data instance is the plug-in by which the
            object's code is located. Therefore, the plug-in is automatically activated before the
            requested object is created.</remarks>
        </member>
        <member name="M:Emergent.Toolbench.IElementData.GetType(System.String)">
            <summary>
            Gets the type data for the type name specified in the attribute.
            </summary>
            <param name="attributeName">Name of the attribute where the value contains the full 
            class name whose type to look up.</param>
            <returns>The type corresponding to the attribute.</returns>
        </member>
        <member name="P:Emergent.Toolbench.IElementData.Name">
            <summary>
            Gets the name of this element where the name matches the XML element tag.
            </summary>
            <value>The name or XML element tag.</value>
        </member>
        <member name="P:Emergent.Toolbench.IElementData.Value">
            <summary>
            Gets a string containing the text portion of the XML element.
            </summary>
            <value>A string containing the exact text section.</value>
        </member>
        <member name="P:Emergent.Toolbench.IElementData.PluginDescriptor">
            <summary>
            Gets the plug-in descriptor from which this element data originated.
            </summary>
            <value>The plug-in descriptor.</value>
        </member>
        <member name="P:Emergent.Toolbench.IElementData.AttributeNames">
            <summary>
            Gets an array of the attribute names where the attribute names are the same as the
            attribute names found in the corresponding XML element.
            </summary>
            <value>The attribute names or an empty array if this data element does not contain any
            attributes.</value>
        </member>
        <member name="P:Emergent.Toolbench.IElementData.Children">
            <summary>
            Gets the children of the element data where the children are additional XML elements
            nested in this element.
            </summary>
            <value>The child data elements / XML elements.</value>
        </member>
        <member name="M:Emergent.Toolbench.ElementData.#ctor(System.String,System.String,Emergent.Toolbench.IPluginDescriptor)">
            <summary>
            Initializes a new instance of the <see cref="T:Emergent.Toolbench.ElementData"/> class.
            </summary>
            <param name="name">The name of the element (XML tag).</param>
            <param name="value">The value of the element.</param>
            <param name="desc">The plugin descriptor.</param>
        </member>
        <member name="M:Emergent.Toolbench.ElementData.AddAttribute(System.String,System.String)">
            <summary>
            Adds a new attribute to the element data.
            </summary>
            <param name="name">Name of the attribute. If an attribute of the same name already
            exists, this method will silently fail.</param>
            <param name="value">The value of the attribute.</param>
        </member>
        <member name="M:Emergent.Toolbench.ElementData.HasAttribute(System.String)">
            <summary>
            Gets a value indicating if the element data contains the attribute.
            </summary>
            <param name="attribName">The attribute to check.</param>
            <returns><c>true</c> if the attribute exists; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Emergent.Toolbench.ElementData.GetAttribute(System.String)">
            <summary>
            Gets the value from the specified attribute.
            </summary>
            <param name="attribName">Name of the attribute.</param>
            <returns>A string containing the value of the attribute or null if the attribute was not
            found in this data element.</returns>
        </member>
        <member name="M:Emergent.Toolbench.ElementData.GetAttribute(System.String,System.Byte)">
            <summary>
            Gets the value from the specified attribute.
            </summary>
            <param name="attribName">Name of the attribute.</param>
            <param name="defaultValue">The value to return if the attribute is not found.</param>
            <returns>The value of the attribute if found, else the default value passed in.
            </returns>
        </member>
        <member name="M:Emergent.Toolbench.ElementData.GetAttribute(System.String,System.SByte)">
            <summary>
            Gets the value from the specified attribute.
            </summary>
            <param name="attribName">Name of the attribute.</param>
            <param name="defaultValue">The value to return if the attribute is not found.</param>
            <returns>The value of the attribute if found, else the default value passed in.
            </returns>
        </member>
        <member name="M:Emergent.Toolbench.ElementData.GetAttribute(System.String,System.Boolean)">
            <summary>
            Gets the value from the specified attribute.
            </summary>
            <param name="attribName">Name of the attribute.</param>
            <param name="defaultValue">The value to return if the attribute is not found.</param>
            <returns>The value of the attribute if found, else the default value passed in.
            </returns>
        </member>
        <member name="M:Emergent.Toolbench.ElementData.GetAttribute(System.String,System.Int16)">
            <summary>
            Gets the value from the specified attribute.
            </summary>
            <param name="attribName">Name of the attribute.</param>
            <param name="defaultValue">The value to return if the attribute is not found.</param>
            <returns>The value of the attribute if found, else the default value passed in.
            </returns>
        </member>
        <member name="M:Emergent.Toolbench.ElementData.GetAttribute(System.String,System.UInt16)">
            <summary>
            Gets the value from the specified attribute.
            </summary>
            <param name="attribName">Name of the attribute.</param>
            <param name="defaultValue">The value to return if the attribute is not found.</param>
            <returns>The value of the attribute if found, else the default value passed in.
            </returns>
        </member>
        <member name="M:Emergent.Toolbench.ElementData.GetAttribute(System.String,System.Int32)">
            <summary>
            Gets the value from the specified attribute.
            </summary>
            <param name="attribName">Name of the attribute.</param>
            <param name="defaultValue">The value to return if the attribute is not found.</param>
            <returns>The value of the attribute if found, else the default value passed in.
            </returns>
        </member>
        <member name="M:Emergent.Toolbench.ElementData.GetAttribute(System.String,System.UInt32)">
            <summary>
            Gets the value from the specified attribute.
            </summary>
            <param name="attribName">Name of the attribute.</param>
            <param name="defaultValue">The value to return if the attribute is not found.</param>
            <returns>The value of the attribute if found, else the default value passed in.
            </returns>
        </member>
        <member name="M:Emergent.Toolbench.ElementData.GetAttribute(System.String,System.Int64)">
            <summary>
            Gets the value from the specified attribute.
            </summary>
            <param name="attribName">Name of the attribute.</param>
            <param name="defaultValue">The value to return if the attribute is not found.</param>
            <returns>The value of the attribute if found, else the default value passed in.
            </returns>
        </member>
        <member name="M:Emergent.Toolbench.ElementData.GetAttribute(System.String,System.UInt64)">
            <summary>
            Gets the value from the specified attribute.
            </summary>
            <param name="attribName">Name of the attribute.</param>
            <param name="defaultValue">The value to return if the attribute is not found.</param>
            <returns>The value of the attribute if found, else the default value passed in.
            </returns>
        </member>
        <member name="M:Emergent.Toolbench.ElementData.GetAttribute(System.String,System.Single)">
            <summary>
            Gets the value from the specified attribute.
            </summary>
            <param name="attribName">Name of the attribute.</param>
            <param name="defaultValue">The value to return if the attribute is not found.</param>
            <returns>The value of the attribute if found, else the default value passed in.
            </returns>
        </member>
        <member name="M:Emergent.Toolbench.ElementData.GetAttribute(System.String,System.Double)">
            <summary>
            Gets the value from the specified attribute.
            </summary>
            <param name="attribName">Name of the attribute.</param>
            <param name="defaultValue">The value to return if the attribute is not found.</param>
            <returns>The value of the attribute if found, else the default value passed in.
            </returns>
        </member>
        <member name="M:Emergent.Toolbench.ElementData.GetAttribute(System.String,System.Decimal)">
            <summary>
            Gets the value from the specified attribute.
            </summary>
            <param name="attribName">Name of the attribute.</param>
            <param name="defaultValue">The value to return if the attribute is not found.</param>
            <returns>The value of the attribute if found, else the default value passed in.
            </returns>
        </member>
        <member name="M:Emergent.Toolbench.ElementData.GetAttribute(System.String,System.Char)">
            <summary>
            Gets the value from the specified attribute.
            </summary>
            <param name="attribName">Name of the attribute.</param>
            <param name="defaultValue">The value to return if the attribute is not found.</param>
            <returns>The value of the attribute if found, else the default value passed in.
            </returns>
        </member>
        <member name="M:Emergent.Toolbench.ElementData.GetAttribute(System.String,System.String)">
            <summary>
            Gets the value from the specified attribute.
            </summary>
            <param name="attribName">Name of the attribute.</param>
            <param name="defaultValue">The value to return if the attribute is not found.</param>
            <returns>The value of the attribute if found, else the default value passed in.
            </returns>
        </member>
        <member name="M:Emergent.Toolbench.ElementData.GetAttribute``1(System.String,System.Enum)">
            <summary>
            Gets the value from the specified attribute.
            </summary>
            <param name="attribName">Name of the attribute.</param>
            <param name="defaultValue">The value to return if the attribute is not found.</param>
            <returns>The value of the attribute if found, else the default value passed in.
            </returns>
        </member>
        <member name="M:Emergent.Toolbench.ElementData.AddChild(Emergent.Toolbench.ElementData)">
            <summary>
            Adds a new child data element.
            </summary>
            <param name="child">The child. Must not be null.</param>
        </member>
        <member name="M:Emergent.Toolbench.ElementData.FirstElement">
            <summary>
            Gets the first child element of the element data or null if there are no children.
            </summary>
            <returns>The first child element or null if there are no children.</returns>
        </member>
        <member name="M:Emergent.Toolbench.ElementData.FirstElement(System.String)">
            <summary>
            Walks all the children of this IElementData and returns the first element matching the
            name provided. This search will also consider the starting parent element in the search.
            </summary>
            <param name="name">The element name to look for.</param>
            <returns>An element matching the name.</returns>
        </member>
        <member name="M:Emergent.Toolbench.ElementData.FirstElement(System.String,System.Boolean)">
            <summary>
            Walks all the children of this IElementData if recursive is true and returns the first 
            element matching the name provided. This search will also consider the starting parent
            element in the search.
            </summary>
            <param name="name">The element name to look for.</param>
            <param name="recursive">Should a recursive search be performed.</param>
            <returns>An element matching the name.</returns>
        </member>
        <member name="M:Emergent.Toolbench.ElementData.Elements(System.String)">
            <summary>
            Walks all the children of this IElementData and returns an enumerable of all elements
            with a name matching the one provided. This is only the top level.
            </summary>
            <param name="name">The element name to look for.</param>
            <returns>A list of elements matching the provided name.</returns>
        </member>
        <member name="M:Emergent.Toolbench.ElementData.Elements(System.String,System.Boolean)">
            <summary>
            Recursively walks all the children of this IElementData and returns an enumerable of all
            elements with a name matching the one provided.
            </summary>
            <param name="name">The element names to look for.</param>
            <param name="recursive">If true the matching elements are pulled recursively from all
            children.</param>
            <returns>A list of elements matching the provided name.</returns>
        </member>
        <member name="M:Emergent.Toolbench.ElementData.CreateInstance``1(System.String)">
            <summary>
            Creates an object instance of the templated type using the specified attribute.
            </summary>
            <param name="attributeName">Name of the attribute where the value contains the full
            class name of the instance to create.</param>
            <returns>A new instance of the templated type.</returns>
            <exception cref="T:Emergent.Toolbench.PlatformException">Thrown if the attribute name is invalid or if the
            type of the template parameter does not match the type of the resulting object instance.
            </exception>
            <remarks>The plug-in descriptor on the element data instance is the plug-in by which the
            object's code is located. Therefore, the plug-in is automatically activated before the
            requested object is created.</remarks>
        </member>
        <member name="M:Emergent.Toolbench.ElementData.GetType(System.String)">
            <summary>
            Gets the type data for the type name specified in the attribute.
            </summary>
            <param name="attributeName">Name of the attribute where the value contains the full
            class name whose type to look up.</param>
            <returns>The type corresponding to the attribute.</returns>
        </member>
        <member name="P:Emergent.Toolbench.ElementData.Name">
            <summary>
            Gets the name of this element where the name matches the XML element tag.
            </summary>
            <value>The name or XML element tag.</value>
        </member>
        <member name="P:Emergent.Toolbench.ElementData.Value">
            <summary>
            Gets a string containing the text portion of the XML element.
            </summary>
            <value>A string containing the exact text section.</value>
        </member>
        <member name="P:Emergent.Toolbench.ElementData.PluginDescriptor">
            <summary>
            Gets the plug-in descriptor from which this element data originated.
            </summary>
            <value>The plug-in descriptor.</value>
        </member>
        <member name="P:Emergent.Toolbench.ElementData.AttributeNames">
            <summary>
            Gets an array of the attribute names where the attribute names are the same as the
            attribute names found in the corresponding XML element.
            </summary>
            <value>The attribute names or an empty array if this data element does not contain any
            attributes.</value>
        </member>
        <member name="P:Emergent.Toolbench.ElementData.Children">
            <summary>
            Gets the children of the element data where the children are additional XML elements
            nested in this element.
            </summary>
            <value>The child data elements / XML elements.</value>
        </member>
        <member name="T:Emergent.Toolbench.Collections.ReadOnlyObservableDictionary`2">
            <summary>
            A dictionary with notifications for changes (for WPF support), modeled after
            ReadOnlyObservableCollection.
            </summary>
            <typeparam name="TKey">The key type.</typeparam>
            <typeparam name="TValue">The value type.</typeparam>
        </member>
        <member name="M:Emergent.Toolbench.Collections.ReadOnlyObservableDictionary`2.#ctor(Emergent.Toolbench.Collections.ObservableDictionary{`0,`1})">
            <summary>
            Initializes a new instance of the
            <see cref="T:Emergent.Toolbench.Collections.ReadOnlyObservableDictionary`2"/> class.
            </summary>
            <param name="dictionary">The dictionary to wrap.</param>
        </member>
        <member name="M:Emergent.Toolbench.Collections.ReadOnlyObservableDictionary`2.Add(`0,`1)">
            <summary>
            Adds an element with the provided key and value to the dictionary.
            </summary>
            <param name="key">The object to use as the key of the element to add.</param>
            <param name="value">The object to use as the value of the element to add.</param>
            <exception cref="T:System.NotSupportedException">Always thrown because the collection is
            read-only.</exception>
        </member>
        <member name="M:Emergent.Toolbench.Collections.ReadOnlyObservableDictionary`2.ContainsKey(`0)">
            <summary>
            Determines whether the dictionary contains an element with the specified key.
            </summary>
            <param name="key">The key to locate in the dictionary.</param>
            <returns>true if the dictionary contains an element with the key; otherwise, false.
            </returns>
        </member>
        <member name="M:Emergent.Toolbench.Collections.ReadOnlyObservableDictionary`2.Remove(`0)">
            <summary>
            Removes the element with the specified key from the dictionary.
            </summary>
            <param name="key">The key of the element to remove.</param>
            <returns>true if the element is successfully removed; otherwise, false. This method also
            returns false if <paramref name="key"/> was not found in the original dictionary.
            </returns>
            <exception cref="T:System.NotSupportedException">Always thrown because the collection is
            read-only.</exception>
        </member>
        <member name="M:Emergent.Toolbench.Collections.ReadOnlyObservableDictionary`2.TryGetValue(`0,`1@)">
            <summary>
            Gets the value associated with the specified key.
            </summary>
            <param name="key">The key whose value to get.</param>
            <param name="value">When this method returns, the value associated with the specified
            key, if the key is found; otherwise, the default value for the type of the
            <paramref name="value"/> parameter. This parameter is passed uninitialized.</param>
            <returns>true if the dictionary contains an element with the specified key; otherwise,
            false.</returns>
        </member>
        <member name="M:Emergent.Toolbench.Collections.ReadOnlyObservableDictionary`2.Add(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Adds an item to the collection.
            </summary>
            <param name="item">The object to add to the collection.</param>
            <exception cref="T:System.NotSupportedException">Always thrown because the collection is
            read-only.</exception>
        </member>
        <member name="M:Emergent.Toolbench.Collections.ReadOnlyObservableDictionary`2.Clear">
            <summary>
            Removes all items from the collection.
            </summary>
            <exception cref="T:System.NotSupportedException">Always thrown because the collection is
            read-only.</exception>
        </member>
        <member name="M:Emergent.Toolbench.Collections.ReadOnlyObservableDictionary`2.Contains(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Determines whether the collection contains a specific value.
            </summary>
            <param name="item">The object to locate in the collection.</param>
            <returns>true if <paramref name="item"/> is found in the collection; otherwise, false.
            </returns>
        </member>
        <member name="M:Emergent.Toolbench.Collections.ReadOnlyObservableDictionary`2.CopyTo(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Int32)">
            <summary>
            Copies the elements of the collection to an <see cref="T:System.Array"/>, starting at a
            particular <see cref="T:System.Array"/> index.
            </summary>
            <param name="array">The one-dimensional <see cref="T:System.Array"/> that is the
            destination of the elements copied from the collection. The <see cref="T:System.Array"/>
            must have zero-based indexing.</param>
            <param name="arrayIndex">The zero-based index in <paramref name="array"/> at which
            copying begins.</param>
        </member>
        <member name="M:Emergent.Toolbench.Collections.ReadOnlyObservableDictionary`2.Remove(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Removes the first occurrence of a specific object from the collection.
            </summary>
            <param name="item">The object to remove from the collection.</param>
            <returns>true if <paramref name="item"/> was successfully removed from the collection;
            otherwise, false. This method also returns false if <paramref name="item"/> is not found
            in the original collection.</returns>
            <exception cref="T:System.NotSupportedException">Always thrown because the collection is
            read-only.</exception>
        </member>
        <member name="M:Emergent.Toolbench.Collections.ReadOnlyObservableDictionary`2.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>An enumerator that can be used to iterate through the collection.</returns>
        </member>
        <member name="M:Emergent.Toolbench.Collections.ReadOnlyObservableDictionary`2.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>An enumerator that can be used to iterate through the collection.</returns>
        </member>
        <member name="M:Emergent.Toolbench.Collections.ReadOnlyObservableDictionary`2.Add(System.Object,System.Object)">
            <summary>
            Adds an element with the provided key and value to the dictionary.
            </summary>
            <param name="key">The object to use as the key of the element to add.</param>
            <param name="value">The object to use as the value of the element to add.</param>
            <exception cref="T:System.NotSupportedException">Always thrown because the collection is
            read-only.</exception>
        </member>
        <member name="M:Emergent.Toolbench.Collections.ReadOnlyObservableDictionary`2.Contains(System.Object)">
            <summary>
            Determines whether the dictionary contains an element with the specified key.
            </summary>
            <param name="key">The key to locate in the dictionary.</param>
            <returns>true if the dictionary contains an element with the key; otherwise, false.
            </returns>
        </member>
        <member name="M:Emergent.Toolbench.Collections.ReadOnlyObservableDictionary`2.System#Collections#IDictionary#GetEnumerator">
            <summary>
            Returns an enumerator for the dictionary.
            </summary>
            <returns>An enumerator for the dictionary.</returns>
        </member>
        <member name="M:Emergent.Toolbench.Collections.ReadOnlyObservableDictionary`2.Remove(System.Object)">
            <summary>
            Removes the element with the specified key from the dictionary.
            </summary>
            <param name="key">The key of the element to remove.</param>
            <exception cref="T:System.NotSupportedException">Always thrown because the collection is
            read-only.</exception>
        </member>
        <member name="M:Emergent.Toolbench.Collections.ReadOnlyObservableDictionary`2.CopyTo(System.Array,System.Int32)">
            <summary>
            Copies the elements of the collection to an <see cref="T:System.Array"/>, starting at a
            particular <see cref="T:System.Array"/> index.
            </summary>
            <param name="array">The one-dimensional <see cref="T:System.Array"/> that is the
            destination of the elements copied from the collection. The <see cref="T:System.Array"/>
            must have zero-based indexing.</param>
            <param name="index">The zero-based index in <paramref name="array"/> at which copying
            begins.</param>
        </member>
        <member name="M:Emergent.Toolbench.Collections.ReadOnlyObservableDictionary`2.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo"/> with the data
            needed to serialize the target object.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> to
            populate with data.</param>
            <param name="context">The destination (see
            <see cref="T:System.Runtime.Serialization.StreamingContext"/>) for this serialization.
            </param>
        </member>
        <member name="M:Emergent.Toolbench.Collections.ReadOnlyObservableDictionary`2.OnDeserialization(System.Object)">
            <summary>
            Runs when the entire object graph has been deserialized.
            </summary>
            <param name="sender">The object that initiated the callback.</param>
        </member>
        <member name="P:Emergent.Toolbench.Collections.ReadOnlyObservableDictionary`2.Keys">
            <summary>
            Gets an ICollection containing the keys of the dictionary.
            </summary>
            <returns>An ICollection containing the keys of the dictionary.</returns>
        </member>
        <member name="P:Emergent.Toolbench.Collections.ReadOnlyObservableDictionary`2.Values">
            <summary>
            Gets an ICollection containing the values in the dictionary.
            </summary>
            <returns>An ICollection containing the values in the dictionary.</returns>
        </member>
        <member name="P:Emergent.Toolbench.Collections.ReadOnlyObservableDictionary`2.Item(`0)">
            <summary>
            Gets the value with the specified key.
            </summary>
            <returns>The value with the specified key.</returns>
            <exception cref="T:System.NotSupportedException">Always thrown on set because the
            collection is read-only.</exception>
        </member>
        <member name="P:Emergent.Toolbench.Collections.ReadOnlyObservableDictionary`2.Count">
            <summary>
            Gets the number of elements contained in the collection.
            </summary>
            <returns>The number of elements contained in the collection.</returns>
        </member>
        <member name="P:Emergent.Toolbench.Collections.ReadOnlyObservableDictionary`2.IsReadOnly">
            <summary>
            Gets a value indicating whether the collection is read-only.
            </summary>
            <returns>true, since the collection is read-only.</returns>
        </member>
        <member name="P:Emergent.Toolbench.Collections.ReadOnlyObservableDictionary`2.IsFixedSize">
            <summary>
            Gets a value indicating whether the dictionary has a fixed size.
            </summary>
            <returns>true, since the dictionary is read-only and thus has a fixed size.</returns>
        </member>
        <member name="P:Emergent.Toolbench.Collections.ReadOnlyObservableDictionary`2.System#Collections#IDictionary#Keys">
            <summary>
            Gets a collection containing the keys of the dictionary.
            </summary>
            <returns>A collection containing the keys of the dictionary.</returns>
        </member>
        <member name="P:Emergent.Toolbench.Collections.ReadOnlyObservableDictionary`2.System#Collections#IDictionary#Values">
            <summary>
            Gets a collection containing the values in the dictionary.
            </summary>
            <returns>A collection containing the values in the dictionary.</returns>
        </member>
        <member name="P:Emergent.Toolbench.Collections.ReadOnlyObservableDictionary`2.Item(System.Object)">
            <summary>
            Gets the value with the specified key.
            </summary>
            <returns>The value with the specified key.</returns>
            <exception cref="T:System.NotSupportedException">Always thrown on set because the
            collection is read-only.</exception>
        </member>
        <member name="P:Emergent.Toolbench.Collections.ReadOnlyObservableDictionary`2.IsSynchronized">
            <summary>
            Gets a value indicating whether access to the collection is synchronized (thread safe).
            </summary>
            <returns>true if access to the collection is synchronized (thread safe); otherwise,
            false.</returns>
        </member>
        <member name="P:Emergent.Toolbench.Collections.ReadOnlyObservableDictionary`2.SyncRoot">
            <summary>
            Gets an object that can be used to synchronize access to the collection.
            </summary>
            <returns>An object that can be used to synchronize access to the collection.</returns>
        </member>
        <member name="E:Emergent.Toolbench.Collections.ReadOnlyObservableDictionary`2.System#Collections#Specialized#INotifyCollectionChanged#CollectionChanged">
            <summary>
            Occurs when the collection changes.
            </summary>
            <remarks>Required to satisfy the compiler that interface is implemented due to protected
            event.</remarks>
        </member>
        <member name="E:Emergent.Toolbench.Collections.ReadOnlyObservableDictionary`2.System#ComponentModel#INotifyPropertyChanged#PropertyChanged">
            <summary>
            Occurs when a property value changes.
            </summary>
            <remarks>Required to satisfy the compiler that interface is implemented due to protected
            event.</remarks>
        </member>
        <member name="T:Emergent.Toolbench.PluginResources">
            <summary>
            The PluginResources class is designed to encapsulate the logic needed to lookup resources
            for your plug-in.
            It can also be used much more easily in a binding context because the only key you need to
            provide is the indexer to the resource.  It also hooks the property change event of the
            Platform.Resources so that it can be notified when the culture changes.  When this occurs,
            it uses both the INotifyCollectionChanged as well as the INotifyPropertyChanged events to
            notify any bound components that the data has changed, which would force them to re-query
            their bound plug-in resources and extract the correct resource for the new culture.
            </summary>
        </member>
        <member name="T:Emergent.Toolbench.IPluginResources">
            <summary>
            Interface to support easy lookup of plug-in resources by indexer key.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.IPluginResources.Get``1(System.String)">
            <summary>
            Accesses a resource object of the specified class.
            </summary>
            <typeparam name="T">The class type of the requested resource.</typeparam>
            <param name="name">The indexer key of the requested resource.</param>
            <returns>The resource object.</returns>
        </member>
        <member name="M:Emergent.Toolbench.IPluginResources.Get``1(System.String,System.Boolean)">
            <summary>
            Accesses a resource object of the specified class, with an option for ignoring case.
            </summary>
            <typeparam name="T">The class type of the requested resource.</typeparam>
            <param name="name">The indexer key of the requested resource.</param>
            <param name="ignoreCase">True to ignore case for the resource lookup.</param>
            <returns>The resource object.</returns>
        </member>
        <member name="M:Emergent.Toolbench.IPluginResources.GetString(System.String)">
            <summary>
            Accesses a string resource.
            </summary>
            <param name="name">The indexer key of the requested resource.</param>
            <returns>The string resource.</returns>
        </member>
        <member name="M:Emergent.Toolbench.IPluginResources.GetString(System.String,System.Boolean)">
            <summary>
            Accesses a string resource, with an option for ignoring case.
            </summary>
            <param name="name">The indexer key of the requested resource.</param>
            <param name="ignoreCase">True to ignore case for the resource lookup.</param>
            <returns>The string resource.</returns>
        </member>
        <member name="P:Emergent.Toolbench.IPluginResources.Item(System.String)">
            <summary>
            Accesses a resource object using array syntax.
            </summary>
            <param name="key">The indexer key of the requested resource.</param>
            <returns>The resource object.</returns>
        </member>
        <member name="M:Emergent.Toolbench.PluginResources.#ctor(Emergent.Toolbench.IPluginDescriptor)">
            <summary>
            Creates an instance of the <see cref="T:Emergent.Toolbench.PluginResources"/>.
            </summary>
            <param name="descriptor">The plugin descriptor to which these plugin resources are
            bound.
            </param>
        </member>
        <member name="M:Emergent.Toolbench.PluginResources.OnResourcesPropertyChanged(System.Object,System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            Called when a property changes on the platforms resource object.
            Typically speaking, this is done to pickup on changes to the current culture.
            </summary>
            <param name="sender">The platform resources</param>
            <param name="e">The property change events arguments.</param>
        </member>
        <member name="T:Emergent.Toolbench.IO.BinaryStream">
            <summary>
            The <see cref="T:Emergent.Toolbench.IO.BinaryStream"/> is a stream binary reader and writer used for reading and
            writing to streams with variable endianness as well as for reading or writing in variable
            encodings.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.IO.BinaryStream.#ctor(System.IO.Stream,System.Text.Encoding,System.Boolean)">
            <summary>
            Creates a new instance of the <see cref="T:Emergent.Toolbench.IO.BinaryStream"/>.
            </summary>
            <param name="stream">The stream to read from or write to.</param>
            <param name="encoding">The default encoding.</param>
            <param name="littleEndian">Is the stream little endian by default.</param>
        </member>
        <member name="M:Emergent.Toolbench.IO.BinaryStream.Read(System.Byte[])">
            <summary>
            Reads until the buffer is full.
            </summary>
            <param name="buffer">The buffer to fill.</param>
            <returns>The number of bytes read.</returns>
        </member>
        <member name="M:Emergent.Toolbench.IO.BinaryStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads a given number of bytes into the provided buffer, starting at the provided offset.
            </summary>
            <param name="buffer">The buffer to write to.</param>
            <param name="offset">The offset to begin writing into the buffer.</param>
            <param name="count">The number of bytes to read.</param>
            <returns>The number of bytes read.</returns>
        </member>
        <member name="M:Emergent.Toolbench.IO.BinaryStream.Read(System.Type)">
            <summary>
            Reads the type off the stream. Only works with .Net primitives. Except Char.
            </summary>
            <param name="type">The type to read.</param>
            <returns>The value.</returns>
        </member>
        <member name="M:Emergent.Toolbench.IO.BinaryStream.Read(System.Type,System.Boolean)">
            <summary>
            Reads the type off the stream. Only works with .Net primitives. Except Char.
            </summary>
            <param name="type">The type to read.</param>
            <param name="littleEndian">Is the value little endian.</param>
            <returns>The value.</returns>
        </member>
        <member name="M:Emergent.Toolbench.IO.BinaryStream.ReadBoolean">
            <summary>
            Reads a boolean from the stream and returns the value.
            </summary>
            <returns>A boolean value.</returns>
        </member>
        <member name="M:Emergent.Toolbench.IO.BinaryStream.ReadByte">
            <summary>
            Reads a byte from the stream and returns the value.
            </summary>
            <returns>A byte value.</returns>
        </member>
        <member name="M:Emergent.Toolbench.IO.BinaryStream.ReadSByte">
            <summary>
            Reads a signed byte from the stream and returns the value.
            </summary>
            <returns>A signed byte value.</returns>
        </member>
        <member name="M:Emergent.Toolbench.IO.BinaryStream.ReadInt16">
            <summary>
            Reads an Int16 from the stream and returns the value.
            </summary>
            <returns>An Int16 value.</returns>
        </member>
        <member name="M:Emergent.Toolbench.IO.BinaryStream.ReadInt16(System.Boolean)">
            <summary>
            Reads an Int16 from the stream and returns the value.
            </summary>
            <param name="littleEndian">Is the value in little endian.</param>
            <returns>An Int16 value.</returns>
        </member>
        <member name="M:Emergent.Toolbench.IO.BinaryStream.ReadUInt16">
            <summary>
            Reads a UInt16 from the stream and returns the value.
            </summary>
            <returns>A UInt16 value.</returns>
        </member>
        <member name="M:Emergent.Toolbench.IO.BinaryStream.ReadUInt16(System.Boolean)">
            <summary>
            Reads a UInt16 from the stream and returns the value.
            </summary>
            <param name="littleEndian">Is the value in little endian.</param>
            <returns>A UInt16 value.</returns>
        </member>
        <member name="M:Emergent.Toolbench.IO.BinaryStream.ReadInt32">
            <summary>
            Reads an Int32 from the stream and returns the value.
            </summary>
            <returns>An Int32 value.</returns>
        </member>
        <member name="M:Emergent.Toolbench.IO.BinaryStream.ReadInt32(System.Boolean)">
            <summary>
            Reads an Int32 from the stream and returns the value.
            </summary>
            <param name="littleEndian">Is the value in little endian.</param>
            <returns>An Int32 value.</returns>
        </member>
        <member name="M:Emergent.Toolbench.IO.BinaryStream.ReadUInt32">
            <summary>
            Reads a UInt32 from the stream and returns the value.
            </summary>
            <returns>A UInt32 value.</returns>
        </member>
        <member name="M:Emergent.Toolbench.IO.BinaryStream.ReadUInt32(System.Boolean)">
            <summary>
            Reads a UInt32 from the stream and returns the value.
            </summary>
            <param name="littleEndian">Is the value in little endian.</param>
            <returns>A UInt32 value.</returns>
        </member>
        <member name="M:Emergent.Toolbench.IO.BinaryStream.ReadInt64">
            <summary>
            Reads an Int64 from the stream and returns the value.
            </summary>
            <returns>An Int64 value.</returns>
        </member>
        <member name="M:Emergent.Toolbench.IO.BinaryStream.ReadInt64(System.Boolean)">
            <summary>
            Reads an Int64 from the stream and returns the value.
            </summary>
            <param name="littleEndian">Is the value in little endian.</param>
            <returns>An Int64 value.</returns>
        </member>
        <member name="M:Emergent.Toolbench.IO.BinaryStream.ReadUInt64">
            <summary>
            Reads a UInt64 from the stream and returns the value.
            </summary>
            <returns>A UInt64 value.</returns>
        </member>
        <member name="M:Emergent.Toolbench.IO.BinaryStream.ReadUInt64(System.Boolean)">
            <summary>
            Reads a UInt64 from the stream and returns the value.
            </summary>
            <param name="littleEndian">Is the value in little endian.</param>
            <returns>A UInt64 value.</returns>
        </member>
        <member name="M:Emergent.Toolbench.IO.BinaryStream.ReadSingle">
            <summary>
            Reads a Single from the stream and returns the value.
            </summary>
            <returns>A Single value.</returns>
        </member>
        <member name="M:Emergent.Toolbench.IO.BinaryStream.ReadSingle(System.Boolean)">
            <summary>
            Reads a Single from the stream and returns the value.
            </summary>
            <param name="littleEndian">Is the value in little endian.</param>
            <returns>A Single value.</returns>
        </member>
        <member name="M:Emergent.Toolbench.IO.BinaryStream.ReadDouble">
            <summary>
            Reads a Double from the stream and returns the value.
            </summary>
            <returns>A Double value.</returns>
        </member>
        <member name="M:Emergent.Toolbench.IO.BinaryStream.ReadDouble(System.Boolean)">
            <summary>
            Reads a Double from the stream and returns the value.
            </summary>
            <param name="littleEndian">Is the value in little endian.</param>
            <returns>A Double value.</returns>
        </member>
        <member name="M:Emergent.Toolbench.IO.BinaryStream.ReadDecimal">
            <summary>
            Reads a Decimal from the stream and returns the value.
            </summary>
            <returns>A Decimal value.</returns>
        </member>
        <member name="M:Emergent.Toolbench.IO.BinaryStream.ReadDecimal(System.Boolean)">
            <summary>
            Reads a Decimal from the stream and returns the value.
            </summary>
            <param name="littleEndian">Is the value in little endian.</param>
            <returns>A Decimal value.</returns>
        </member>
        <member name="M:Emergent.Toolbench.IO.BinaryStream.ReadGuid">
            <summary>
            Reads a Guid from the stream and returns the value.
            </summary>
            <returns>The Guid read from the stream.</returns>
        </member>
        <member name="M:Emergent.Toolbench.IO.BinaryStream.ReadGuid(System.Boolean)">
            <summary>
            Reads a Guid from the stream and returns the value.
            </summary>
            <param name="littleEndian">Is the value in little endian.</param>
            <returns>The Guid read from the stream.</returns>
        </member>
        <member name="M:Emergent.Toolbench.IO.BinaryStream.ReadString">
            <summary>
            Reads a string after reading the size of the string off the stream.
            </summary>
            <returns>A string.</returns>
        </member>
        <member name="M:Emergent.Toolbench.IO.BinaryStream.ReadString(System.Text.Encoding)">
            <summary>
            Reads a string after reading the size of the string off the stream.
            </summary>
            <param name="encoding">The encoding of the string.</param>
            <returns>A string.</returns>
        </member>
        <member name="M:Emergent.Toolbench.IO.BinaryStream.ReadString(System.Text.Encoding,System.Int32)">
            <summary>
            Reads a string of the given size and encoding off the stream.
            </summary>
            <param name="encoding">The encoding of the string.</param>
            <param name="length">The length of the string</param>
            <returns>A string.</returns>
        </member>
        <member name="M:Emergent.Toolbench.IO.BinaryStream.ReadStringZeroTerminated">
            <summary>
            Reads a zero terminating string.
            </summary>
            <returns>The string.</returns>
        </member>
        <member name="M:Emergent.Toolbench.IO.BinaryStream.ReadStringZeroTerminated(System.Text.Encoding)">
            <summary>
            Reads a zero terminating string of the provided encoding.
            </summary>
            <param name="encoding">The string encoding.</param>
            <returns>The string.</returns>
        </member>
        <member name="M:Emergent.Toolbench.IO.BinaryStream.Write(System.Byte[])">
            <summary>
            Writes the entire buffer to the stream.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.IO.BinaryStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Writes the provided buffer of bytes to the stream.
            </summary>
            <param name="buffer">The buffer to write from.</param>
            <param name="offset">The offset in the buffer to write from.</param>
            <param name="count">The number of bytes to write.</param>
        </member>
        <member name="M:Emergent.Toolbench.IO.BinaryStream.Write(System.Object)">
            <summary>
            Attempts to write an object to the stream. If it is a supported primitive type or if it
            supports the IStreamable interface it will be written. Otherwise an exception will be
            thrown.
            </summary>
            <param name="value">The value to write.</param>
        </member>
        <member name="M:Emergent.Toolbench.IO.BinaryStream.Write(System.Object,System.Boolean)">
            <summary>
            Attempts to write an object to the stream. If it is a supported primitive type or if it
            supports the IStreamable interface it will be written. Otherwise an exception will be
            thrown.
            </summary>
            <param name="value">The value to write.</param>
            <param name="littleEndian">Should the value be written in little endian if it's
            supported.</param>
        </member>
        <member name="M:Emergent.Toolbench.IO.BinaryStream.WriteBoolean(System.Boolean)">
            <summary>
            Writes a boolean value to the stream.
            </summary>
            <param name="value">The value to write.</param>
        </member>
        <member name="M:Emergent.Toolbench.IO.BinaryStream.WriteByte(System.Byte)">
            <summary>
            Writes a byte out to the stream.
            </summary>
            <param name="value">The value to write.</param>
        </member>
        <member name="M:Emergent.Toolbench.IO.BinaryStream.WriteSByte(System.SByte)">
            <summary>
            Writes a signed byte to the stream.
            </summary>
            <param name="value">The value to write.</param>
        </member>
        <member name="M:Emergent.Toolbench.IO.BinaryStream.WriteInt16(System.Int16)">
            <summary>
            Writes an Int16 to the stream.
            </summary>
            <param name="value">The value to write.</param>
        </member>
        <member name="M:Emergent.Toolbench.IO.BinaryStream.WriteInt16(System.Int16,System.Boolean)">
            <summary>
            Writes an Int16 to the stream.
            </summary>
            <param name="value">The value to write.</param>
            <param name="littleEndian">Should the value be written as little endian.</param>
        </member>
        <member name="M:Emergent.Toolbench.IO.BinaryStream.WriteUInt16(System.UInt16)">
            <summary>
            Writes a UInt16 to the stream.
            </summary>
            <param name="value">The value to write.</param>
        </member>
        <member name="M:Emergent.Toolbench.IO.BinaryStream.WriteUInt16(System.UInt16,System.Boolean)">
            <summary>
            Writes a UInt16 to the stream.
            </summary>
            <param name="value">The value to write.</param>
            <param name="littleEndian">Should the value be written as little endian.</param>
        </member>
        <member name="M:Emergent.Toolbench.IO.BinaryStream.WriteInt32(System.Int32)">
            <summary>
            Writes an Int32 to the stream.
            </summary>
            <param name="value">The value to write.</param>
        </member>
        <member name="M:Emergent.Toolbench.IO.BinaryStream.WriteInt32(System.Int32,System.Boolean)">
            <summary>
            Writes an Int32 to the stream.
            </summary>
            <param name="value">The value to write.</param>
            <param name="littleEndian">Should the value be written as little endian.</param>
        </member>
        <member name="M:Emergent.Toolbench.IO.BinaryStream.WriteUInt32(System.UInt32)">
            <summary>
            Writes a UInt32 to the stream.
            </summary>
            <param name="value">The value to write.</param>
        </member>
        <member name="M:Emergent.Toolbench.IO.BinaryStream.WriteUInt32(System.UInt32,System.Boolean)">
            <summary>
            Writes a UInt32 to the stream.
            </summary>
            <param name="value">The value to write.</param>
            <param name="littleEndian">Should the value be written as little endian.</param>
        </member>
        <member name="M:Emergent.Toolbench.IO.BinaryStream.WriteInt64(System.Int64)">
            <summary>
            Writes an Int64 to the stream.
            </summary>
            <param name="value">The value to write.</param>
        </member>
        <member name="M:Emergent.Toolbench.IO.BinaryStream.WriteInt64(System.Int64,System.Boolean)">
            <summary>
            Writes an Int64 to the stream.
            </summary>
            <param name="value">The value to write.</param>
            <param name="littleEndian">Should the value be written as little endian.</param>
        </member>
        <member name="M:Emergent.Toolbench.IO.BinaryStream.WriteUInt64(System.UInt64)">
            <summary>
            Writes a UInt64 to the stream.
            </summary>
            <param name="value">The value to write.</param>
        </member>
        <member name="M:Emergent.Toolbench.IO.BinaryStream.WriteUInt64(System.UInt64,System.Boolean)">
            <summary>
            Writes a UInt64 to the stream.
            </summary>
            <param name="value">The value to write.</param>
            <param name="littleEndian">Should the value be written as little endian.</param>
        </member>
        <member name="M:Emergent.Toolbench.IO.BinaryStream.WriteSingle(System.Single)">
            <summary>
            Writes a Single to the stream.
            </summary>
            <param name="value">The value to write.</param>
        </member>
        <member name="M:Emergent.Toolbench.IO.BinaryStream.WriteSingle(System.Single,System.Boolean)">
            <summary>
            Writes a Single to the stream.
            </summary>
            <param name="value">The value to write.</param>
            <param name="littleEndian">Should the value be written as little endian.</param>
        </member>
        <member name="M:Emergent.Toolbench.IO.BinaryStream.WriteDouble(System.Double)">
            <summary>
            Writes a Double to the stream.
            </summary>
            <param name="value">The value to write.</param>
        </member>
        <member name="M:Emergent.Toolbench.IO.BinaryStream.WriteDouble(System.Double,System.Boolean)">
            <summary>
            Writes a Double to the stream.
            </summary>
            <param name="value">The value to write.</param>
            <param name="littleEndian">Should the value be written as little endian.</param>
        </member>
        <member name="M:Emergent.Toolbench.IO.BinaryStream.WriteGuid(System.Guid)">
            <summary>
            Writes a Guid to the stream.
            </summary>
            <param name="value">The value to write.</param>
        </member>
        <member name="M:Emergent.Toolbench.IO.BinaryStream.WriteGuid(System.Guid,System.Boolean)">
            <summary>
            Writes a Guid to the stream.
            </summary>
            <param name="value">The value to write.</param>
            <param name="littleEndian">Should the value be written as little endian.</param>
        </member>
        <member name="M:Emergent.Toolbench.IO.BinaryStream.WriteString(System.String)">
            <summary>
            Writes a string to the stream.
            </summary>
            <param name="value">The value to write.</param>
        </member>
        <member name="M:Emergent.Toolbench.IO.BinaryStream.WriteString(System.String,System.Text.Encoding)">
            <summary>
            Writes a string to the stream.
            </summary>
            <param name="value">The value to write.</param>
            <param name="encoding">The encoding of the string.</param>
        </member>
        <member name="M:Emergent.Toolbench.IO.BinaryStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            Seeks into the stream if it's supported.
            </summary>
            <param name="offset">The offset to seek from the origin.</param>
            <param name="origin">Where to begin seeking from.</param>
            <returns>The new position within the stream.</returns>
        </member>
        <member name="M:Emergent.Toolbench.IO.BinaryStream.CreateSection(System.Int32)">
            <summary>
            Reads a section of the stream into another BinaryStream and returns the section as its
            own stream. Use this when you want to ensure that no buffer overflows occur by isolating
            sections of the stream to parse.
            </summary>
            <param name="size">The number of bytes to read into the section.</param>
            <returns>The new isolated stream.</returns>
        </member>
        <member name="M:Emergent.Toolbench.IO.BinaryStream.Flush">
            <summary>
            Flushes the buffer.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.IO.BinaryStream.SetLength(System.Int64)">
            <summary>
            Sets the length of the stream if it is supported.
            </summary>
            <param name="value">The length of the new stream.</param>
        </member>
        <member name="P:Emergent.Toolbench.IO.BinaryStream.Length">
            <summary>
            Gets the length in bytes of the stream.
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.IO.BinaryStream.Position">
            <summary>
            Gets or sets the position within the current stream.
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.IO.BinaryStream.Encoding">
            <summary>
            Gets or sets the encoding for the stream.
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.IO.BinaryStream.IsLittleEndian">
            <summary>
            Gets or sets a value indicating if the stream is little endian by default.
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.IO.BinaryStream.CanRead">
            <summary>
            Gets a value indicating if the stream can be read from.
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.IO.BinaryStream.CanSeek">
            <summary>
            Gets a value indicating if the stream supports seeking.
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.IO.BinaryStream.CanWrite">
            <summary>
            Gets a value indicating if the stream can be written to.
            </summary>
        </member>
        <member name="T:Emergent.Toolbench.ExtensionPoints">
            <summary>
            Holds the extension point ids for this assembly.
            </summary>
        </member>
        <member name="F:Emergent.Toolbench.ExtensionPoints.Runnable">
            <summary>
            Built-in core extension point id providing an application entry point.
            </summary>
        </member>
        <member name="F:Emergent.Toolbench.ExtensionPoints.RUNNABLE_ID">
            <summary>
            Attribute on the Runnable extension that uniquely identifies the extension.
            </summary>
        </member>
        <member name="F:Emergent.Toolbench.ExtensionPoints.RUNNABLE_CLASS">
            <summary>
            Attribute on the Runnable extension that specifies the class to factory for
            implementation.
            </summary>
        </member>
        <member name="F:Emergent.Toolbench.ExtensionPoints.PlatformExit">
            <summary>
            A built-in extension point that provides a handler for exiting the platform.
            </summary>
        </member>
        <member name="F:Emergent.Toolbench.ExtensionPoints.LogTarget">
            <summary>
            A built-in extension point that provides a way for extensions to direct logging output.
            </summary>
        </member>
        <member name="F:Emergent.Toolbench.ExtensionPoints.NotificationHandler">
            <summary>
            A built-in extension point that provides a generic way for plug-ins to react to
            notifications sent out by plug-ins. This is so plug-ins have a generic way of handling
            information coming from other plug-ins, without having to be loaded first to hook
            events.
            </summary>
        </member>
        <member name="F:Emergent.Toolbench.ExtensionPoints.CrashHandler">
            <summary>
            The crash handler extension point allows plug-ins to be called when a crash occurs 
            inside Toolbench. These crash handlers can both capture crash information and will also
            be called to report their information when Toolbench shuts down. Crash handlers must
            implement the ICrashHandler interface.
            </summary>
        </member>
        <member name="T:Emergent.Toolbench.NotificationRegistry">
            <summary>
            The <see cref="T:Emergent.Toolbench.NotificationRegistry"/> class maintains the list of notifications and 
            notification handlers. It does not expose them directly, but exposes functions for notifying
            any registered notifications.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.NotificationRegistry.#cctor">
            <summary>
            The static constructor for the notification registry will load any notifications
            and notification handlers when accessed for the first time.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.NotificationRegistry.LoadNotificationHandlers">
            <summary>
            This method will load the descriptors to any defined notification handler. It will log a
            warning if it comes across any handler registered for a non-existent notification.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.NotificationRegistry.Notify(System.String,System.String,System.Object,System.EventArgs)">
            <summary>
            The notify method will notify all handlers registered with the the notification id
            specified in the first argument. However, if the handler has chosen to not load the
            plug-in then the plug-in will not be loaded and the handler will not be called.
            </summary>
            <param name="notifyId">The notification id.</param>
            <param name="parameter">The event parameter to pass.</param>
            <param name="sender">The notification sender.</param>
            <param name="e">Additional notification arguments.</param>
        </member>
        <member name="T:Emergent.Toolbench.NotificationRegistry.NotificationDescriptor">
            <summary>
            The <see cref="T:Emergent.Toolbench.NotificationRegistry.NotificationDescriptor"/> is a container class for the notification 
            information and any registered descriptors.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.NotificationRegistry.NotificationDescriptor.#ctor(System.String)">
            <summary>
            Constructs an instance of the notification descriptor.
            </summary>
            <param name="id">The notification id.</param>
        </member>
        <member name="M:Emergent.Toolbench.NotificationRegistry.NotificationDescriptor.Notify(System.Object,Emergent.Toolbench.NotificationEventArgs)">
            <summary>
            Notifies all handlers registered with this notification.
            </summary>
            <param name="sender">The notification sender.</param>
            <param name="e">The notification event arguments.</param>
        </member>
        <member name="P:Emergent.Toolbench.NotificationRegistry.NotificationDescriptor.Id">
            <summary>
            Gets the notification unique identifier.
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.NotificationRegistry.NotificationDescriptor.Handlers">
            <summary>
            Gets a list of notification handler descriptors.
            </summary>
        </member>
        <member name="T:Emergent.Toolbench.NotificationRegistry.NotificationHandlerDescriptor">
            <summary>
            The <see cref="T:Emergent.Toolbench.NotificationRegistry.NotificationHandlerDescriptor"/> class describes a notification handler
            and handles all the loading logic for the handler.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.NotificationRegistry.NotificationHandlerDescriptor.#ctor(Emergent.Toolbench.IElementData)">
            <summary>
            Constructs an instance of the <see cref="T:Emergent.Toolbench.NotificationRegistry.NotificationHandlerDescriptor"/>.
            </summary>
            <param name="data">The element data.</param>
        </member>
        <member name="P:Emergent.Toolbench.NotificationRegistry.NotificationHandlerDescriptor.Id">
            <summary>
            Gets the notification id that the handler is attached to.
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.NotificationRegistry.NotificationHandlerDescriptor.Parameter">
            <summary>
            Gets the parameter to pass when the notification is invoked.
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.NotificationRegistry.NotificationHandlerDescriptor.Class">
            <summary>
            Gets the class to load when the notification is invoked.
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.NotificationRegistry.NotificationHandlerDescriptor.LoadPlugin">
            <summary>
            Gets a value indicating if the plug-in should be loaded in order to call the
            handler.
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.NotificationRegistry.NotificationHandlerDescriptor.Handler">
            <summary>
            Gets an instance of the handler. Calling this method will load the handler if the
            conditions are right. If the handler fails to load, or doesn't want to be loaded
            when called, this property will return <value>null</value>.
            </summary>
        </member>
        <member name="T:Emergent.Toolbench.NotificationEventArgs">
            <summary>
            Class for packaging arguments associated with a notification event.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.NotificationEventArgs.#ctor(System.String,System.String,System.EventArgs)">
            <summary>
            Initializes a new instance of the <see cref="T:Emergent.Toolbench.NotificationEventArgs"/> class.
            </summary>
            <param name="eventId">The event id.</param>
            <param name="parameter">The event parameter.</param>
            <param name="optionalArgs">Optional event arguments.</param>
        </member>
        <member name="P:Emergent.Toolbench.NotificationEventArgs.EventId">
            <summary>
            Gets the event id.
            </summary>
            <value>The event id.</value>
        </member>
        <member name="P:Emergent.Toolbench.NotificationEventArgs.Parameter">
            <summary>
            Gets the event parameter.
            </summary>
            <value>The event parameter.</value>
        </member>
        <member name="P:Emergent.Toolbench.NotificationEventArgs.OptionalArgs">
            <summary>
            Gets the optional event arguments.
            </summary>
            <value>The optional event arguments.</value>
        </member>
        <member name="T:Emergent.Toolbench.IO.FileEx">
            <summary>
            A utility class for checking various information about a file.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.IO.FileEx.SetFileReadOnly(System.String,System.Boolean)">
            <summary>
            Sets the file's read-only status.
            </summary>
            <param name="file">The file path.</param>
            <param name="readOnly">true to set the file to read-only, false to clear read-only
            status.</param>
        </member>
        <member name="M:Emergent.Toolbench.IO.FileEx.IsReadOnly(System.Uri)">
            <summary>
            Determines whether the file is read-only.
            </summary>
            <param name="file">The file.</param>
            <returns><c>true</c> if the file is read-only; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Emergent.Toolbench.IO.FileEx.IsReadOnly(System.String)">
            <summary>
            Determines whether the file is read-only.
            </summary>
            <param name="file">The file path.</param>
            <returns><c>true</c> if the file is read-only; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Emergent.Toolbench.IO.FileEx.Exists(System.String)">
            <summary>
            Checks if the file exists with the default timeout FileEx.FileTimeout.
            </summary>
            <param name="file">The file path to check.</param>
            <returns><c>true</c> if the file exists; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Emergent.Toolbench.IO.FileEx.Exists(System.String,System.Int32)">
            <summary>
            This function checks if a file exists with a timeout. So if the file is located on a
            network share or some other location where the platform could potentially take a very
            long time to timeout, you can forcefully place a constraint on how long the check should
            take.
            </summary>
            <param name="file">The file path.</param>
            <param name="millisecondTimeout">The timeout in milliseconds.</param>
            <returns><c>true</c> if the file exists; otherwise, <c>false</c>.</returns>
        </member>
        <member name="P:Emergent.Toolbench.IO.FileEx.FileTimeout">
            <summary>
            Gets or sets the file timeout.
            </summary>
            <value>The file timeout in milliseconds.</value>
        </member>
        <member name="T:Emergent.Toolbench.IO.FileEx.FileExistsThread">
            <summary>
            This class is essentially a threaded functor whose job is to contain all the information
            needed by the thread that is checking if a file exists. Though it is not asynchronous,
            when called, the main thread waits to join the spawned thread, and if it does not within
            the timeout, the new thread is aborted.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.IO.FileEx.FileExistsThread.FileExists(System.String,System.Int32)">
            <summary>
            Checks if a file exists in a threaded, but blocked fashion so that the thread can be
            aborted.
            </summary>
            <param name="file">The file path.</param>
            <param name="millisecondTimeout">The timeout in milliseconds.</param>
            <returns><c>true</c> if the file exists; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Emergent.Toolbench.IO.FileEx.FileExistsThread.InternalFileExists">
            <summary>
            Called by the new thread to check if the file exists.
            </summary>
        </member>
        <member name="T:Emergent.Toolbench.ILogTarget">
            <summary>
            This interface defines a class that handles incoming log statements.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.ILogTarget.Log(System.String,System.String,System.String,System.Object,System.DateTime)">
            <summary>
            Handle an incoming log message.
            </summary>
            <param name="Channel">The channel.</param>
            <param name="Message">The message to log.</param>
            <param name="DetailedMessage">The detailed message to log.</param>
            <param name="AssociatedObject">The associated object, if there is 
            one.</param>
            <param name="TimeStamp">The timestamp of the log.</param>
        </member>
        <member name="T:Emergent.Toolbench.INotificationHandler">
            <summary>
            The <see cref="T:Emergent.Toolbench.INotificationHandler"/> interface is used by handlers of notifications.
            Implementations will be called by the notification system if they setup the appropriate
            extension point to point to this handler.
            </summary>
            <remarks>Handlers will only be instantiated once and will remain in memory.</remarks>
        </member>
        <member name="M:Emergent.Toolbench.INotificationHandler.OnNotify(System.Object,Emergent.Toolbench.NotificationEventArgs)">
            <summary>
            The OnNotify function is called when the handler is invoked.
            </summary>
            <param name="sender">The sender of the invocation.</param>
            <param name="e">The arguments.</param>
        </member>
        <member name="T:Emergent.Toolbench.IListEx">
            <summary>
            Common List extension methods
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.IListEx.CopyAnyFrom(System.Collections.IList,System.Collections.IEnumerable)">
            <summary>
            Take a Copy from another list.
            </summary>
            <param name="list">The target</param>
            <param name="enumerable">The source to copy from</param>
        </member>
        <member name="M:Emergent.Toolbench.IListEx.CopyFrom``1(System.Collections.Generic.IList{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Take a Copy from another list.
            </summary>
            <param name="list">The target</param>
            <param name="enumerable">The source to copy from</param>
        </member>
        <member name="M:Emergent.Toolbench.IListEx.AddAnyRange(System.Collections.IList,System.Collections.IEnumerable)">
            <summary>
            Adds the range of items to a list.
            </summary>
            <param name="list">The target list</param>
            <param name="enumerable">The source</param>
        </member>
        <member name="M:Emergent.Toolbench.IListEx.AddRange``1(System.Collections.Generic.IList{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Adds the range of items to a list of a specific type.
            </summary>
            <typeparam name="T">The type of items in the list.</typeparam>
            <param name="list">The list to add to.</param>
            <param name="enumerable">The items to add to the list.</param>
        </member>
        <member name="M:Emergent.Toolbench.IListEx.InsertRange``1(System.Collections.Generic.IList{``0},System.Int32,System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Inserts a range of object at the specified position.
            </summary>
            <typeparam name="T">The type of items in the list.</typeparam>
            <param name="list">The list to insert on.</param>
            <param name="index">The insertion index.</param>
            <param name="enumerable">The items to insert.</param>
        </member>
        <member name="M:Emergent.Toolbench.IListEx.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})">
            <summary>
            Executes an action for each item in the enumaration. This is not deferred.
            </summary>
            <typeparam name="T">The type of items in the list.</typeparam>
            <param name="source">The source enumeration to execute the actions on.</param>
            <param name="action">The action to execute.</param>
            <returns>The source enumeration.</returns>
        </member>
        <member name="M:Emergent.Toolbench.IListEx.RemoveFirst``1(System.Collections.Generic.IList{``0},System.Func{``0,System.Boolean})">
            <summary>
            Removes the first item matching the predicate.
            </summary>
            <typeparam name="TSource">The type of item in the target list.</typeparam>
            <param name="list">The target list.</param>
            <param name="predicate">The predicate.</param>
            <returns>Returns true if a matching item was found</returns>
        </member>
        <member name="M:Emergent.Toolbench.IListEx.RemoveAll``1(System.Collections.Generic.IList{``0},System.Func{``0,System.Boolean})">
            <summary>
            Removes all the items matching the predicate.
            </summary>
            <typeparam name="TSource">The source</typeparam>
            <param name="list">The target list.</param>
            <param name="predicate">The predicate.</param>
        </member>
        <member name="M:Emergent.Toolbench.IListEx.RemoveAll(System.Collections.IList)">
            <summary>
            Removes all items in a list by calling Remove on each item.
            This function does not use Clear().  This is useful in cases when
            INotifyCollectionChanged observers do not implement the Clear action, but only the Add
            and Remove.
            </summary>
            <param name="list">The target list.</param>
        </member>
        <member name="M:Emergent.Toolbench.IListEx.IndexOf``1(System.Collections.Generic.IList{``0},System.Func{``0,System.Boolean})">
            <summary>
            Returns the index the of a matching item.
            </summary>
            <typeparam name="TSource">The type of the source.</typeparam>
            <param name="list">The type of item at the target.</param>
            <param name="predicate">The predicate to find the matching item.</param>
            <returns>The index of the matching item.</returns>
        </member>
        <member name="M:Emergent.Toolbench.IListEx.ToArrayList(System.Collections.IList)">
            <summary>
            Converts the list to an array list.
            </summary>
            <param name="list">The incoming list.</param>
            <returns>The resulting array list.</returns>
        </member>
        <member name="T:Emergent.Toolbench.Collections.OnDemandCollection`1">
            <summary>
            The OnDemandCollection is a observable collection, for WPF binding. The collection is
            created empty by default, and will only populate itself on demand, when the iterator is
            accessed. The user must populate the collection in the NeedPopulateCollection event. You can
            call Invalidate() to invalidate the data inside the collection. It will be repopulated
            later, when the iterator is accessed again.
            </summary>
            <typeparam name="T">The type inside the collection.</typeparam>
        </member>
        <member name="M:Emergent.Toolbench.Collections.OnDemandCollection`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Emergent.Toolbench.Collections.OnDemandCollection`1"/> class.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.Collections.OnDemandCollection`1.Collection_CollectionChanged(System.Object,System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Handles the CollectionChanged event of the inner collection.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The event object.</param>
        </member>
        <member name="M:Emergent.Toolbench.Collections.OnDemandCollection`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>An enumerator that can be used to iterate through the collection.</returns>
        </member>
        <member name="M:Emergent.Toolbench.Collections.OnDemandCollection`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>An enumerator that can be used to iterate through the collection.</returns>
        </member>
        <member name="M:Emergent.Toolbench.Collections.OnDemandCollection`1.Clear">
            <summary>
            Clears all items in the collection.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.Collections.OnDemandCollection`1.Add(`0)">
            <summary>
            Adds an item to the collection. You must use this function when populating the
            collection.
            </summary>
            <param name="item">The item to add.</param>
        </member>
        <member name="M:Emergent.Toolbench.Collections.OnDemandCollection`1.Invalidate">
            <summary>
            Invalidates the data inside the collection. This will cause the NeedPopulateCollection
            event to be fired again.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.Collections.OnDemandCollection`1.Validate">
            <summary>
            Populates the collection, if the data is invalid.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.Collections.OnDemandCollection`1.IndexOf(`0)">
            <summary>
            Determines the index of a specific item in the list.
            </summary>
            <param name="item">The object to locate in the list.</param>
            <returns>The index of <paramref name="item"/> if found in the list; otherwise, -1.
            </returns>
        </member>
        <member name="M:Emergent.Toolbench.Collections.OnDemandCollection`1.Insert(System.Int32,`0)">
            <summary>
            Inserts an item into the list at the specified index.
            </summary>
            <param name="index">The zero-based index at which <paramref name="item"/> should be 
            inserted.</param>
            <param name="item">The object to insert into the list.</param>
        </member>
        <member name="M:Emergent.Toolbench.Collections.OnDemandCollection`1.RemoveAt(System.Int32)">
            <summary>
            Removes the item at the specified index.
            </summary>
            <param name="index">The zero-based index of the item to remove.</param>
        </member>
        <member name="M:Emergent.Toolbench.Collections.OnDemandCollection`1.Contains(`0)">
            <summary>
            Determines whether the collection contains a specific value.
            </summary>
            <param name="item">The object to locate in the collection.</param>
            <returns>true if <paramref name="item"/> is found in the collection; otherwise, false.
            </returns>
        </member>
        <member name="M:Emergent.Toolbench.Collections.OnDemandCollection`1.CopyTo(`0[],System.Int32)">
            <summary>
            Copies the elements of the collection to an array, starting at a particular index.
            </summary>
            <param name="array">The one-dimensional array that is the destination of the elements
            copied from the collection. The array must have zero-based indexing.</param>
            <param name="arrayIndex">The zero-based index in <paramref name="array"/> at which 
            copying begins.</param>
        </member>
        <member name="M:Emergent.Toolbench.Collections.OnDemandCollection`1.Remove(`0)">
            <summary>
            Removes the first occurrence of a specific object from the collection.
            </summary>
            <param name="item">The object to remove from the collection.</param>
            <returns>true if <paramref name="item"/> was successfully removed from the collection;
            otherwise, false. This method also returns false if <paramref name="item"/> is not found
            in the collection.</returns>
        </member>
        <member name="E:Emergent.Toolbench.Collections.OnDemandCollection`1.CollectionChanged">
            <summary>
            Occurs when the collection changes.
            </summary>
        </member>
        <member name="E:Emergent.Toolbench.Collections.OnDemandCollection`1.NeedPopulateCollection">
            <summary>
            Notification when you need to populate the collection.
            </summary>
        </member>
        <member name="E:Emergent.Toolbench.Collections.OnDemandCollection`1.Validating">
            <summary>
            Occurs when a validation is about to begin. The validation process notifies that a
            repopulation is required, which generates many notifications in an unpredictable order.
            By listening to this event, observers can ignore a bunch of notifications.
            </summary>
        </member>
        <member name="E:Emergent.Toolbench.Collections.OnDemandCollection`1.Validated">
            <summary>
            Occurs when a validation is finished. The validation process notifies that a
            repopulation is required, which generates many notifications in an unpredictable order.
            By listening to this event, observers can ignore a bunch of notifications.
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.Collections.OnDemandCollection`1.IsValid">
            <summary>
            Gets the valid state of the list.
            </summary>
            <value><c>true</c> if this instance is valid; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Emergent.Toolbench.Collections.OnDemandCollection`1.Item(System.Int32)">
            <summary>
            Gets or sets the value at the provided index.
            </summary>
            <param name="index">The index.</param>
            <returns>The object at the index.</returns>
        </member>
        <member name="P:Emergent.Toolbench.Collections.OnDemandCollection`1.Count">
            <summary>
            Gets the number of elements contained in the collection.
            </summary>
            <value>The number of elements contained in the collection.</value>
        </member>
        <member name="P:Emergent.Toolbench.Collections.OnDemandCollection`1.IsReadOnly">
            <summary>
            Gets a value indicating whether the collection is read-only.
            </summary>
            <value>false, indicating that the collection is not read-only.</value>
        </member>
        <member name="T:Emergent.Toolbench.Collections.NumericStringComparer">
            <summary>
            The <see cref="T:Emergent.Toolbench.Collections.NumericStringComparer"/> can be used to sort values that contain numbers when
            you want those numbers to be sorted as numbers and not by their character value.
            </summary>
        </member>
        <member name="F:Emergent.Toolbench.Collections.NumericStringComparer.Default">
            <summary>
            Singleton instance of the <see cref="T:Emergent.Toolbench.Collections.NumericStringComparer"/>.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.Collections.NumericStringComparer.Compare(System.Object,System.Object)">
            <summary>
            Compares two strings and returns the result.
            </summary>
            <param name="x">The first string.</param>
            <param name="y">The second string.</param>
            <returns>An indication of their relative values.</returns>
        </member>
        <member name="M:Emergent.Toolbench.Collections.NumericStringComparer.Compare(System.String,System.String)">
            <summary>
            Compares two strings and returns the result.
            </summary>
            <param name="x">The first string.</param>
            <param name="y">The second string.</param>
            <returns>An indication of their relative values.</returns>
        </member>
        <member name="T:Emergent.Toolbench.PlatformResources">
            <summary>
            The <see cref="T:Emergent.Toolbench.PlatformResources"/> class manages resources in plug-ins. It is used to load
            satellite assemblies in the plug-ins to display localized information about the plug-ins so
            that the  plug-ins themselves do not have to be loaded.
            </summary>
        </member>
        <member name="T:Emergent.Toolbench.ObservableObject">
            <summary>
            The <see cref="T:Emergent.Toolbench.ObservableObject"/> is designed to implement some basic functionality 
            needed by consumers of <see cref="T:System.ComponentModel.INotifyPropertyChanged"/>.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.ObservableObject.RaisePropertyChanging(System.String,System.Object,System.Object)">
            <summary>
            This should be used to notify internal and external listeners that the property is 
            changing.
            </summary>
            <param name="propertyName">The property name</param>
            <param name="oldValue">The old value.</param>
            <param name="newValue">The new value.</param>
        </member>
        <member name="M:Emergent.Toolbench.ObservableObject.OnPropertyChanging(System.String,System.Object,System.Object)">
            <summary>
            Called by <see cref="M:Emergent.Toolbench.ObservableObject.RaisePropertyChanging(System.String,System.Object,System.Object)"/> when a property is about to change.
            </summary>
            <param name="propertyName">The property name.</param>
            <param name="oldValue">The old property value.</param>
            <param name="newValue">The new property value.</param>
        </member>
        <member name="M:Emergent.Toolbench.ObservableObject.RaisePropertyChanged(System.String)">
            <summary>
            This should be used to notify internal and external listeners that the property has 
            changed.
            </summary>
            <param name="propertyName">The property name</param>
        </member>
        <member name="M:Emergent.Toolbench.ObservableObject.OnPropertyChanged(System.String)">
            <summary>
            Called by <see cref="M:Emergent.Toolbench.ObservableObject.RaisePropertyChanged(System.String)"/> when a property is about to change.
            </summary>
            <param name="propertyName">The property name</param>
        </member>
        <member name="E:Emergent.Toolbench.ObservableObject.PropertyChanging">
            <summary>
            Occurs when a property value is changing.
            </summary>
        </member>
        <member name="E:Emergent.Toolbench.ObservableObject.PropertyChanged">
            <summary>
            Occurs when a property value changes.
            </summary>
        </member>
        <member name="F:Emergent.Toolbench.PlatformResources.m_resourceMap">
            <summary>
            This maps "PluginId.Culture" to a satellite assembly path that contains the resources
            for that culture. The satellite assembly that is actually mapped to may be different
            from the intended culture because the culture needed might be completely non-existent,
            and so to reduce repetitive checks, a mapping to the "next in the line of resources" is
            made - which may be a parent culture or the fallback culture.
            </summary>
        </member>
        <member name="F:Emergent.Toolbench.PlatformResources.m_resources">
            <summary>
            This maps the satellite assembly location to it's resource set. This was done because
            multiple cultures may point to the same resource set, based on <code>m_resourceMap
            </code>.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.PlatformResources.#ctor">
            <summary>
            Initializes the static information needed by the platform resource manager.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.PlatformResources.GetResources(Emergent.Toolbench.IPluginDescriptor)">
            <summary>
            Gets the resource set for a plug-in based on the current culture.
            </summary>
            <param name="plugin">The plug-in whose resource to get.</param>
            <returns>The resource set.</returns>
        </member>
        <member name="M:Emergent.Toolbench.PlatformResources.GetResources(Emergent.Toolbench.IPluginDescriptor,System.Globalization.CultureInfo)">
            <summary>
            Gets the resource set for a plug-in based on the provided culture. If the plug-in does
            not support that culture the plug-in's backup culture will be used.
            </summary>
            <param name="plugin">The plug-in whose resource to get.</param>
            <param name="culture">The culture to use.</param>
            <returns>The resource set.</returns>
        </member>
        <member name="M:Emergent.Toolbench.PlatformResources.GetResourcePath(Emergent.Toolbench.IPluginDescriptor,System.Globalization.CultureInfo)">
            <summary>
            When looking for a resource, the resource sets attempt to load in the same order as the
            resources themselves. Also, a mapping is generated based on what resource sets are
            found. So, suppose I need a resource for Japanese, but the entire Japanese resource set
            does not exist. The DLL returned by this function will most likely end up being the
            fallback culture DLL, as if it was the Japanese DLL. The reason for this is so the next
            time resources are required fewer lookups and file checks will need to be performed,
            because we went ahead and made the resources pointed to by the Japanese culture the same
            as the fallback culture.
            </summary>
            <param name="plugin">The plug-in.</param>
            <param name="culture">The desired culture.</param>
            <returns>The assembly path where the resources are located.</returns>
        </member>
        <member name="M:Emergent.Toolbench.PlatformResources.GetString(Emergent.Toolbench.IPluginDescriptor,System.String)">
            <summary>
            Looks up a string in a plug-in's resources based on the current culture. If the resource
            name is not found, it will attempt to locate the string in the fallback culture resource
            table of the plug-in. If that fails, <value>null</value> is returned.
            </summary>
            <param name="plugin">The plug-in to search in.</param>
            <param name="name">The resource name.</param>
            <returns>The resource string if it can be found.</returns>
        </member>
        <member name="M:Emergent.Toolbench.PlatformResources.GetString(Emergent.Toolbench.IPluginDescriptor,System.String,System.Boolean)">
            <summary>
            Looks up a string in a plug-in's resources based on the current culture. If the resource
            name is not found, it will attempt to locate the string in the fallback culture resource
            table of the plug-in. If that fails, <value>null</value> is returned.
            </summary>
            <param name="plugin">The plug-in to search in.</param>
            <param name="name">The resource name.</param>
            <param name="ignoreCase">Ignore the case of the resource name?</param>
            <returns>The resource string if it can be found.</returns>
        </member>
        <member name="M:Emergent.Toolbench.PlatformResources.Get``1(Emergent.Toolbench.IPluginDescriptor,System.String)">
            <summary>
            Looks up an object in a plug-in's resources based on the current culture. If the
            resource name is not found, it will attempt to locate the object in the fallback culture
            resource table of the plug-in. If that fails, <value>null</value> is returned.
            </summary>
            <typeparam name="T">The type to return.</typeparam>
            <param name="plugin">The plug-in to search in.</param>
            <param name="name">The resource name.</param>
            <returns>The resource if it can be found.</returns>
        </member>
        <member name="M:Emergent.Toolbench.PlatformResources.Get``1(Emergent.Toolbench.IPluginDescriptor,System.String,System.Boolean)">
            <summary>
            Looks up an object in a plug-in's resources based on the current culture. If the
            resource name is not found, it will attempt to locate the object in the fallback culture
            resource table of the plug-in. If that fails, <value>null</value> is returned.
            </summary>
            <typeparam name="T">The type to return.</typeparam>
            <param name="plugin">The plug-in to search in.</param>
            <param name="name">The resource name.</param>
            <param name="ignoreCase">Ignore the case of the resource name?</param>
            <returns>The resource if it can be found.</returns>
        </member>
        <member name="P:Emergent.Toolbench.PlatformResources.CurrentCulture">
            <summary>
            Gets or sets the default culture used when looking up resource information from a
            localized source.
            </summary>
        </member>
        <member name="T:Emergent.Toolbench.StandardServiceBase">
            <summary>
            A baseline implementation of the <see cref="T:Emergent.Toolbench.IService"/> interface.
            </summary>
        </member>
        <member name="T:Emergent.Toolbench.IService">
            <summary>
            This interface is used by objects that need to act like singletons in
            the toolbench. Services are accessible by all plug-ins assuming they 
            have been added to the <see cref="T:Emergent.Toolbench.IServiceProvider"/> class.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.IService.Initialize">
            <summary>
            Allows a service to perform initialization code.
            </summary>
            <exception cref="T:Emergent.Toolbench.PlatformException">Thrown if a catastrophic error occurs during
            initialization.</exception>
        </member>
        <member name="P:Emergent.Toolbench.IService.Name">
            <summary>
            Gets the name of this service. Services must have unique names.
            </summary>
            <value>The name.</value>
        </member>
        <member name="M:Emergent.Toolbench.StandardServiceBase.Initialize">
            <summary>
            Allows a service to perform initialization code.
            </summary>
            <exception cref="T:Emergent.Toolbench.PlatformException">Thrown is a catastrophic error occurs during
            initialization.</exception>
        </member>
        <member name="M:Emergent.Toolbench.StandardServiceBase.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting
            unmanaged resources.
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.StandardServiceBase.Name">
            <summary>
            Gets the name of this service. Services must have unique names.
            </summary>
            <value>The service name.</value>
        </member>
        <member name="T:Emergent.Toolbench.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.Properties.Resources.ArgumentParseError">
            <summary>
              Looks up a localized string similar to An error occurred parsing the command line arguments. The correct format is -command or -command option.  Use -help for a full list of available commands..
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.Properties.Resources.CanNotFindAttributeName">
            <summary>
              Looks up a localized string similar to Can not find attribute name &quot;{0}&quot;..
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.Properties.Resources.CircularDependencyDetected">
            <summary>
              Looks up a localized string similar to Circular dependency detected!.
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.Properties.Resources.CouldNotFindType">
            <summary>
              Looks up a localized string similar to Could not locate specified object type &quot;{0}&quot; in the currently activated plug-in assemblies..
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.Properties.Resources.DirtyFileWriterClosed">
            <summary>
              Looks up a localized string similar to The DirtyFileWriter has already been closed..
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.Properties.Resources.DuplicateExtensionPoint">
            <summary>
              Looks up a localized string similar to Duplicate extension point found &quot;{0}&quot; in plugin &quot;{1}&quot;..
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.Properties.Resources.ElementDataEmptyError">
            <summary>
              Looks up a localized string similar to Can not be empty..
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.Properties.Resources.ErrorAssemblyLoadMissingDll">
            <summary>
              Looks up a localized string similar to Error while loading &quot;{0}&quot;. Unable to find &quot;{1}&quot;..
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.Properties.Resources.ErrorAssemblyLoadMissingDllTitle">
            <summary>
              Looks up a localized string similar to Error.
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.Properties.Resources.ErrorWhileParsing">
            <summary>
              Looks up a localized string similar to Error while parsing &quot;{0}&quot;..
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.Properties.Resources.ExistingPluginSameVersion">
            <summary>
              Looks up a localized string similar to The plug-in &quot;{0}&quot; with version &quot;{0}&quot; has already been registered..
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.Properties.Resources.ExistingService">
            <summary>
              Looks up a localized string similar to There is already an existing service registered with the interface &quot;{0}&quot;.
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.Properties.Resources.FailedToCreatePluginEntry">
            <summary>
              Looks up a localized string similar to Failed to create plugin entry for &quot;{0}&quot;..
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.Properties.Resources.FailedToStartPluginEntry">
            <summary>
              Looks up a localized string similar to Failed to start plug-in entry point for &apos;{0}&apos; because it threw an exception..
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.Properties.Resources.FileOperationCancelled">
            <summary>
              Looks up a localized string similar to File operation cancelled..
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.Properties.Resources.FoundLocalCopyOfPlugin">
            <summary>
              Looks up a localized string similar to Found local copy of the plugin &quot;{0}&quot; in the install path of plugin &quot;{1}&quot;..
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.Properties.Resources.InvalidClassType">
            <summary>
              Looks up a localized string similar to Invalid class type. Expected instance of &quot;{0}&quot;.
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.Properties.Resources.InvalidDelegateRerefenceTypeException">
            <summary>
              Looks up a localized string similar to The Target of the IDelegateReference should be of type {0}..
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.Properties.Resources.MalformedRunnable">
            <summary>
              Looks up a localized string similar to Malformed runnable configuration data. Expected runnable element..
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.Properties.Resources.MissingPluginDependency">
            <summary>
              Looks up a localized string similar to Plugin&lt;Name: &quot;{0}&quot; Version: &quot;{1}&quot;&gt; depends on Plugin&lt;Name: &quot;{2}&quot; Version: &quot;{3}&quot;&gt; which does not exist in the plug-in registry..
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.Properties.Resources.NoFallbackSatelliteAssembly">
            <summary>
              Looks up a localized string similar to No fallback culture satellite assembly not found for &quot;{0}&quot;..
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.Properties.Resources.NoPluginActivatorInterface">
            <summary>
              Looks up a localized string similar to The plug-in activator &quot;{0}&quot; does not implement the &quot;{1}&quot; interface..
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.Properties.Resources.NoResourceManifestFound">
            <summary>
              Looks up a localized string similar to No resource manifest was found for plugin &quot;{0}&quot;..
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.Properties.Resources.NoRunnablePlugin">
            <summary>
              Looks up a localized string similar to No plugin found with a runnable extension..
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.Properties.Resources.NoRunnablePluginFound">
            <summary>
              Looks up a localized string similar to No runnable Plugin found..
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.Properties.Resources.PathExceeds2048">
            <summary>
              Looks up a localized string similar to The PATH environment variable exceeds 2048 characters..
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.Properties.Resources.PluginAssemblyHasBadImageFormat">
             <summary>
               Looks up a localized string similar to BadImageFormatException can be caused by several things, including 64 bit applications trying to load 32 bit dlls as if they were 64 bit dlls.  Ensure that your bootloader for Toolbench is explicit in starting as an x86 or x64 application to notify the OS how to correctly load any unmanaged dlls.
            
            They can also be caused by exceptions being thrown during DLL Main..
             </summary>
        </member>
        <member name="P:Emergent.Toolbench.Properties.Resources.PluginRuntimeNull">
            <summary>
              Looks up a localized string similar to The plugin &quot;{0}&quot; runtime object was null and has failed to initalize correctly..
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.Properties.Resources.RecaseDirectoryAbsoluteOnly">
            <summary>
              Looks up a localized string similar to Can only re-case an absolute directory path..
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.Properties.Resources.RecaseDirectoryMustExist">
            <summary>
              Looks up a localized string similar to Can only re-case a directory path that exists..
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.Properties.Resources.RecaseFileAbsoluteOnly">
            <summary>
              Looks up a localized string similar to Can only re-case an absolute file path..
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.Properties.Resources.RecaseFileMustExist">
            <summary>
              Looks up a localized string similar to Can only re-case a file path that exists..
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.Properties.Resources.RunnableExtensionNotFound">
            <summary>
              Looks up a localized string similar to Unable to find the specified runnable extension &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.Properties.Resources.ToolbenchStarting">
            <summary>
              Looks up a localized string similar to Toolbench [{0}] Starting.
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.Properties.Resources.ToolbenchStartTime">
            <summary>
              Looks up a localized string similar to Start Time: {0}.
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.Properties.Resources.UnableToCompleteTracingPluginDependencies">
            <summary>
              Looks up a localized string similar to Unable to complete tracing plugin dependencies..
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.Properties.Resources.UnableToFind">
            <summary>
              Looks up a localized string similar to Unable to find &quot;{0}&quot;..
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.Properties.Resources.UnableToLoad">
            <summary>
              Looks up a localized string similar to Unable to load &quot;{0}&quot;..
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.Properties.Resources.UnableToLoadOrFind">
            <summary>
              Looks up a localized string similar to Unable to load or find &quot;{0}&quot;..
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.Properties.Resources.UnableToLoadTheReflectedAssembly">
            <summary>
              Looks up a localized string similar to unable to load the reflected assembly for plugin &quot;{0}&quot;..
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.Properties.Resources.UnableToSearchForLocalCopiesOfPlugins">
            <summary>
              Looks up a localized string similar to Unable to complete searching for local copies of plugins..
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.Properties.Resources.UnknownExtensionPointError">
            <summary>
              Looks up a localized string similar to Attempted to add the extension &quot;{0}&quot; with an unknown extension point &quot;{1}&quot;..
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.Properties.Resources.UnknownExtensionPointReferenced">
            <summary>
              Looks up a localized string similar to Unknown extension point &quot;{0}&quot; being referenced by extension in plug-in manifest &quot;{1}&quot;..
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.Properties.Resources.UnknownNotification">
            <summary>
              Looks up a localized string similar to No notification has been defined with the id &quot;{0}&quot;.
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.Properties.Resources.UntraceablePluginDependency">
            <summary>
              Looks up a localized string similar to Untraceable Dependency Exception &quot;{0}&quot; does not contain &quot;{1}&quot; in its list of dependent plug-ins in the plugin.xml.  Nor is the dependency traceable from any of the existing dependencies..
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.Properties.Resources.ZeroLengthIllegal">
            <summary>
              Looks up a localized string similar to &quot;{0}&quot; can not have a length of zero..
            </summary>
        </member>
        <member name="T:Emergent.Toolbench.PluginRegistry">
            <summary>
            The plug-in registry is the primary component of the core run-time system. It handles lazy
            loading of plug-ins and plug-in dependencies. Its purpose is to act as a global plug-in
            registry.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.PluginRegistry.#ctor">
            <summary>
            Constructs the plug-in registry. Note, this is done during the boot strapping process by
            the <see cref="T:Emergent.Toolbench.Platform"/> class.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.PluginRegistry.BuildRegistry(System.String,Emergent.Toolbench.ExtensionRegistry)">
            <summary>
            Scans all sub-directories in the bootstrap assembly's 'Plugins' directory and compiles
            the plug-in registry. Note, plug-ins are not actually loaded at this stage, however, all
            meta-data with regards to available plug-ins is processed accordingly. This includes 
            populating the <see cref="T:Emergent.Toolbench.ExtensionRegistry"/> with all known extensions and extension
            points.
            </summary>
            <param name="rootPluginPath">Root path containing all plug-ins.</param>
            <param name="extRegistry">The extension registry which is populated during the plug-in
            discovery process.</param>
        </member>
        <member name="M:Emergent.Toolbench.PluginRegistry.LoadPluginManifestSchema">
            <summary>
            Loads the plug-in manifest schema file.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.PluginRegistry.BuildDescriptors(System.String,Emergent.Toolbench.ExtensionRegistry)">
            <summary>
            Builds the registry's list of descriptors.
            </summary>
            <param name="rootPluginPath">The root plug-in path.</param>
            <param name="extRegistry">The extension registry.</param>
        </member>
        <member name="M:Emergent.Toolbench.PluginRegistry.VerifyPluginDependencies">
            <summary>
            Verifies all plug-in dependencies will be found when plug-ins are loaded in any possible
            order.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.PluginRegistry.HasTraceableDependency(Emergent.Toolbench.PluginDescriptor,Emergent.Toolbench.IPluginDescriptor)">
            <summary>
            Checks to see if a plug-in has a traceable dependency.
            </summary>
            <param name="plugin">The base plug-in to begin tracing from.</param>
            <param name="referencedPlugin">The referenced plug-in to reach.</param>
            <returns><c>true</c> if there is a traceable dependency; otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:Emergent.Toolbench.PluginRegistry.TraceDependency(Emergent.Toolbench.PluginDescriptor,Emergent.Toolbench.IPluginDescriptor,System.Collections.Generic.HashSet{System.String})">
            <summary>
            Performs the tracing for dependencies.
            </summary>
            <param name="plugin">The base plug-in to begin tracing from.</param>
            <param name="referencedPlugin">The dependency to locate.</param>
            <param name="vistedPlugins">The hashset of visited plugins to prevent circular
            references.</param>
            <returns><c>true</c> if there is a traceable dependency; otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:Emergent.Toolbench.PluginRegistry.VerifyNoLocalCopiesOfPlugins">
            <summary>
            Verifies that a plug-in does not contain any local copies of assemblies of any other
            plug-in in its running directory.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.PluginRegistry.GetPluginDescriptor(System.String)">
            <summary>
            Gets a plug-in descriptor with the specified unique identifier.
            </summary>
            <param name="uniqueID">The unique identifier string.</param>
            <returns>A valid plug-in descriptor or null if a plug-in descriptor of the specified id
            does not exist.</returns>
            <remarks>If there are multiple versions of the same plug-in descriptor, the first one
            located will be returned.</remarks>
        </member>
        <member name="M:Emergent.Toolbench.PluginRegistry.GetPluginDescriptor(System.Type)">
            <summary>
            Gets the first plug-in descriptor that has an associated assembly containing the 
            specified type.
            </summary>
            <param name="objectType">The type to search for.</param>
            <returns>The plug-in descriptor.</returns>
        </member>
        <member name="M:Emergent.Toolbench.PluginRegistry.GetPluginDescriptor(System.Reflection.Assembly)">
            <summary>
            Finds the plug-in descriptor that describes the plug-in implemented in the specified
            assembly.
            </summary>
            <param name="assembly">Plug-in assembly.</param>
            <returns>A valid plug-in descriptor or null if the specified assembly is unknown to the
            platform as a plug-in.</returns>
            <remarks>The plug-in version and plug-in run-time assembly must match the specified
            assembly. If the plug-in has not been activated, the specified assembly is compared to
            the plug-in description version and run-time instead of directly comparing the plug-in
            assembly.
            </remarks>
        </member>
        <member name="M:Emergent.Toolbench.PluginRegistry.GetPluginDescriptor(System.Reflection.AssemblyName)">
            <summary>
            Finds a plug-in descriptor based on the name of the assembly.
            </summary>
            <param name="assemblyName">The assembly name.</param>
            <returns>The plug-in descriptor or <value>null</value> if one could not be found.
            </returns>
        </member>
        <member name="M:Emergent.Toolbench.PluginRegistry.GetPluginDescriptors(System.String)">
            <summary>
            Gets all plug-in descriptor versions matching the specified unique identifier.
            </summary>
            <param name="uniqueID">The unique identifier string.</param>
            <returns>A collection of plug-in descriptors matching the specified unique id.</returns>
        </member>
        <member name="M:Emergent.Toolbench.PluginRegistry.GetPluginDescriptor(System.String,System.Version)">
            <summary>
            Gets the plug-in descriptor matching the specified unique identifier and version.
            </summary>
            <param name="uniqueID">The unique identifier string.</param>
            <param name="version">The plug-in version.</param>
            <returns>A valid plug-in descriptor matching the specified query or null if such a
            plug-in descriptor does not exist.</returns>
        </member>
        <member name="M:Emergent.Toolbench.PluginRegistry.BuildRegistryEntry(Emergent.Toolbench.PluginManifest,Emergent.Toolbench.ExtensionRegistry)">
            <summary>
            Parses a single plug-in manifest XML file, extracts the information, and creates new
            entries in the plug-in registry and extension registry where appropriate.
            </summary>
            <param name="manifest">The manifest file.</param>
            <param name="extRegistry">The extension registry.</param>
        </member>
        <member name="P:Emergent.Toolbench.PluginRegistry.PluginDescriptors">
            <summary>
            Gets all plug-in descriptors in the registry.
            </summary>
        </member>
        <member name="T:Emergent.Toolbench.IO.BitConverterEx">
            <summary>
            Additional conversion methods for the <see cref="T:System.BitConverter"/> class.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.IO.BitConverterEx.ToDecimal(System.Byte[],System.Int32)">
            <summary>
            Converts a byte array to a decimal value.
            </summary>
            <param name="bytes">Array including the bytes to convert.</param>
            <param name="offset">An initial offset into the array.</param>
            <returns>The decimal value.</returns>
        </member>
        <member name="M:Emergent.Toolbench.IO.BitConverterEx.GetBytes(System.Decimal)">
            <summary>
            Converts a decimal to a byte array.
            </summary>
            <param name="value">The decimal value.</param>
            <returns>The byte array of the decimal.</returns>
        </member>
        <member name="T:Emergent.Toolbench.PlatformSettings">
            <summary>
            Stores the various settings and configuration for the current instance
            of Toolbench.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.PlatformSettings.#ctor">
            <summary>
            Done to prevent the initialization of Settings outside of the Load
            method.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.PlatformSettings.Load(System.String)">
            <summary>
            Loads the given settings file.
            </summary>
            <param name="filename">The full path to the settings file.</param>
            <returns>A <see cref="T:Emergent.Toolbench.PlatformSettings"/> object containing all of the
            existing settings found in the file.</returns>
        </member>
        <member name="P:Emergent.Toolbench.PlatformSettings.DefaultRunnable">
            <summary>
            The name of the default plug-in to run on the platform 
            initialization.
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.PlatformSettings.Culture">
            <summary>
            Gets or sets the culture to use in Toolbench, if no culture is 
            set the default thread culture is used.
            </summary>
        </member>
        <member name="T:Emergent.Toolbench.ServiceProvider">
            <summary>
            Implements the service provider interface.
            </summary>
        </member>
        <member name="T:Emergent.Toolbench.IServiceProvider">
            <summary>
            This interface provides a means for retrieving <see cref="T:Emergent.Toolbench.IService"/> instances.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.IServiceProvider.GetService``1">
            <summary>
            Gets the service using the template parameter as a class type.
            </summary>
            <typeparam name="T">Type of the service.</typeparam>
            <returns>An instance of the specified service or null if one does not exist of the
            specified type.</returns>
        </member>
        <member name="M:Emergent.Toolbench.IServiceProvider.AddService(Emergent.Toolbench.IService,System.Type)">
            <summary>
            Adds the specified service.
            </summary>
            <param name="service">The service to add.</param>
            <param name="serviceType">Type of the service.</param>
            <exception cref="T:System.ArgumentNullException">Service and type cannot be null.</exception>
            <exception cref="T:Emergent.Toolbench.PlatformException">Thrown if a service with the same name already
            exists.</exception>
        </member>
        <member name="E:Emergent.Toolbench.IServiceProvider.ServiceAdded">
            <summary>
            This event is fired when a new service is added to the service provider.
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.IServiceProvider.Services">
            <summary>
            Gets an enumerable for all active services.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.ServiceProvider.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Emergent.Toolbench.ServiceProvider"/> class.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.ServiceProvider.GetService``1">
            <summary>
            Gets the service using the template parameter as a class type.
            </summary>
            <typeparam name="T">Type of the service.</typeparam>
            <returns>An instance of the specified service or null if one does not exist of the
            specified type.</returns>
        </member>
        <member name="M:Emergent.Toolbench.ServiceProvider.AddService(Emergent.Toolbench.IService,System.Type)">
            <summary>
            Adds the specified service. The service is initialized before it is added to the service
            provider.
            </summary>
            <param name="service">The service.</param>
            <param name="serviceType">Type of the service.</param>
            <exception cref="T:System.ArgumentNullException">Service cannot be null.</exception>
        </member>
        <member name="M:Emergent.Toolbench.ServiceProvider.Dispose">
            <summary>
            Disposes all registered services.
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.ServiceProvider.Services">
            <summary>
            Gets an enumerable for all active services.
            </summary>
        </member>
        <member name="T:Emergent.Toolbench.ServiceEventArgs">
            <summary>
            This class holds event arguments coming from the service provider relating to services.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.ServiceEventArgs.#ctor(Emergent.Toolbench.IService)">
            <summary>
            Initializes a new instance of the <see cref="T:Emergent.Toolbench.ServiceEventArgs"/> class.
            </summary>
            <param name="service">The service.</param>
        </member>
        <member name="P:Emergent.Toolbench.ServiceEventArgs.Service">
            <summary>
            Gets or sets the service.
            </summary>
            <value>The service.</value>
        </member>
        <member name="T:Emergent.Toolbench.IExtensionPoint">
            <summary>
            This interface defines the mechanism by which plug-in allow themselves to be extended,
            customized, or used by other plug-ins. Extension points are defined in the plug-in's
            manifest and attached to by 1 or more <see cref="T:Emergent.Toolbench.IExtension"/> instances.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.IExtensionPoint.GetExtension(System.String)">
            <summary>
            Gets an extension from this extension point. If the specified extension is not found,
            null is returned.
            </summary>
            <param name="extUniqueID">The extension's unique identifier where a unique identifier is
            the name of the plug-in plus '.' plus the extension name.
            (E.g. SamplePlugins.TestPlugin.MyExtension)</param>
            <returns>The requested extension or null if not found.</returns>
        </member>
        <member name="P:Emergent.Toolbench.IExtensionPoint.PluginDescriptor">
            <summary>
            Gets the descriptor for the plug-in containing the extension.
            </summary>
            <value>The plug-in descriptor.</value>
        </member>
        <member name="P:Emergent.Toolbench.IExtensionPoint.Extensions">
            <summary>
            Gets the extensions mapped to this extension point. 
            </summary>
            <value>The extensions or an empty array if no extensions are hooked to this extension
            point.</value>
        </member>
        <member name="P:Emergent.Toolbench.IExtensionPoint.UniqueName">
            <summary>
            Gets the unique identifier of the extension point. The identifier must be unique
            throughout all plug-ins and is usually a combination of the plug-in unique identifier
            concatenated with the name of the extension point.
            </summary>
            <value>The unique name of the extension point.</value>
        </member>
        <member name="P:Emergent.Toolbench.IExtensionPoint.SchemaFile">
            <summary>
            Gets the full path of the schema associated with this extension point.
            </summary>
            <value>The extension point schema file's full path.</value>
        </member>
        <member name="P:Emergent.Toolbench.IExtensionPoint.Schema">
            <summary>
            Gets the XmlSchema associated with this extension point.
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.IExtensionPoint.ConfigurationData">
            <summary>
            Gets the additional XML data defined in the plug-in manifest for the extension point.
            </summary>
            <value>The configuration data or an empty array if no custom configuration data has been
            defined.</value>
        </member>
        <member name="T:Emergent.Toolbench.ExtensionRegistry">
            <summary>
            Internal class which implements the extension registry. It maintains several lists of
            extensions and extension points to facilitate the different queries that user code may
            require.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.ExtensionRegistry.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Emergent.Toolbench.ExtensionRegistry"/> class.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.ExtensionRegistry.GetExtensionPoint(System.String)">
            <summary>
            Gets an extension point with the specified unique identifier.
            </summary>
            <param name="uniqueID">The unique identifier where the unique identifier is unique
            within the registry. This is usually a dot-delimited name containing the plug-in plus
            the extension point name.</param>
            <returns>An extension point or null if not found.</returns>
        </member>
        <member name="M:Emergent.Toolbench.ExtensionRegistry.GetExtension(System.String)">
            <summary>
            Gets an extension with the specified unique identifier.
            </summary>
            <param name="uniqueID">The unique identifier where the unique identifier is unique
            within the registry. This is usually a dot-delimited name containing the plug-in plus
            the extension name.</param>
            <returns>An extension or null if not found.</returns>
        </member>
        <member name="M:Emergent.Toolbench.ExtensionRegistry.AddExtensionPoint(Emergent.Toolbench.IExtensionPoint)">
            <summary>
            Adds a new extension point to the registry.
            </summary>
            <param name="extensionPoint">The new extension point.</param>
            <exception cref="T:Emergent.Toolbench.PlatformException">Thrown if an extension point with the same unique id
            already exists in the registry.</exception>
        </member>
        <member name="M:Emergent.Toolbench.ExtensionRegistry.AddExtensionPoints(System.Collections.ObjectModel.ReadOnlyCollection{Emergent.Toolbench.IExtensionPoint})">
            <summary>
            Adds an array of extension points.
            </summary>
            <param name="extensionPoints">The extension points.</param>
            <exception cref="T:Emergent.Toolbench.PlatformException">Thrown if an extension point with the same unique id
            already exists in the registry.</exception> 
        </member>
        <member name="M:Emergent.Toolbench.ExtensionRegistry.AddExtension(Emergent.Toolbench.Extension)">
            <summary>
            Adds a new extension to the registry. The extension is associated with its extension
            point, however, the actual configuration of the extension point itself is done through
            the plug-in.
            </summary>
            <param name="extension">The extension.</param>
            <exception cref="T:Emergent.Toolbench.PlatformException">Thrown if the extension point specified by the
            extension in not in the registry.</exception>
        </member>
        <member name="M:Emergent.Toolbench.ExtensionRegistry.DestroySchemas">
            <summary>
            Destroys all extension schemas
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.ExtensionRegistry.ExtensionPoints">
            <summary>
            Gets all the extension points in the registry.
            </summary>
            <returns>An array of the extension points. If no extension points are currently in the
            registry an empty array is returned.</returns>
        </member>
        <member name="P:Emergent.Toolbench.ExtensionRegistry.Extensions">
            <summary>
            Gets all the extensions in the registry.
            </summary>
            <returns>An array of the extensions. If no extension are currently in the registry an
            empty array is returned.</returns>
        </member>
        <member name="T:Emergent.Toolbench.Extension">
            <summary>
            Implements the plug-in extension interface.
            </summary>
        </member>
        <member name="T:Emergent.Toolbench.IExtension">
            <summary>
            This interface is used to hook into a plug-in's <see cref="T:Emergent.Toolbench.IExtensionPoint"/> instances. An
            extension is responsible for implementing the contract defined by the extension point.
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.IExtension.PluginDescriptor">
            <summary>
            Gets the descriptor for the plug-in containing the extension.
            </summary>
            <value>The plugin descriptor.</value>
        </member>
        <member name="P:Emergent.Toolbench.IExtension.Name">
            <summary>
            Gets the name of the extension or null if the extension does not have a name.
            </summary>
            <value>The extension name.</value>
        </member>
        <member name="P:Emergent.Toolbench.IExtension.UniqueID">
            <summary>
            Gets a unique identifier or null if the extension does not have a unique identifier.
            </summary>
            <value>The extension unique identifier.</value>
        </member>
        <member name="P:Emergent.Toolbench.IExtension.ExtensionPointUniqueID">
            <summary>
            Gets the unique id for the extension point that the extension is hooked to.
            </summary>
            <value>The extension point unique ID.</value>
        </member>
        <member name="P:Emergent.Toolbench.IExtension.ConfigurationData">
            <summary>
            Gets the additional XML data defined in the plug-in manifest for the extension.
            </summary>
            <value>The configuration data or an empty array if no configuration data was defined.
            </value>
            <remarks>Additional XML data is used the provide the extension point with the data
            required to successfully bind the extension. (Ex: A toolbar item would define its icon
            here.)</remarks>
        </member>
        <member name="M:Emergent.Toolbench.Extension.#ctor(Emergent.Toolbench.IPluginDescriptor,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Emergent.Toolbench.Extension"/> class.
            </summary>
            <param name="pluginDesc">The plug-in descriptor object.</param>
            <param name="name">The name of the extension.</param>
            <param name="uniqueid">The unique identifier for this extension where the unique id is
            defined in the plug-in manifest. It is recommended that the unique id be a combination
            of the plug-in id and the name of the extension.</param>
            <param name="extPointId">The unique identifier for the associated extension point.
            </param>
        </member>
        <member name="M:Emergent.Toolbench.Extension.AddElementData(Emergent.Toolbench.IElementData)">
            <summary>
            Adds a new element data node.
            </summary>
            <param name="data">The custom element data.</param>
        </member>
        <member name="P:Emergent.Toolbench.Extension.PluginDescriptor">
            <summary>
            Gets the descriptor for the plug-in containing the extension.
            </summary>
            <value>The plug-in descriptor.</value>
        </member>
        <member name="P:Emergent.Toolbench.Extension.Name">
            <summary>
            Gets the name of the extension or null if the extension does not have a name.
            </summary>
            <value>The extension name.</value>
        </member>
        <member name="P:Emergent.Toolbench.Extension.UniqueID">
            <summary>
            Gets a unique identifier or null if the extension does not have a unique identifier.
            </summary>
            <value>The extension unique identifier.</value>
        </member>
        <member name="P:Emergent.Toolbench.Extension.ExtensionPointUniqueID">
            <summary>
            Gets the unique identifier for the extension point that the extension is hooked to.
            </summary>
            <value>The extension point unique identifier.</value>
        </member>
        <member name="P:Emergent.Toolbench.Extension.ConfigurationData">
            <summary>
            Gets the additional XML data defined in the plug-in manifest for the extension.
            </summary>
            <value>The configuration data or an empty array if no configuration data was defined.
            </value>
            <remarks>Additional XML data is used to provide the extension point with the data
            required to successfully bind the extension. (Ex: A toolbar item would define its icon
            here.)</remarks>
        </member>
        <member name="T:Emergent.Toolbench.PluginXmlValidationException">
            <summary>
            This exception should be thrown when a plug-in manifest fails schema validation.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.PluginXmlValidationException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Emergent.Toolbench.PluginXmlValidationException"/> class.
            </summary>
            <param name="msg">A message detailing the validation failure.</param>
        </member>
        <member name="T:Emergent.Toolbench.PlatformException">
            <summary>
            This exception should be thrown when an error occurs in plug-ins or during other critical
            run-time operations.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.PlatformException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Emergent.Toolbench.PlatformException"/> class.
            </summary>
            <param name="msg">A descriptive message.</param>
        </member>
        <member name="M:Emergent.Toolbench.PlatformException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Emergent.Toolbench.PlatformException"/> class.
            </summary>
            <param name="msg">A descriptive message.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="T:Emergent.Toolbench.UserRequestHandler">
            <summary>
            The <see cref="T:Emergent.Toolbench.UserRequestHandler"/> delegate is used to request input from the user through
            this anonymous handler.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The event arguments.</param>
            <returns>The request result.</returns>
        </member>
        <member name="T:Emergent.Toolbench.UserRequest">
            <summary>
            The <see cref="T:Emergent.Toolbench.UserRequest"/> can be used to notify or request input from the user through 
            some UI mechanism. Code unable to access the UI layer should use this class as a
            pass-through to the UI layer.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.UserRequest.Prompt(System.String)">
            <summary>
            Prompts the user with a message.
            </summary>
            <param name="message">The message to prompt the user with.</param>
            <returns>The user result, typically <see cref="F:Emergent.Toolbench.UserRequestResult.OK"/></returns>
        </member>
        <member name="M:Emergent.Toolbench.UserRequest.Prompt(System.String,System.String)">
            <summary>
            Prompts the user with a message.
            </summary>
            <param name="title">The title of the message.</param>
            <param name="message">The message to prompt the user with.</param>
            <returns>The user result, typically <see cref="F:Emergent.Toolbench.UserRequestResult.OK"/></returns>
        </member>
        <member name="M:Emergent.Toolbench.UserRequest.Prompt(System.String,System.String,Emergent.Toolbench.UserRequestLevel)">
            <summary>
            Prompts the user with a message.
            </summary>
            <param name="title">The title of the message.</param>
            <param name="message">The message to prompt the user with.</param>
            <param name="level">The level of the message.</param>
            <returns>The user result, typically <see cref="F:Emergent.Toolbench.UserRequestResult.OK"/></returns>
        </member>
        <member name="M:Emergent.Toolbench.UserRequest.Prompt(System.String,System.String,Emergent.Toolbench.UserRequestInput)">
            <summary>
            Prompts the user with a message.
            </summary>
            <param name="title">The title of the message.</param>
            <param name="message">The message to prompt the user with.</param>
            <param name="input">The input options available to the user.</param>
            <returns>The user result.</returns>
        </member>
        <member name="M:Emergent.Toolbench.UserRequest.Prompt(System.String,System.String,Emergent.Toolbench.UserRequestLevel,Emergent.Toolbench.UserRequestInput)">
            <summary>
            Prompts the user with a message.
            </summary>
            <param name="title">The title of the message.</param>
            <param name="message">The message to prompt the user with.</param>
            <param name="level">The level of the message.</param>
            <param name="input">The input options available to the user.</param>
            <returns>The user result.</returns>
        </member>
        <member name="M:Emergent.Toolbench.UserRequest.Prompt(System.String,System.String,Emergent.Toolbench.UserRequestLevel,Emergent.Toolbench.UserRequestInput,Emergent.Toolbench.UserRequestResult)">
            <summary>
            Prompts the user with a message.
            </summary>
            <param name="title">The title of the message.</param>
            <param name="message">The message to prompt the user with.</param>
            <param name="level">The level of the message.</param>
            <param name="input">The input options available to the user.</param>
            <param name="defaultRequest">The default request result.</param>
            <returns>The users result.</returns>
        </member>
        <member name="P:Emergent.Toolbench.UserRequest.RequestHandler">
            <summary>
            Gets or sets the request handler. The request handler is used when a prompt is issued.
            If no handler has been set, <see cref="F:Emergent.Toolbench.UserRequestResult.None"/> is returned.
            </summary>
            <value>The request handler.</value>
        </member>
        <member name="T:Emergent.Toolbench.UserRequestEventArgs">
            <summary>
            The <see cref="T:Emergent.Toolbench.UserRequestEventArgs"/> contains the information to display to the user.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.UserRequestEventArgs.#ctor(System.String,System.String,System.String,Emergent.Toolbench.UserRequestLevel,Emergent.Toolbench.UserRequestInput,Emergent.Toolbench.UserRequestResult)">
            <summary>
            Initializes a new instance of the <see cref="T:Emergent.Toolbench.UserRequestEventArgs"/> class.
            </summary>
            <param name="title">The title.</param>
            <param name="message">The message.</param>
            <param name="details">The details.</param>
            <param name="level">The request level.</param>
            <param name="input">The request input options.</param>
            <param name="defaultResult">The default result.</param>
        </member>
        <member name="P:Emergent.Toolbench.UserRequestEventArgs.Title">
            <summary>
            Gets the title of the prompt.
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.UserRequestEventArgs.Message">
            <summary>
            Gets the message of the prompt.
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.UserRequestEventArgs.Level">
            <summary>
            Gets the user request level for the prompt.
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.UserRequestEventArgs.Input">
            <summary>
            Gets the user input to provide for the prompt.
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.UserRequestEventArgs.DefaultResult">
            <summary>
            Gets the user default result to provide for the prompt.
            </summary>
        </member>
        <member name="T:Emergent.Toolbench.UserRequestResult">
            <summary>
            Any user request will return one of the results from this enum.
            </summary>
        </member>
        <member name="F:Emergent.Toolbench.UserRequestResult.None">
            <summary>
            No result.
            </summary>
        </member>
        <member name="F:Emergent.Toolbench.UserRequestResult.OK">
            <summary>
            Request accepted.
            </summary>
        </member>
        <member name="F:Emergent.Toolbench.UserRequestResult.Cancel">
            <summary>
            Operation cancelled.
            </summary>
        </member>
        <member name="F:Emergent.Toolbench.UserRequestResult.Yes">
            <summary>
            Positive response.
            </summary>
        </member>
        <member name="F:Emergent.Toolbench.UserRequestResult.No">
            <summary>
            Negative response.
            </summary>
        </member>
        <member name="T:Emergent.Toolbench.UserRequestLevel">
            <summary>
            The user request level represents the category the prompt belongs in.
            </summary>
        </member>
        <member name="F:Emergent.Toolbench.UserRequestLevel.None">
            <summary>
            No request level specified.
            </summary>
        </member>
        <member name="F:Emergent.Toolbench.UserRequestLevel.Error">
            <summary>
            Request reports an error.
            </summary>
        </member>
        <member name="F:Emergent.Toolbench.UserRequestLevel.Question">
            <summary>
            Request presents a choice.
            </summary>
        </member>
        <member name="F:Emergent.Toolbench.UserRequestLevel.Warning">
            <summary>
            Request reports a warning.
            </summary>
        </member>
        <member name="F:Emergent.Toolbench.UserRequestLevel.Information">
            <summary>
            Request reports information.
            </summary>
        </member>
        <member name="T:Emergent.Toolbench.UserRequestInput">
            <summary>
            The user request input represents the different options the user will have when the prompt 
            is displayed.
            </summary>
        </member>
        <member name="F:Emergent.Toolbench.UserRequestInput.OK">
            <summary>
            User may only select OK.
            </summary>
        </member>
        <member name="F:Emergent.Toolbench.UserRequestInput.OKCancel">
            <summary>
            User may select OK or Cancel.
            </summary>
        </member>
        <member name="F:Emergent.Toolbench.UserRequestInput.YesNoCancel">
            <summary>
            User may select Yes, No, or Cancel.
            </summary>
        </member>
        <member name="F:Emergent.Toolbench.UserRequestInput.YesNo">
            <summary>
            User may select Yes or No.
            </summary>
        </member>
        <member name="T:Emergent.Toolbench.Collections.OrderedDictionary`2">
            <summary>
            This class is for those situations that require the use of a dictionary but the order of the
            objects is important. You can use the integer indexer to request the objects in the order
            they were added.
            </summary>
            <remarks>The Enumerator of this object will NOT return you an in-order list of the objects,
            so do not use this object with a foreach operator and expect the data to be in order. The
            correct ordering is only achievable through the indexer, so use a for loop.</remarks>
            <typeparam name="K">The key type.</typeparam>
            <typeparam name="T">The value type.</typeparam>
        </member>
        <member name="M:Emergent.Toolbench.Collections.OrderedDictionary`2.#ctor(System.Func{`1,`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Emergent.Toolbench.Collections.OrderedDictionary`2"/> class.
            </summary>
            <param name="keySelector">The key selector function.</param>
        </member>
        <member name="M:Emergent.Toolbench.Collections.OrderedDictionary`2.GetKeyForItem(`1)">
            <summary>
            Called when the key needs to be extracted for an item.
            </summary>
            <param name="item">The element from which to extract the key.</param>
            <returns>The key for the specified element.</returns>
        </member>
        <member name="M:Emergent.Toolbench.Collections.OrderedDictionary`2.TryGetValue(`0,`1@)">
            <summary>
            Gets the value associated with the specified key.
            </summary>
            <param name="key">The key whose value to get.</param>
            <param name="item">When this method returns, the value associated with the specified
            key, if the key is found; otherwise, the default value for the type of the value
            parameter.</param>
            <returns>true if an object with the specified key is found, else false.</returns>
        </member>
        <member name="T:Emergent.Toolbench.IO.DirtyFileWriter">
            <summary>
            This file supports writing to the specified file only if the content serialized in the 
            stream is different than the content of the file on disk. This allows saving only dirty
            content.
            
            This class is disposable and should be used in a using directive before any other
            serializing classes are created. The serializing class should use the 
            <see cref="P:Emergent.Toolbench.IO.DirtyFileWriter.Stream"/> property to write its data.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.IO.DirtyFileWriter.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Emergent.Toolbench.IO.DirtyFileWriter"/> class.
            </summary>
            <param name="filePath">The file path to save the content to.</param>
        </member>
        <member name="M:Emergent.Toolbench.IO.DirtyFileWriter.Finalize">
            <summary>
            Releases unmanaged resources and performs other cleanup operations before the
            <see cref="T:Emergent.Toolbench.IO.DirtyFileWriter"/> is reclaimed by garbage collection.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.IO.DirtyFileWriter.Dispose">
            <summary>
            Calls the <see cref="M:Emergent.Toolbench.IO.DirtyFileWriter.Close"/> method. Safe to call even though <see cref="M:Emergent.Toolbench.IO.DirtyFileWriter.Close"/>
            was called.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.IO.DirtyFileWriter.Close">
            <summary>
            Closes this instance. This method is responsible for computing and comparing the hash of
            the data written to the stream and the one in the file. This method may throw the
            standard IO exceptions.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.IO.DirtyFileWriter.Close(System.Boolean)">
            <summary>
            Closes this instance. This method is responsible for computing and comparing the hash of
            the data written to the stream and the one in the file. This method may throw the
            standard IO exceptions.
            </summary>
            <param name="disposeOfStream">Determines whether or not to dispose of the internal
            stream when close has finished. Depending on the kind of writer that is being used, it
            may be desirable to set this to false.</param>
        </member>
        <member name="M:Emergent.Toolbench.IO.DirtyFileWriter.Cancel">
            <summary>
            Cancels the dirty file write operation.
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.IO.DirtyFileWriter.OverwriteReadOnly">
            <summary>
            Gets or sets a value indicating whether the destination file should be overwritten if it
            is read-only. The default value is <c>false</c>.
            </summary>
            <value><c>true</c> if the read-only should be ignored; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Emergent.Toolbench.IO.DirtyFileWriter.CheckReadOnly">
            <summary>
            Gets or sets a value indicating whether the destination file will be checked for 
            read-only. The default value is <c>true</c>.
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.IO.DirtyFileWriter.FilePath">
            <summary>
            Gets the file path used for the final destination file location.
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.IO.DirtyFileWriter.BeforeWrite">
            <summary>
            Gets or sets an action to perform just before a write occurs after it is determined that
            a write will in fact occur.
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.IO.DirtyFileWriter.AfterWrite">
            <summary>
            Gets or sets an action to perform just after the file is written.
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.IO.DirtyFileWriter.Stream">
            <summary>
            Gets the stream to write the data to be saved.
            </summary>
            <value>The stream.</value>
        </member>
        <member name="P:Emergent.Toolbench.IO.DirtyFileWriter.IsDirty">
            <summary>
            Gets a value indicating whether this instance is dirty.
            </summary>
            <value><c>true</c> if this instance is dirty; otherwise, <c>false</c>.</value>
            <remarks>This method causes a computation of the stream hash in its current state and
            compares it with the file content hash. If this is called before the whole content to
            save is streamed to this instance, the return value may not be what is really needed.
            This should be called after all data to persist was flushed to the <see cref="P:Emergent.Toolbench.IO.DirtyFileWriter.Stream"/>
            but before the <see cref="M:Emergent.Toolbench.IO.DirtyFileWriter.Close"/> or <see cref="M:Emergent.Toolbench.IO.DirtyFileWriter.Dispose"/> methods are called.
            </remarks>
        </member>
        <member name="T:Emergent.Toolbench.IO.DirtyFileWriter.FileHashCache">
            <summary>
            Keeps a mapping of full file name to <see cref="T:Emergent.Toolbench.IO.DirtyFileWriter.FileHash"/> to avoid redundant
            computation.
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.IO.DirtyFileWriter.FileHashCache.Item(System.String)">
            <summary>
            Gets the <see cref="T:Emergent.Toolbench.IO.DirtyFileWriter.FileHash"/> with the
            specified file path.
            </summary>
        </member>
        <member name="T:Emergent.Toolbench.IO.DirtyFileWriter.FileHash">
            <summary>
            Represents the hash information for a file on disk. The hash is recomputed if the file
            on disk is more recent than the computed hash. It is also possible to
            <see cref="M:Emergent.Toolbench.IO.DirtyFileWriter.FileHash.Update(System.String)"/> the hash value externally to avoid having to
            recompute it from the file, hence saving a disk access.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.IO.DirtyFileWriter.FileHash.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Emergent.Toolbench.IO.DirtyFileWriter.FileHash"/> class.
            </summary>
            <param name="filePath">The file path.</param>
        </member>
        <member name="M:Emergent.Toolbench.IO.DirtyFileWriter.FileHash.Update(System.String)">
            <summary>
            Updates the specified hash from a computed value. Can be considered as an override.
            </summary>
            <param name="hash">The hash.</param>
            <remarks>The "override" hash value will be considered as the correct value until the
            file timestamp on disk is more recent than the last override.</remarks>
        </member>
        <member name="M:Emergent.Toolbench.IO.DirtyFileWriter.FileHash.Update">
            <summary>
            Ensures the hash value is current. Invalidates all file info in the case the file is
            deleted from disk.
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.IO.DirtyFileWriter.FileHash.HashValue">
            <summary>
            Gets the hash value of the file.
            </summary>
            <value>The hash value, null if the file doesn't exists.</value>
            <remarks>The hash value is updated if required when this property is used.</remarks>
        </member>
        <member name="T:Emergent.Toolbench.Windows.PEUtility.ImportTableEntry">
            <summary>
            Utility for extracting the attributes of a portable executable (PE) file import table entry.
            The structure is 20 bytes.
            </summary>
        </member>
        <member name="F:Emergent.Toolbench.Windows.PEUtility.ImportTableEntry.ImportLookupTable">
            <summary>
            The import lookup table.
            </summary>
        </member>
        <member name="F:Emergent.Toolbench.Windows.PEUtility.ImportTableEntry.DateTimeStamp">
            <summary>
            The date time stamp.
            </summary>
        </member>
        <member name="F:Emergent.Toolbench.Windows.PEUtility.ImportTableEntry.ForwarderChain">
            <summary>
            The forwarder chain.
            </summary>
        </member>
        <member name="F:Emergent.Toolbench.Windows.PEUtility.ImportTableEntry.NameRVA">
            <summary>
            Name RVA (Relative Virtual Address).
            </summary>
        </member>
        <member name="F:Emergent.Toolbench.Windows.PEUtility.ImportTableEntry.ImportAddressTable">
            <summary>
            Import address table.
            </summary>
        </member>
        <member name="F:Emergent.Toolbench.Windows.PEUtility.ImportTableEntry.Name">
            <summary>
            The name.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.Windows.PEUtility.ImportTableEntry.FromStream(Emergent.Toolbench.IO.BinaryStream)">
            <summary>
            Called when the object is being deserialized from a stream.
            </summary>
            <param name="stream">The stream to read the object information from.</param>
        </member>
        <member name="M:Emergent.Toolbench.Windows.PEUtility.ImportTableEntry.ToStream(Emergent.Toolbench.IO.BinaryStream)">
            <summary>
            Called when the object is being serialized to a stream.
            </summary>
            <param name="stream">The stream to write the object information to.</param>
            <exception cref="T:System.NotImplementedException">Always thrown.</exception>
            <remarks>This method is not implemented.</remarks>
        </member>
        <member name="T:Emergent.Toolbench.Logger">
            <summary>
            Logger class used by all Toolbench applications and plug-ins. The logger provides the
            ability for plug-ins to log errors, information, warnings, etc. through the use of an
            extensible channel system. The logger also supports an extensible log target mechanism so
            plug-ins can implement a log target if they wish to display or capture log messages.
            </summary>
        </member>
        <member name="F:Emergent.Toolbench.Logger.DebugChannel">
            <summary>
            Channel for debug messages.
            </summary>
        </member>
        <member name="F:Emergent.Toolbench.Logger.GameChannel">
            <summary>
            Channel for game messages.
            </summary>
        </member>
        <member name="F:Emergent.Toolbench.Logger.InfoChannel">
            <summary>
            Channel for informational messages.
            </summary>
        </member>
        <member name="F:Emergent.Toolbench.Logger.WarningChannel">
            <summary>
            Channel for warnings.
            </summary>
        </member>
        <member name="F:Emergent.Toolbench.Logger.ErrorChannel">
            <summary>
            Channel for errors.
            </summary>
        </member>
        <member name="F:Emergent.Toolbench.Logger.TestChannel">
            <summary>
            Channel for test output.
            </summary>
        </member>
        <member name="F:Emergent.Toolbench.Logger.FrameworkChannel">
            <summary>
            Channel for Framework logging.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.Logger.#cctor">
            <summary>
            Static <see cref="T:Emergent.Toolbench.Logger"/> constructor, runs once the first time the Logger is
            referenced in code.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.Logger.OnPluginActivated(System.Object,Emergent.Toolbench.PluginActivatedEventArgs)">
            <summary>
            Refresh the log targets in case there are some new ones.
            </summary>
            <param name="sender">The sender.</param>
            <param name="eventArgs">The <see cref="T:Emergent.Toolbench.PluginActivatedEventArgs"/>
            instance containing the event data.</param>
        </member>
        <member name="M:Emergent.Toolbench.Logger.BuildLogTargets">
            <summary>
            Rebuilds the list of log targets.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.Logger.Log(System.String,System.String)">
            <summary>
            Logs the specified channel.
            </summary>
            <param name="channel">The channel.</param>
            <param name="message">The message.</param>
        </member>
        <member name="M:Emergent.Toolbench.Logger.Log(System.String,System.String,System.String,System.Object)">
            <summary>
            Logs the specified channel.
            </summary>
            <param name="channel">The channel.</param>
            <param name="message">The message.</param>
            <param name="detailedMessage">The detailed message.</param>
            <param name="associatedObject">The associated object.</param>
        </member>
        <member name="M:Emergent.Toolbench.Logger.Log(System.String,System.String,System.String)">
            <summary>
            Logs the specified channel.
            </summary>
            <param name="channel">The channel.</param>
            <param name="message">The message.</param>
            <param name="detailedMessage">The detailed message.</param>
        </member>
        <member name="M:Emergent.Toolbench.Logger.Log(System.String,System.String,System.Object)">
            <summary>
            Logs the specified channel.
            </summary>
            <param name="channel">The channel.</param>
            <param name="message">The message.</param>
            <param name="associatedObject">The associated object.</param>
        </member>
        <member name="M:Emergent.Toolbench.Logger.Debug(System.String)">
            <summary>
            Logs a message in debug mode.
            </summary>
            <param name="message">The message to print.</param>
        </member>
        <member name="M:Emergent.Toolbench.Logger.Debug(System.String,System.String)">
            <summary>
            Logs a message in debug mode.
            </summary>
            <param name="message">The message to print.</param>
            <param name="details">The details of the message.</param>
        </member>
        <member name="M:Emergent.Toolbench.Logger.Info(System.String)">
            <summary>
            Logs an information message.
            </summary>
            <param name="message">The message to print.</param>
        </member>
        <member name="M:Emergent.Toolbench.Logger.Info(System.String,System.String)">
            <summary>
            Logs an information message.
            </summary>
            <param name="message">The message to print.</param>
            <param name="details">The message details.</param>
        </member>
        <member name="M:Emergent.Toolbench.Logger.Warning(System.String)">
            <summary>
            Logs a warning message.
            </summary>
            <param name="message">The message to print.</param>
        </member>
        <member name="M:Emergent.Toolbench.Logger.Warning(System.String,System.String)">
            <summary>
            Logs a warning message.
            </summary>
            <param name="message">The message to print.</param>
            <param name="details">The message details.</param>
        </member>
        <member name="M:Emergent.Toolbench.Logger.Warning(System.Exception)">
            <summary>
            Logs a warning based on exception information.
            </summary>
            <param name="ex">The associated exception.</param>
        </member>
        <member name="M:Emergent.Toolbench.Logger.Warning(System.Exception,System.String)">
            <summary>
            Logs a warning based on exception information and a custom message.
            </summary>
            <param name="ex">The associated exception.</param>
            <param name="message">The message to tag the exception with.</param>
        </member>
        <member name="M:Emergent.Toolbench.Logger.Error(System.String)">
            <summary>
            Logs an error message.
            </summary>
            <param name="message">The message to print.</param>
        </member>
        <member name="M:Emergent.Toolbench.Logger.Error(System.String,System.String)">
            <summary>
            Logs an error message.
            </summary>
            <param name="message">The message to print.</param>
            <param name="details">The message details.</param>
        </member>
        <member name="M:Emergent.Toolbench.Logger.Error(System.Exception)">
            <summary>
            Logs an error based on exception information.
            </summary>
            <param name="ex">The associated exception.</param>
        </member>
        <member name="M:Emergent.Toolbench.Logger.Error(System.Exception,System.String)">
            <summary>
            Logs an error based on exception information and a custom message.
            </summary>
            <param name="ex">The associated exception.</param>
            <param name="message">The message to tag the exception with.</param>
        </member>
        <member name="M:Emergent.Toolbench.Logger.FormatLog(System.String,System.String,System.Object[])">
            <summary>
            Logs the specified channel with formatted output.
            </summary>
            <param name="channel">The channel.</param>
            <param name="format">The message format.</param>
            <param name="args">The message arguments.</param>
        </member>
        <member name="M:Emergent.Toolbench.Logger.FormatDebug(System.String,System.Object[])">
            <summary>
            Logs a formatted message in debug mode.
            </summary>
            <param name="format">The message format.</param>
            <param name="args">The message arguments.</param>
        </member>
        <member name="M:Emergent.Toolbench.Logger.FormatInfo(System.String,System.Object[])">
            <summary>
            Logs a formatted information message.
            </summary>
            <param name="format">The message format.</param>
            <param name="args">The message arguments.</param>
        </member>
        <member name="M:Emergent.Toolbench.Logger.FormatWarning(System.String,System.Object[])">
            <summary>
            Logs a formatted warning.
            </summary>
            <param name="format">The message format.</param>
            <param name="args">The message arguments.</param>
        </member>
        <member name="M:Emergent.Toolbench.Logger.FormatWarning(System.Exception,System.String,System.Object[])">
            <summary>
            Logs an exception as a formatted warning.
            </summary>
            <param name="ex">The associated exception.</param>
            <param name="format">The message format.</param>
            <param name="args">The message arguments.</param>
        </member>
        <member name="M:Emergent.Toolbench.Logger.FormatError(System.String,System.Object[])">
            <summary>
            Logs a formatted error.
            </summary>
            <param name="format">The message format.</param>
            <param name="args">The message arguments.</param>
        </member>
        <member name="M:Emergent.Toolbench.Logger.FormatError(System.Exception,System.String,System.Object[])">
            <summary>
            Logs an exception as a formatted error.
            </summary>
            <param name="ex">The associated exception.</param>
            <param name="format">The message format.</param>
            <param name="args">The message arguments.</param>
        </member>
        <member name="M:Emergent.Toolbench.Logger.LogStatic(System.String,System.String,System.String,System.Object)">
            <summary>
            Logs to the specified channel, or places it on the buffer if there are no targets that
            can be logged to.
            </summary>
            <param name="channel">The channel.</param>
            <param name="message">The message.</param>
            <param name="detailedMessage">The detailed message.</param>
            <param name="associatedObject">The associated object.</param>
        </member>
        <member name="M:Emergent.Toolbench.Logger.LogTrace(System.String,System.DateTime,System.String,System.String,System.Object)">
            <summary>
            Writes a log statement to the trace log.
            </summary>
            <param name="channel">The channel to log on.</param>
            <param name="time">The time the log statement was written.</param>
            <param name="message">The message to log.</param>
            <param name="detailedMessage">A detailed message to log.</param>
            <param name="associatedObject">The associated object.</param>
        </member>
        <member name="T:Emergent.Toolbench.Logger.LogRecord">
            <summary>
            Holds the data needed for a single log record. This class is only for internal use
            inside of the <see cref="T:Emergent.Toolbench.Logger"/>.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.Logger.LogRecord.#ctor(System.String,System.String,System.String,System.Object,System.DateTime)">
            <summary>
            Initializes a new instance of the <see cref="T:Emergent.Toolbench.Logger.LogRecord"/> class.
            </summary>
            <param name="channel">The channel.</param>
            <param name="message">The message.</param>
            <param name="detailedMessage">The detailed message.</param>
            <param name="associatedObject">The associated object.</param>
            <param name="timeStamp">The time the log was made.</param>
        </member>
        <member name="P:Emergent.Toolbench.Logger.LogRecord.Channel">
            <summary>
            Gets the channel.
            </summary>
            <value>The channel.</value>
        </member>
        <member name="P:Emergent.Toolbench.Logger.LogRecord.Message">
            <summary>
            Gets the message.
            </summary>
            <value>The message.</value>
        </member>
        <member name="P:Emergent.Toolbench.Logger.LogRecord.DetailedMessage">
            <summary>
            Gets the detailed message.
            </summary>
            <value>The detailed message.</value>
        </member>
        <member name="P:Emergent.Toolbench.Logger.LogRecord.AssociatedObject">
            <summary>
            Gets the associated object.
            </summary>
            <value>The associated object.</value>
        </member>
        <member name="P:Emergent.Toolbench.Logger.LogRecord.TimeStamp">
            <summary>
            Gets the time stamp.
            </summary>
            <value>The time stamp.</value>
        </member>
        <member name="T:Emergent.Toolbench.IO.PathEx">
            <summary>
            A collection of static methods for manipulating file paths.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.IO.PathEx.RecaseFile(System.String)">
            <summary>
            Takes a file path and reconstructs the path using the already defined name on disk so
            that the path matches the naming convention.
            </summary>
            <param name="filePath">The file path to re-case.</param>
            <returns>The re-cased file path.</returns>
            <exception cref="T:System.FormatException"><paramref name="filePath"/> is not an absolute path.
            </exception>
            <exception cref="T:System.InvalidOperationException"><paramref name="filePath"/> does not exist
            on disk.</exception>
        </member>
        <member name="M:Emergent.Toolbench.IO.PathEx.RecaseDirectory(System.String)">
            <summary>
            Takes a directory path and reconstructs the path using the already defined name on disk
            so that the path matches the naming convention.
            </summary>
            <param name="dirPath">The directory path to re-case.</param>
            <returns>The re-cased directory path.</returns>
            <exception cref="T:System.FormatException"><paramref name="dirPath"/> is not an absolute path.
            </exception>
            <exception cref="T:System.InvalidOperationException"><paramref name="dirPath"/> does not exist on
            disk.</exception>
        </member>
        <member name="M:Emergent.Toolbench.IO.PathEx.GetRelativePath(System.String,System.String)">
            <summary>
            Gets the relative path from the source path to the target path.
            </summary>
            <param name="sourcePath">Path to start from.</param>
            <param name="targetPath">The target path.</param>
            <returns>A relative path from the source path to the target path.</returns>
        </member>
        <member name="M:Emergent.Toolbench.IO.PathEx.IsRootedIn(System.String,System.String)">
            <summary>
            Tests whether one directory is a subdirectory of another.
            </summary>
            <param name="childPath">Potential "child" directory.</param>
            <param name="parentPath">Potential "parent" directory.</param>
            <returns>True if the child is descended from the parent.</returns>
            <remarks>A directory is considered its own child. 
            IsSubdirectoryOf("C:\Foo", "C:\Foo") will return True.</remarks>
        </member>
        <member name="M:Emergent.Toolbench.IO.PathEx.GetAbsolutePath(System.String,System.String)">
            <summary>
            Get the absolute path for a relative path from a base path. The base path can be the
            path to a directory or a file. Both will resolve correctly.
            </summary>
            <param name="basePath">The base path.</param>
            <param name="relativePath">The relative path.</param>
            <returns>The absolute path from the base path to the relative path.</returns>
        </member>
        <member name="M:Emergent.Toolbench.IO.PathEx.IsValidFilename(System.String)">
            <summary>
            Determine whether or not the specified string would make a valid filename or path.
            </summary>
            <param name="path">The path to test.</param>
            <returns>Whether or not the path is a valid filename.</returns>
        </member>
        <member name="M:Emergent.Toolbench.IO.PathEx.FilterInvalidFileNameChars(System.String)">
            <summary>
            Filters the invalid file name characters from the incoming filename and returns the
            resulting string.
            </summary>
            <param name="filename">The filename to filter.</param>
            <returns>A valid filename.</returns>
        </member>
        <member name="T:Emergent.Toolbench.IPluginDescriptor">
            <summary>
            This class contains the metadata for a plug-in as well as a reference to the runtime plug-in
            object itself. Most of the data accessed by this interface is stored in the manifest for the
            plug-in.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.IPluginDescriptor.GetExtensionPoint(System.String)">
            <summary>
            Gets an extension point matching the specified unique id.
            </summary>
            <param name="uniqueID">The unique identifier of extension point.</param>
            <returns>The requested extension point or null if not found.</returns>
        </member>
        <member name="M:Emergent.Toolbench.IPluginDescriptor.GetExtension(System.String)">
            <summary>
            Gets an extension matching the specified name.
            </summary>
            <param name="name">The name of the extension. Note, this does not have to be the full
            unique name, just the simple name. Ex: MyExtension instead of MyPlugin.MyExtension.
            </param>
            <returns>The requested extension or null if not found.</returns>
        </member>
        <member name="M:Emergent.Toolbench.IPluginDescriptor.HasDependency(System.String)">
            <summary>
            Checks the list of dependencies for one matching the provided name.
            </summary>
            <param name="pluginUniqueName">The full plug-in name of a dependency to check.</param>
            <returns><c>true</c> if there is a dependency on the specified plug-in; otherwise,
            <c>false</c>.</returns>
        </member>
        <member name="P:Emergent.Toolbench.IPluginDescriptor.Plugin">
            <summary>
            Gets a reference to the runtime instance of the plug-in. Note, if the plug-in object has
            not been instantiated by the runtime due to lazy initialization when this method is
            invoked, the plug-in object will first be instantiated before the reference is returned.
            </summary>
            <value>The plug-in.</value>
        </member>
        <member name="P:Emergent.Toolbench.IPluginDescriptor.PluginClass">
            <summary>
            Gets the full name of the runtime class used to instantiate the plug-in. This is defined
            in the manifest.
            </summary>
            <value>The plug-in class.</value>
        </member>
        <member name="P:Emergent.Toolbench.IPluginDescriptor.AssemblyFileName">
            <summary>
            Gets the name of the runtime library containing the plug-in code. Note, this should be
            the full name of the runtime library, e.g. Emergent.Toolbench.UI.Menus. The library is
            assumed to exist in the same directory as the plug-in manifest.
            </summary>
            <value>The assembly filename.</value>
        </member>
        <member name="P:Emergent.Toolbench.IPluginDescriptor.AssemblyFullPath">
            <summary>
            Gets the absolute full path to the assembly for this plugin.
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.IPluginDescriptor.Assembly">
            <summary>
            Gets the runtime assembly containing the code for the plug-in. If it is not loaded,
            accessing this property will load the assembly.
            </summary>
            <value>The runtime assembly.</value>
        </member>
        <member name="P:Emergent.Toolbench.IPluginDescriptor.ReflectedAssembly">
            <summary>
            Gets the runtime reflected assembly for the plug-in. If the plug-in is already loaded
            then it will return the loaded assembly.
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.IPluginDescriptor.HasAssembly">
            <summary>
            Gets a value indicating whether the plug-in contains an assembly that can be loaded. If
            the plug-in has no assembly then it is a resource only plug-in.
            </summary>
            <value><c>true</c> if this plug-in contains an assembly; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Emergent.Toolbench.IPluginDescriptor.IsLoaded">
            <summary>
            Gets a value indicating if the plug-in has loaded successfully.
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.IPluginDescriptor.Status">
            <summary>
            Gets a value indicating the current status of the plug-in.
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.IPluginDescriptor.ExtensionPoints">
            <summary>
            Gets the extension points defined by the plug-in's manifest. All extension points are
            defined in the plug-in's manifest file.
            </summary>
            <value>The extension points.</value>
        </member>
        <member name="P:Emergent.Toolbench.IPluginDescriptor.Extensions">
            <summary>
            Gets the extensions defined by the plug-in's manifest. All the extensions are defined in
            the plug-in's manifest file.
            </summary>
            <value>The extensions.</value>
        </member>
        <member name="P:Emergent.Toolbench.IPluginDescriptor.Dependencies">
            <summary>
            Gets all the dependencies for the plug-in defined in the plug-in's manifest file.
            </summary>
            <value>An array of the plugin's dependencies. If the plug-in has no dependencies an
            empty array is returned.</value>
        </member>
        <member name="P:Emergent.Toolbench.IPluginDescriptor.InstallPath">
            <summary>
            Gets an absolute path to the root location of the plug-in, e.g. C:\App\Plugins\MyPlugin.
            Note, the install path is determined by the runtime loaded when it is searching for
            plug-ins.
            </summary>
            <value>The install path.</value>
        </member>
        <member name="P:Emergent.Toolbench.IPluginDescriptor.UniqueName">
            <summary>
            Gets the unique name of the plug-in defined in the plug-in's manifest file.
            </summary>
            <value>The unique name.</value>
        </member>
        <member name="P:Emergent.Toolbench.IPluginDescriptor.Name">
            <summary>
            Gets the name of the plug-in where the plug-in name does not have to be unique and is
            considered a more user friendly simple name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:Emergent.Toolbench.IPluginDescriptor.Version">
            <summary>
            Gets the version of the plug-in defined in the plug-in's manifest file. Note, if a
            version is not specified for a plug-in, it is set to 1.0.0.0 by default.
            </summary>
            <value>The version.</value>
        </member>
        <member name="P:Emergent.Toolbench.IPluginDescriptor.MinimumVersion">
            <summary>
            Gets the minimul supported version of this plug-in defined in the plug-in's manifest
            file. Note, if a minimum version is not specified for a plug-in, it is set to 0.0.0.0 by
            default.
            </summary>
            <value>The minimum version.</value>
        </member>
        <member name="P:Emergent.Toolbench.IPluginDescriptor.Provider">
            <summary>
            Gets the provider string which can by used to identify the entity that provides the
            plug-in.
            </summary>
            <value>The provider.</value>
        </member>
        <member name="P:Emergent.Toolbench.IPluginDescriptor.IsLocalized">
            <summary>
            Gets a value indicating if the plug-in is localized.
            </summary>
            <value><c>true</c> if this instance is localized; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Emergent.Toolbench.IPluginDescriptor.Localization">
            <summary>
            Gets the localization for the plug-in.
            </summary>
            <value>The localization.</value>
        </member>
        <member name="T:Emergent.Toolbench.IO.RequestFileWritableResult">
            <summary>
            Type that enumerates possible responses to a request for a writable file.
            </summary>
        </member>
        <member name="F:Emergent.Toolbench.IO.RequestFileWritableResult.Yes">
            <summary>
            The file is permitted to be writable.
            </summary>
        </member>
        <member name="F:Emergent.Toolbench.IO.RequestFileWritableResult.No">
            <summary>
            The file writable status may not be changed.
            </summary>
        </member>
        <member name="F:Emergent.Toolbench.IO.RequestFileWritableResult.Cancel">
            <summary>
            The file write status change request was aborted.
            </summary>
        </member>
        <member name="T:Emergent.Toolbench.IO.RequestFileWritableHandler">
            <summary>
            Delegate to process a request to make a file writable.
            </summary>
            <param name="filePath">Path to the file to be made writable.</param>
            <returns>An enumerated result indicating the outcome of the file request.</returns>
        </member>
        <member name="T:Emergent.Toolbench.IO.FileWriteChecker">
            <summary>
            A static class for attempting to make a file writable. A delegate may be used to provide
            user input for allowing or disallowing the operation.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.IO.FileWriteChecker.RequestFileWritable(System.String)">
            <summary>
            Entry point to the FileWriteChecker, for requesting a writable file.
            </summary>
            <param name="filePath">Path of the file to be made writable.</param>
            <returns>True if the file can be written.</returns>
            <exception cref="T:Emergent.Toolbench.PlatformException">Thrown when the file request is cancelled or fails.
            </exception>
        </member>
        <member name="P:Emergent.Toolbench.IO.FileWriteChecker.RequestFileWritableHandler">
            <summary>
            Access to event for processing a request to make a file writable.
            </summary>
        </member>
        <member name="T:Emergent.Toolbench.GuidEx">
            <summary>
            Additional methods for working with <see cref="T:System.Guid"/>.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.GuidEx.TryParse(System.String,System.Guid@)">
            <summary>
            Attempts to convert a string to a Guid.
            </summary>
            <param name="guidStr">The string to parse.</param>
            <param name="guid">The Guid result.</param>
            <returns>true if the conversion produces a valid Guid.</returns>
        </member>
        <member name="M:Emergent.Toolbench.CrashRegistry.#cctor">
            <summary>
            The static constructor for the notification registry will load any notifications
            and notification handlers when accessed for the first time.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.CrashRegistry.DeliverCrash(System.String)">
            <summary>
            Delivers the crash information to any crash handler extensions.
            </summary>
            <param name="traceFile">The trace file that was written out for Toolbench.</param>
        </member>
        <member name="M:Emergent.Toolbench.CrashRegistry.CrashHandlerDescriptor.#ctor(Emergent.Toolbench.IElementData)">
            <summary>
            Constructs an instance of the <see cref="T:Emergent.Toolbench.CrashRegistry.CrashHandlerDescriptor"/>.
            </summary>
            <param name="data">The element data.</param>
        </member>
        <member name="T:Emergent.Toolbench.INotifyInvalid">
            <summary>
            An interface for defining objects that can advertise entering an invalid state.
            </summary>
        </member>
        <member name="E:Emergent.Toolbench.INotifyInvalid.Invalid">
            <summary>
            Occurs when the object becomes invalid.
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.INotifyInvalid.IsValid">
            <summary>
            Gets or sets a value indicating whether this instance is valid.
            </summary>
            <value><c>true</c> if this instance is valid; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:Emergent.Toolbench.Windows.PEUtility.SectionHeader">
            <summary>
            Utility for extracting the attributes of a portable executable (PE) file section header.
            </summary>
        </member>
        <member name="F:Emergent.Toolbench.Windows.PEUtility.SectionHeader.Name">
            <summary>
            The ASCII name of the section.
            </summary>
        </member>
        <member name="F:Emergent.Toolbench.Windows.PEUtility.SectionHeader.VirtualSize">
            <summary>
            The actual, used size of the section in bytes.
            </summary>
        </member>
        <member name="F:Emergent.Toolbench.Windows.PEUtility.SectionHeader.VirtualAddress">
            <summary>
            In executables, indicates where the section begins in memory.
            </summary>
        </member>
        <member name="F:Emergent.Toolbench.Windows.PEUtility.SectionHeader.SizeOfRawData">
            <summary>
            The size in bytes of data stored for the section.
            </summary>
        </member>
        <member name="F:Emergent.Toolbench.Windows.PEUtility.SectionHeader.PointerToRawData">
            <summary>
            The file offset where the data for the section begins.
            </summary>
        </member>
        <member name="F:Emergent.Toolbench.Windows.PEUtility.SectionHeader.PointerToRelocations">
            <summary>
            The file offset of relocations for this section.
            </summary>
        </member>
        <member name="F:Emergent.Toolbench.Windows.PEUtility.SectionHeader.PointerToLineNumbers">
            <summary>
            The file offset for line numbers for this section.
            </summary>
        </member>
        <member name="F:Emergent.Toolbench.Windows.PEUtility.SectionHeader.RelocationsCount">
            <summary>
            The number of relocations pointed to by the PointerToRelocations field.
            </summary>
        </member>
        <member name="F:Emergent.Toolbench.Windows.PEUtility.SectionHeader.LineNumbersCount">
            <summary>
            The number of line numbers pointed to by the PointerToLineNumbers field.
            </summary>
        </member>
        <member name="F:Emergent.Toolbench.Windows.PEUtility.SectionHeader.Characteristics">
            <summary>
            OR'ed flags indicating additional attributes of this section.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.Windows.PEUtility.SectionHeader.FromStream(Emergent.Toolbench.IO.BinaryStream)">
            <summary>
            Populates the SectionHeader data based on stream input.
            </summary>
            <param name="stream">The input stream with SectionHeader data.</param>
        </member>
        <member name="M:Emergent.Toolbench.Windows.PEUtility.SectionHeader.ToStream(Emergent.Toolbench.IO.BinaryStream)">
            <summary>
            Writes the SectionHeader data to an output stream.
            </summary>
            <param name="stream">The output stream for SectionHeader data.</param>
            <exception cref="T:System.NotImplementedException">Always thrown.</exception>
            <remarks>This method is not implemented.</remarks>
        </member>
        <member name="T:Emergent.Toolbench.IO.ObservableStringWriter">
            <summary>
            A <see cref="T:System.IO.StringWriter"/> that fires events when operations are performed.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.IO.ObservableStringWriter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Emergent.Toolbench.IO.ObservableStringWriter"/> class.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.IO.ObservableStringWriter.#ctor(System.Text.StringBuilder)">
            <summary>
            Initializes a new instance of the <see cref="T:Emergent.Toolbench.IO.ObservableStringWriter"/> class.
            </summary>
            <param name="sb">A <see cref="T:System.Text.StringBuilder"/> target for writing.</param>
        </member>
        <member name="M:Emergent.Toolbench.IO.ObservableStringWriter.Write(System.Char)">
            <summary>
            Writes a character to this instance of the StringWriter.
            </summary>
            <param name="value">The character to write.</param>
        </member>
        <member name="M:Emergent.Toolbench.IO.ObservableStringWriter.Write(System.String)">
            <summary>
            Writes a string to this instance of the StringWriter.
            </summary>
            <param name="value">The string to write.</param>
        </member>
        <member name="M:Emergent.Toolbench.IO.ObservableStringWriter.Write(System.Char[],System.Int32,System.Int32)">
            <summary>
            Writes the specified region of a character array to this instance of the StringWriter.
            </summary>
            <param name="buffer">The character array to read data from.</param>
            <param name="index">The index at which to begin reading from <paramref name="buffer"/>.
            </param>
            <param name="count">The maximum number of characters to write.</param>
        </member>
        <member name="M:Emergent.Toolbench.IO.ObservableStringWriter.Flush">
            <summary>
            Clears all buffers for the current writer and causes any buffered data to be written to
            the underlying device.
            </summary>
        </member>
        <member name="E:Emergent.Toolbench.IO.ObservableStringWriter.Wrote">
            <summary>
            Occurs when characters have been written.
            </summary>
        </member>
        <member name="E:Emergent.Toolbench.IO.ObservableStringWriter.Flushed">
            <summary>
            Occurs when the write buffer has been flushed.
            </summary>
        </member>
        <member name="T:Emergent.Toolbench.IO.StringWriterEventArgs">
            <summary>
            Event arguments class for the <see cref="T:Emergent.Toolbench.IO.ObservableStringWriter"/> Wrote event.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.IO.StringWriterEventArgs.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Emergent.Toolbench.IO.StringWriterEventArgs"/> class.
            </summary>
            <param name="value">The value written.</param>
        </member>
        <member name="P:Emergent.Toolbench.IO.StringWriterEventArgs.Value">
            <summary>
            Gets or sets the value written.
            </summary>
            <value>The value written.</value>
        </member>
        <member name="T:Emergent.Toolbench.Data.PropertyChangingEventArgs">
            <summary>
            An EventArgs class that includes additional information about a PropertyChanging event.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.Data.PropertyChangingEventArgs.#ctor(System.String,System.Object,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Emergent.Toolbench.Data.PropertyChangingEventArgs"/> class.
            </summary>
            <param name="propertyName">Name of the property.</param>
            <param name="oldValue">The old value.</param>
            <param name="newValue">The new value.</param>
        </member>
        <member name="P:Emergent.Toolbench.Data.PropertyChangingEventArgs.OldValue">
            <summary>
            Gets the old value.
            </summary>
            <value>The old value.</value>
        </member>
        <member name="P:Emergent.Toolbench.Data.PropertyChangingEventArgs.NewValue">
            <summary>
            Gets the new value.
            </summary>
            <value>The new value.</value>
        </member>
        <member name="T:Emergent.Toolbench.Collections.ObservableOrderedDictionary`2">
            <summary>
            An extension of <see cref="T:System.Collections.Specialized.OrderedDictionary"/>, which provides access to items in the order
            they were added. This container supports notifications on changes.
            </summary>
            <typeparam name="TKey">The key type.</typeparam>
            <typeparam name="TValue">The value type.</typeparam>
        </member>
        <member name="M:Emergent.Toolbench.Collections.ObservableOrderedDictionary`2.#ctor(System.Func{`1,`0})">
            <summary>
            Initializes a new instance of the
            <see cref="T:Emergent.Toolbench.Collections.ObservableOrderedDictionary`2"/> class.
            </summary>
            <param name="keySelector">The key selector function.</param>
        </member>
        <member name="M:Emergent.Toolbench.Collections.ObservableOrderedDictionary`2.ClearItems">
            <summary>
            Called when the items are cleared from the dictionary.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.Collections.ObservableOrderedDictionary`2.SetItem(System.Int32,`1)">
            <summary>
            Called when the item at a given index is replaced by a new item.
            </summary>
            <param name="index">The zero-based index of the item to be replaced.</param>
            <param name="item">The new item.</param>
        </member>
        <member name="M:Emergent.Toolbench.Collections.ObservableOrderedDictionary`2.InsertItem(System.Int32,`1)">
            <summary>
            Called when an item is inserted.
            </summary>
            <param name="index">The zero-based index at which <paramref name="item"/> should be
            inserted.</param>
            <param name="item">The object to insert.</param>
        </member>
        <member name="M:Emergent.Toolbench.Collections.ObservableOrderedDictionary`2.RemoveItem(System.Int32)">
            <summary>
            Called when an item is removed.
            </summary>
            <param name="index">The index of the element to remove.</param>
        </member>
        <member name="E:Emergent.Toolbench.Collections.ObservableOrderedDictionary`2.CollectionChanged">
            <summary>
            Occurs when the collection changes.
            </summary>
        </member>
        <member name="T:Emergent.Toolbench.Collections.WeakCache`2">
            <summary>
            The <see cref="T:Emergent.Toolbench.Collections.WeakCache`2"/> implements a cache of 
            <see cref="T:System.WeakReference"/>s. To properly use this cache object, it is important that you 
            call <see cref="M:Emergent.Toolbench.Collections.WeakCache`2.Purge"/>, otherwise it will just continue to build up 
            <see cref="T:System.WeakReference"/>s. It is recommended practice when using the 
            <see cref="T:Emergent.Toolbench.Collections.WeakCache`2"/> that you put the <see cref="M:Emergent.Toolbench.Collections.WeakCache`2.Purge"/> on a
            timer.
            </summary>
            <typeparam name="TKey">The key type.</typeparam>
            <typeparam name="TValue">The value type.</typeparam>
        </member>
        <member name="M:Emergent.Toolbench.Collections.WeakCache`2.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Emergent.Toolbench.Collections.WeakCache`2"/> class.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.Collections.WeakCache`2.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Emergent.Toolbench.Collections.WeakCache`2"/> class.
            </summary>
            <param name="trackResurrection">Flag indicating whether to track references after
            finalization.</param>
        </member>
        <member name="M:Emergent.Toolbench.Collections.WeakCache`2.Add(`0,`1)">
            <summary>
            Adds an element with the provided key and value to the collection.
            </summary>
            <param name="key">The object to use as the key of the element to add.</param>
            <param name="value">The object to use as the value of the element to add.</param>
        </member>
        <member name="M:Emergent.Toolbench.Collections.WeakCache`2.ContainsKey(`0)">
            <summary>
            Determines whether the collection contains an element with the specified key.
            </summary>
            <param name="key">The key to locate in the collection.</param>
            <returns>true if the collection contains an element with the key; otherwise, false.
            </returns>
        </member>
        <member name="M:Emergent.Toolbench.Collections.WeakCache`2.Remove(`0)">
            <summary>
            Removes the element with the specified key from the collection.
            </summary>
            <param name="key">The key of the element to remove.</param>
            <returns>true if the element is successfully removed; otherwise, false. This method also
            returns false if <paramref name="key"/> was not found in the original collection.
            </returns>
        </member>
        <member name="M:Emergent.Toolbench.Collections.WeakCache`2.TryGetValue(`0,`1@)">
            <summary>
            Gets the value associated with the specified key.
            </summary>
            <param name="key">The key whose value to get.</param>
            <param name="value">When this method returns, the value associated with the specified
            key, if the key is found; otherwise, the default value for the type of the
            <paramref name="value"/> parameter. This parameter is passed uninitialized.</param>
            <returns>true if the collection contains an element with the specified key; otherwise,
            false.</returns>
        </member>
        <member name="M:Emergent.Toolbench.Collections.WeakCache`2.Add(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Adds an item to the collection.
            </summary>
            <param name="item">The object to add to the collection.</param>
        </member>
        <member name="M:Emergent.Toolbench.Collections.WeakCache`2.Clear">
            <summary>
            Removes all items from the collection.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.Collections.WeakCache`2.Contains(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Determines whether the collection contains a specific key/value pair.
            </summary>
            <param name="item">The object to locate in the collection.</param>
            <returns>true if <paramref name="item"/> is found in the collection; otherwise, false.
            </returns>
        </member>
        <member name="M:Emergent.Toolbench.Collections.WeakCache`2.CopyTo(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Int32)">
            <summary>
            Copies the elements of the collection to an array, starting at a particular index.
            </summary>
            <param name="array">The one-dimensional array that is the destination of the elements
            copied from the collection.</param>
            <param name="arrayIndex">The zero-based index in <paramref name="array"/> at which
            copying begins.</param>
        </member>
        <member name="M:Emergent.Toolbench.Collections.WeakCache`2.Remove(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Removes the first occurrence of a specific object from the collection.
            </summary>
            <param name="item">The object to remove from the collection.</param>
            <returns>true if <paramref name="item"/> was successfully removed from the collection;
            otherwise, false. This method also returns false if <paramref name="item"/> is not found
            in the original collection.</returns>
        </member>
        <member name="M:Emergent.Toolbench.Collections.WeakCache`2.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>An enumerator that can be used to iterate through the collection.</returns>
        </member>
        <member name="M:Emergent.Toolbench.Collections.WeakCache`2.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>An enumerator that can be used to iterate through the collection.</returns>
        </member>
        <member name="M:Emergent.Toolbench.Collections.WeakCache`2.Purge">
            <summary>
            Purges the cache of every <see cref="T:System.WeakReference"/> that is no longer alive.
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.Collections.WeakCache`2.Keys">
            <summary>
            Gets a collection containing the keys.
            </summary>
            <value>The keys in the collection.</value>
        </member>
        <member name="P:Emergent.Toolbench.Collections.WeakCache`2.Values">
            <summary>
            Gets a collection containing the values.
            </summary>
            <value>The values in the collection.</value>
        </member>
        <member name="P:Emergent.Toolbench.Collections.WeakCache`2.Item(`0)">
            <summary>
            Gets or sets the value with the specified key.
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.Collections.WeakCache`2.Count">
            <summary>
            Gets the number of elements contained in the collection.
            </summary>
            <value>The number of elements contained in the collection.</value>
        </member>
        <member name="P:Emergent.Toolbench.Collections.WeakCache`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#IsReadOnly">
            <summary>
            Gets a value indicating whether the collection is read-only.
            </summary>
            <value>false, indicating the collection is not read-only.</value>
        </member>
        <member name="T:Emergent.Toolbench.PluginDescriptor">
            <summary>
            This class implements the plug-in descriptor interface. Note, this is marked as internal
            such that only the tool core should use it while all other consumers of the plug-in
            descriptor should rely on the interface.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.PluginDescriptor.#ctor(System.String,System.String,System.String,System.String,System.Version,System.Version,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Emergent.Toolbench.PluginDescriptor"/> class.
            </summary>
            <param name="name">The simple name of the plug-in.</param>
            <param name="nameKey">The name key.</param>
            <param name="uniqueName">Unique plug-in name.</param>
            <param name="provider">The provider identifier for the plug-in.</param>
            <param name="version">The version of the plug-in. If the version is null, it is set to
            1.0.0.0</param>
            <param name="minVersion">The minimum supported version of the plug-in.</param>
            <param name="installPath">Absolute path to the directory in which the plug-in is
            located.</param>
        </member>
        <member name="M:Emergent.Toolbench.PluginDescriptor.GetExtensionPoint(System.String)">
            <summary>
            Gets an extension point matching the specified unique id.
            </summary>
            <param name="uniqueID">The unique identifier of the extension point.</param>
            <returns>The requested extension point or null if not found.</returns>
        </member>
        <member name="M:Emergent.Toolbench.PluginDescriptor.GetExtension(System.String)">
            <summary>
            Gets an extension matching the specified name.
            </summary>
            <param name="name">The name of the extension. Note, this does not have to be the full
            unique name, just the simple name. Ex: MyExtension instead of MyPlugin.MyExtension.
            </param>
            <returns>The requested extension or null if not found.</returns>
        </member>
        <member name="M:Emergent.Toolbench.PluginDescriptor.HasDependency(System.String)">
            <summary>
            Checks the list of dependencies for one matching the provided name.
            </summary>
            <param name="pluginUniqueName">The full plug-in name of a dependency to check.</param>
            <returns><c>true</c> if there is a dependency on the specified plug-in; otherwise,
            <c>false</c>.</returns>
        </member>
        <member name="M:Emergent.Toolbench.PluginDescriptor.AddExtensionPoint(Emergent.Toolbench.IExtensionPoint)">
            <summary>
            Adds a new extension point.
            </summary>
            <param name="extensionPoint">The extension point.</param>
        </member>
        <member name="M:Emergent.Toolbench.PluginDescriptor.AddExtension(Emergent.Toolbench.IExtension)">
            <summary>
            Adds a new extension.
            </summary>
            <param name="extension">The extension.</param>
        </member>
        <member name="M:Emergent.Toolbench.PluginDescriptor.AddDependency(Emergent.Toolbench.IPluginDependency)">
            <summary>
            Adds a new dependency to this plug-in descriptor.
            </summary>
            <param name="dependency">The dependency.</param>
        </member>
        <member name="P:Emergent.Toolbench.PluginDescriptor.Plugin">
            <summary>
            Gets a reference to the runtime instance of the plug-in. Note, if the plug-in object has
            not been instantiated by the runtime due to lazy initialization when this method is
            invoked, the plug-in object will first be instantiated before the reference is returned.
            </summary>
            <value>The plug-in.</value>
            <remarks>
            If you attempt to debug this property by hovering over it when debugging it will be
            evaluated and it will cause a "Heisenbug" because it will have loaded a plugin by the
            evaluation of the expression.  So we've marked the plugin as non-browsable so that it
            will not appear in the simple property browser of the <see cref="T:Emergent.Toolbench.PluginDescriptor"/>,
            but will if you hover over the value directly in code.
            </remarks>
        </member>
        <member name="P:Emergent.Toolbench.PluginDescriptor.PluginClass">
            <summary>
            Gets the full name of the runtime class used to instantiate the plug-in. This is
            defined in the manifest.
            </summary>
            <value>The plug-in class.</value>
        </member>
        <member name="P:Emergent.Toolbench.PluginDescriptor.AssemblyFileName">
            <summary>
            Gets the name of the runtime library containing the plug-in code. Note, this should be
            the full name of the runtime library, e.g. Emergent.Toolbench.UI.Menus. The library is
            assumed to exist in the same directory as the plug-in manifest.
            </summary>
            <value>The assembly filename.</value>
        </member>
        <member name="P:Emergent.Toolbench.PluginDescriptor.AssemblyFullPath">
            <summary>
            Gets the absolute full path to the assembly for this plug-in.
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.PluginDescriptor.Assembly">
            <summary>
            Gets the runtime assembly containing the code for the plug-in.
            </summary>
            <value>The runtime assembly.</value>
        </member>
        <member name="P:Emergent.Toolbench.PluginDescriptor.ReflectedAssembly">
            <summary>
            Gets the runtime reflected assembly for the plug-in. If the plug-in is already loaded
            then it will return the loaded assembly.
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.PluginDescriptor.HasAssembly">
            <summary>
            Gets a value indicating whether the plug-in contains an assembly that can be loaded. If
            the plug-in has no assembly then it is a resource only plug-in.
            </summary>
            <value><c>true</c> if this plug-in contains an assembly; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Emergent.Toolbench.PluginDescriptor.IsLoaded">
            <summary>
            Gets a value indicating if the plug-in has loaded successfully.
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.PluginDescriptor.Status">
            <summary>
            Gets or sets a value indicating the current status of the plug-in.
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.PluginDescriptor.ExtensionPoints">
            <summary>
            Gets the extension points defined by the plug-in's manifest. All extension points are
            defined in the plug-in's manifest file.
            </summary>
            <value>The extension points.</value>
        </member>
        <member name="P:Emergent.Toolbench.PluginDescriptor.Extensions">
            <summary>
            Gets the extensions defined by the plug-in's manifest. All the extensions are defined in
            the plug-in's manifest file.
            </summary>
            <value>The extensions.</value>
        </member>
        <member name="P:Emergent.Toolbench.PluginDescriptor.Dependencies">
            <summary>
            Gets all the dependencies for the plug-in defined in the plug-in's manifest file.
            </summary>
            <value>An array of the plugin's dependencies. If the plug-in has no dependencies an
            empty array is returned.</value>
        </member>
        <member name="P:Emergent.Toolbench.PluginDescriptor.InstallPath">
            <summary>
            Gets an absolute path to the root location of the plug-in, e.g. C:\App\Plugins\MyPlugin.
            Note, the install path is determined by the runtime loaded when it is searching for
            plug-ins.
            </summary>
            <value>The install path.</value>
        </member>
        <member name="P:Emergent.Toolbench.PluginDescriptor.UniqueName">
            <summary>
            Gets the unique name of the plug-in defined in the plug-in's manifest file.
            </summary>
            <value>The unique name.</value>
        </member>
        <member name="P:Emergent.Toolbench.PluginDescriptor.Name">
            <summary>
            Gets the name of the plug-in where the plug-in name does not have to be unique and is
            considered a more user friendly simple name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:Emergent.Toolbench.PluginDescriptor.Version">
            <summary>
            Gets the version of the plug-in defined in the plug-in's manifest file. Note, if a
            version is not specified for a plug-in, it is set to 1.0.0.0 by default.
            </summary>
            <value>The version.</value>
        </member>
        <member name="P:Emergent.Toolbench.PluginDescriptor.MinimumVersion">
            <summary>
            Gets the minimul supported version of this plug-in defined in the plug-in's manifest
            file. Note, if a minimum version is not specified for a plug-in, it is set to 0.0.0.0 by
            default.
            </summary>
            <value>The minimum version.</value>
        </member>
        <member name="P:Emergent.Toolbench.PluginDescriptor.Provider">
            <summary>
            Gets the provider string which can by used to identify the entity that provides the
            plug-in.
            </summary>
            <value>The provider.</value>
        </member>
        <member name="P:Emergent.Toolbench.PluginDescriptor.IsLocalized">
            <summary>
            Gets a value indicating if the plug-in is localized.
            </summary>
            <value><c>true</c> if this instance is localized; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Emergent.Toolbench.PluginDescriptor.Localization">
            <summary>
            Gets the localization for the plug-in.
            </summary>
            <value>The localization.</value>
        </member>
        <member name="T:Emergent.Toolbench.BitConverterEx">
            <summary>
            Utility methods for converting between byte arrays and decimal values.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.BitConverterEx.ToDecimal(System.Byte[],System.Int32)">
            <summary>
            Converts a byte array to a decimal value.
            </summary>
            <param name="bytes">The bytes to convert.</param>
            <param name="offset">The offset into the byte buffer to begin reading.</param>
            <returns>The decimal value.</returns>
        </member>
        <member name="M:Emergent.Toolbench.BitConverterEx.GetBytes(System.Decimal)">
            <summary>
            Converts a decimal to a byte array.
            </summary>
            <param name="value">The decimal value.</param>
            <returns>The byte array of the decimals.</returns>
        </member>
        <member name="T:Emergent.Toolbench.IO.IXmlSerializable">
            <summary>
            Interface to implement to support LINQ to XML serialization.
            </summary>
            <remarks>
            The interface has the same name as the System.Xml.Serialization.IXmlSerializable one, 
            so care must be taken not to mix the two.
            </remarks>
        </member>
        <member name="M:Emergent.Toolbench.IO.IXmlSerializable.ToXml">
            <summary>
            Implement to return the instance serialized as an XStreamingElement.
            </summary>
            <returns>
            The serialized instance.
            </returns>
        </member>
        <member name="M:Emergent.Toolbench.IO.IXmlSerializable.FromXml(System.Xml.Linq.XElement)">
            <summary>
            Implement to initialize the instance from the date in the XElement.
            </summary>
            <param name="element">The XElement containing the data to load from.</param>
        </member>
        <member name="P:Emergent.Toolbench.IO.IXmlSerializable.XmlElementName">
            <summary>
            Gets the name of the XML element.
            </summary>
            <value>The name of the XML element.</value>
        </member>
        <member name="T:Emergent.Toolbench.IO.XmlSerializableHelper">
            <summary>
            Helper class to help instantiate and load a known object type.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.IO.XmlSerializableHelper.FromXml(System.Type,System.Xml.Linq.XElement)">
            <summary>
            Instantiate the type and call IXmlSerializable.FromXml on it.
            </summary>
            <param name="type">The object type to create.</param>
            <param name="element">The XElement containing the data to pass to 
            IXmlSerializable.FromXml.</param>
            <returns>
            The instantiated and loaded type if it implements IXmlSerializable, null otherwise.
            </returns>
        </member>
        <member name="M:Emergent.Toolbench.IO.XmlSerializableHelper.FromXml``1(System.Xml.Linq.XElement)">
            <summary>
            Instantiate the type and call IXmlSerializable.FromXml on it.
            </summary>
            <typeparam name="T">The object type to create.</typeparam>
            <param name="element">The XElement containing the data to pass to 
            IXmlSerializable.FromXml.</param>
            <returns>
            The instantiated and loaded type if it implements IXmlSerializable, null otherwise.
            </returns>
        </member>
        <member name="T:Emergent.Toolbench.Collections.SyncCollectionHelper`2">
            <summary>
            Helper class to assist in Syncronizing a source ordered collection
            with a destination collection. This is especially useful for MVVM 
            viewmodel classes to Syncronize with their parent model classes.
            </summary>
            <typeparam name="SourceType">The type for the source IList.</typeparam>
            <typeparam name="DestType">The type for the destination IList.</typeparam>
        </member>
        <member name="M:Emergent.Toolbench.Collections.SyncCollectionHelper`2.#ctor(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IList{`1},System.Func{`0,`1})">
            <summary>
            Constructor for the Sync helper.
            </summary>
            <param name="sourceCollection">The source collection to Syncronize with. It must
            derive from INotifyCollectionChanged.</param>
            <param name="destCollection">The destination collection. Its contents will be 
            completely managed by SyncCollectionHelper.</param>
            <param name="typeConverter">Functor to convert from the SourceType to the 
            DestType. If they are the same, there is likely no need to keep the collections
            in Sync.</param>
        </member>
        <member name="M:Emergent.Toolbench.Collections.SyncCollectionHelper`2.#ctor">
            <summary>
            Default constructor. No internal collections are set.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.Collections.SyncCollectionHelper`2.FullySyncCollections">
            <summary>
            Completely Syncronize the collections by clearing the old collection and 
            copying the data again. 
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.Collections.SyncCollectionHelper`2.Connect(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IList{`1},System.Func{`0,`1})">
            <summary>
            Provides abilty for the Sync helper to be set outside of the constructor. If the 
            collection helper has been set originally, it will be disconnected before the
            connect occurs.
            </summary>
            <param name="sourceCollection">The source collection to Syncronize with. It must
            derive from INotifyCollectionChanged.</param>
            <param name="destCollection">The destination collection. Its contents will be 
            completely managed by SyncCollectionHelper.</param>
            <param name="typeConverter">Functor to convert from the SourceType to the 
            DestType. If they are the same, there is likely no need to keep the collections
            in Sync.</param>
        </member>
        <member name="M:Emergent.Toolbench.Collections.SyncCollectionHelper`2.Disconnect">
            <summary>
            Disconnect the two collections. This disconnects the events as well,
            which may be valuable for memory savings.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.Collections.SyncCollectionHelper`2.OnSourceCollectionChanged(System.Object,System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Handle the source collection change events.
            </summary>
            <param name="sender">Sender of the change event.</param>
            <param name="e">Event notifying what changed in the source collection.</param>
        </member>
        <member name="T:Emergent.Toolbench.PluginBase">
            <summary>
            This class is the default implementation of the plug-in interface. It is basically used as a
            run-time placeholder when a loaded plug-in does not declare a run-time plug-in object.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.PluginBase.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Emergent.Toolbench.PluginBase"/> class.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.PluginBase.Initialize(Emergent.Toolbench.IPluginDescriptor)">
            <summary>
            Initializes the plug-in.
            </summary>
            <param name="descriptor">The plug-in descriptor.</param>
        </member>
        <member name="M:Emergent.Toolbench.PluginBase.Start">
            <summary>
            Runs startup logic for the plug-in when it is activated.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.PluginBase.Stop">
            <summary>
            Runs shutdown logic for the plug-in when the application is closing.
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.PluginBase.Descriptor">
            <summary>
            Gets the plug-in descriptor.
            </summary>
            <value>The plug-in descriptor.</value>
        </member>
        <member name="P:Emergent.Toolbench.PluginBase.Resources">
            <summary>
            Gets the plug-in resources.
            </summary>
            <value>The plug-in resources.</value>
        </member>
        <member name="T:Emergent.Toolbench.CollectionEx">
            <summary>
            A utility class of useful collection related methods.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.CollectionEx.ToString(System.Collections.IEnumerable,System.String)">
            <summary>
            Converts a list of objects to a string with the given delimiter between the elements.
            Items in the list that are <value>null</value> will not be added to the string.
            </summary>
            <remarks>If the list is <value>null</value>, an empty string is returned.</remarks>
            <param name="list">The list of items to write out.</param>
            <param name="delimiter">The delimiter to place between each element.</param>
            <returns>The string of elements.</returns>
        </member>
        <member name="M:Emergent.Toolbench.CollectionEx.ToString``1(System.Collections.Generic.IEnumerable{``0},System.String)">
            <summary>
            Converts a list of objects to a string with the given delimiter between the elements.
            Items in the list that are <value>null</value> will not be added to the string.
            </summary>
            <remarks>If the list is <value>null</value>, an empty string is returned.</remarks>
            <param name="list">The list of items to write out.</param>
            <param name="delimiter">The delimiter to place between each element.</param>
            <returns>The string of elements.</returns>
        </member>
        <member name="M:Emergent.Toolbench.CollectionEx.ToString``1(System.Collections.Generic.IEnumerable{``0},System.String,System.Func{``0,System.String})">
            <summary>
            Converts a list of objects to a string with the given delimiter between the elements.
            Items in the list that are <value>null</value> will not be added to the string.
            </summary>
            <remarks>If the list is <value>null</value>, an empty string is returned.</remarks>
            <param name="list">The list of items to write out.</param>
            <param name="delimiter">The delimiter to place between each element.</param>
            <param name="predicate">The selector to use when selecting what to print.</param>
            <returns>The string of elements.</returns>
        </member>
        <member name="T:Emergent.Toolbench.Collections.ThreadSafeDictionary`2">
            <summary>
            A dictionary that implements thread safety with a lock object.
            </summary>
            <typeparam name="TKey">The key type.</typeparam>
            <typeparam name="TValue">The value type.</typeparam>
        </member>
        <member name="M:Emergent.Toolbench.Collections.ThreadSafeDictionary`2.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Emergent.Toolbench.Collections.ThreadSafeDictionary`2"/>
            class.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.Collections.ThreadSafeDictionary`2.#ctor(System.Collections.Generic.IDictionary{`0,`1})">
            <summary>
            Initializes a new instance of the <see cref="T:Emergent.Toolbench.Collections.ThreadSafeDictionary`2"/>
            class.
            </summary>
            <param name="dictionary">The dictionary to wrap.</param>
        </member>
        <member name="M:Emergent.Toolbench.Collections.ThreadSafeDictionary`2.Add(`0,`1)">
            <summary>
            Adds an element with the provided key and value to the dictionary.
            </summary>
            <param name="key">The object to use as the key of the element to add.</param>
            <param name="value">The object to use as the value of the element to add.</param>
        </member>
        <member name="M:Emergent.Toolbench.Collections.ThreadSafeDictionary`2.ContainsKey(`0)">
            <summary>
            Determines whether the dictionary contains an element with the specified key.
            </summary>
            <param name="key">The key to locate in the dictionary.</param>
            <returns>true if the dictionary contains an element with the key; otherwise, false.
            </returns>
        </member>
        <member name="M:Emergent.Toolbench.Collections.ThreadSafeDictionary`2.Remove(`0)">
            <summary>
            Removes the element with the specified key from the dictionary.
            </summary>
            <param name="key">The key of the element to remove.</param>
            <returns>true if the element is successfully removed; otherwise, false. This method also
            returns false if <paramref name="key"/> was not found in the dictionary.
            </returns>
        </member>
        <member name="M:Emergent.Toolbench.Collections.ThreadSafeDictionary`2.TryGetValue(`0,`1@)">
            <summary>
            Gets the value associated with the specified key.
            </summary>
            <param name="key">The key whose value to get.</param>
            <param name="value">When this method returns, the value associated with the specified
            key, if the key is found; otherwise, the default value for the type of the
            <paramref name="value"/> parameter. This parameter is passed uninitialized.</param>
            <returns>true if the dictionary contains an element with the specified key; otherwise,
            false.</returns>
        </member>
        <member name="M:Emergent.Toolbench.Collections.ThreadSafeDictionary`2.Add(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Adds an item to the collection.
            </summary>
            <param name="item">The object to add to the collection.</param>
        </member>
        <member name="M:Emergent.Toolbench.Collections.ThreadSafeDictionary`2.Clear">
            <summary>
            Removes all items from the collection.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.Collections.ThreadSafeDictionary`2.Contains(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Determines whether the collection contains a specific value.
            </summary>
            <param name="item">The object to locate in the collection.</param>
            <returns>true if <paramref name="item"/> is found in the collection; otherwise, false.
            </returns>
        </member>
        <member name="M:Emergent.Toolbench.Collections.ThreadSafeDictionary`2.CopyTo(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Int32)">
            <summary>
            Copies the elements of the collection to an array, starting at a particular index.
            </summary>
            <param name="array">The one-dimensional array that is the destination of the elements
            copied from the collection. The array must have zero-based indexing.</param>
            <param name="arrayIndex">The zero-based index in <paramref name="array"/> at which
            copying begins.</param>
        </member>
        <member name="M:Emergent.Toolbench.Collections.ThreadSafeDictionary`2.Remove(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Removes the first occurrence of a specific object from the collection.
            </summary>
            <param name="item">The object to remove from the collection.</param>
            <returns>true if <paramref name="item"/> was successfully removed from the collection;
            otherwise, false. This method also returns false if <paramref name="item"/> is not found
            in the collection.</returns>
        </member>
        <member name="M:Emergent.Toolbench.Collections.ThreadSafeDictionary`2.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>An enumerator that can be used to iterate through the collection.</returns>
        </member>
        <member name="M:Emergent.Toolbench.Collections.ThreadSafeDictionary`2.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>An enumerator that can be used to iterate through the collection.</returns>
        </member>
        <member name="P:Emergent.Toolbench.Collections.ThreadSafeDictionary`2.Keys">
            <summary>
            Gets a collection containing the keys of the dictionary.
            </summary>
            <value>The keys of the dictionary.</value>
        </member>
        <member name="P:Emergent.Toolbench.Collections.ThreadSafeDictionary`2.Values">
            <summary>
            Gets a collection containing the values in the dictionary.
            </summary>
            <value>The values in the dictionary.</value>
        </member>
        <member name="P:Emergent.Toolbench.Collections.ThreadSafeDictionary`2.Item(`0)">
            <summary>
            Gets or sets the value with the specified key.
            </summary>
            <value>The value with the specified key.</value>
        </member>
        <member name="P:Emergent.Toolbench.Collections.ThreadSafeDictionary`2.Count">
            <summary>
            Gets the number of elements contained in the collection..
            </summary>
            <value>The number of elements in the collection.</value>
        </member>
        <member name="P:Emergent.Toolbench.Collections.ThreadSafeDictionary`2.IsReadOnly">
            <summary>
            Gets a value indicating whether the collection is read-only.
            </summary>
            <value>true if the collection is read-only; otherwise, false.</value>
        </member>
        <member name="T:Emergent.Toolbench.IDeepClonable`1">
            <summary>
            Supports deep cloning, which creates a new instance of a class with the 
            same value as an existing instance. DeepClone will make separate copies
            of each reference type field in the original object.
            </summary>
            <typeparam name="T">Type of the object to clone.</typeparam>
        </member>
        <member name="M:Emergent.Toolbench.IDeepClonable`1.DeepClone">
            <summary>
            Creates a new object that is a deep copy of the current instance.
            </summary>
            <returns>A new object that is a deep copy of this instance.</returns>
        </member>
        <member name="T:Emergent.Toolbench.ExtensionPoint">
            <summary>
            Internal implementation of the extension point interface.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.ExtensionPoint.#ctor(Emergent.Toolbench.IPluginDescriptor,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Emergent.Toolbench.ExtensionPoint"/> class.
            </summary>
            <param name="pluginDesc">The plug-in descriptor.</param>
            <param name="uniqueName">Unique id for the extension point.</param>
            <param name="schemaFile">The full path to the XML schema file to use when validating 
            an extension for this extension point.</param>
        </member>
        <member name="M:Emergent.Toolbench.ExtensionPoint.DestroySchema">
            <summary>
            Destroys the schema cache.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.ExtensionPoint.GetExtension(System.String)">
            <summary>
            Gets an extension from this extension point. If the specified extension is not found,
            null is returned.
            </summary>
            <param name="extUniqueID">The extension's unique identifier where a unique identifier is
            the name of the plug-in plus '.' plus the extension name. (Ex:
            SamplePlugins.TestPlugin.MyExtension)</param>
            <returns>The requested extension or null if not found.</returns>
        </member>
        <member name="M:Emergent.Toolbench.ExtensionPoint.AddExtensions(Emergent.Toolbench.IExtension[])">
            <summary>
            Adds a set of extensions to this extension point.
            </summary>
            <param name="ext">An array of new extensions to add.</param>
        </member>
        <member name="M:Emergent.Toolbench.ExtensionPoint.AddExtension(Emergent.Toolbench.IExtension)">
            <summary>
            Adds a new extension to this extension point.
            </summary>
            <param name="ext">The extension to add.</param>
        </member>
        <member name="M:Emergent.Toolbench.ExtensionPoint.AddElementData(Emergent.Toolbench.IElementData)">
            <summary>
            Adds a new element data node.
            </summary>
            <param name="data">The custom element data.</param>
        </member>
        <member name="P:Emergent.Toolbench.ExtensionPoint.PluginDescriptor">
            <summary>
            Gets the descriptor for the plug-in containing the extension point.
            </summary>
            <value>The plug-in descriptor.</value>
        </member>
        <member name="P:Emergent.Toolbench.ExtensionPoint.Extensions">
            <summary>
            Gets the extensions mapped to this extension point.
            </summary>
            <value>The extensions or an empty array if no extensions are hooked to this extension
            point.</value>
        </member>
        <member name="P:Emergent.Toolbench.ExtensionPoint.UniqueName">
            <summary>
            Gets the unique identifier of the extension point. The identifier must be unique
            throughout all plug-ins and is usually a combination of the plug-in unique identifier
            concatenated with the name of the extension point.
            </summary>
            <value>The unique name of the extension point.</value>
        </member>
        <member name="P:Emergent.Toolbench.ExtensionPoint.SchemaFile">
            <summary>
            Gets the schema's full path associated with this extension point.
            </summary>
            <value>The extension point schema file's full path.</value>
        </member>
        <member name="P:Emergent.Toolbench.ExtensionPoint.Schema">
            <summary>
            Gets the XmlSchema associated with this extension point.
            </summary>
            <value>The XmlSchema associated with this extension point.</value>
        </member>
        <member name="P:Emergent.Toolbench.ExtensionPoint.ConfigurationData">
            <summary>
            Gets the additional XML data defined in the plug-in manifest for
            the extension point.
            </summary>
            <value>The configuration data or an empty array if no custom configuration data has been
            defined.</value>
        </member>
        <member name="T:Emergent.Toolbench.ObjectEx">
            <summary>
            Object dumper extension class. 
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.ObjectEx.Dump(System.Object)">
            <summary>
            Dumps information about the specified object.
            </summary>
            <param name="obj">The object to dump.</param>
        </member>
        <member name="M:Emergent.Toolbench.ObjectEx.DumpDebug(System.Object)">
            <summary>
            Dumps information about the specified object.
            </summary>
            <param name="obj">The object to dump.</param>
        </member>
        <member name="T:Emergent.Toolbench.ObjectDumper">
            <summary>
            Dumps a text representation of all the data in an object to the console or to a 
            <see cref="T:System.IO.TextWriter"/>.
            </summary>
            <remarks>
            External-Code
            
            Modified version of ObjectDumper that ships as a sample with VS2008.
            Copyright (C) Microsoft Corporation.  All rights reserved.
            </remarks>
        </member>
        <member name="M:Emergent.Toolbench.ObjectDumper.Write(System.Object)">
            <summary>
            Writes the specified element.
            </summary>
            <param name="element">The element to write.</param>
        </member>
        <member name="M:Emergent.Toolbench.ObjectDumper.Write(System.Object,System.Int32)">
            <summary>
            Writes the specified element.
            </summary>
            <param name="element">The element.</param>
            <param name="depth">The depth.</param>
        </member>
        <member name="M:Emergent.Toolbench.ObjectDumper.Write(System.Object,System.Int32,System.IO.TextWriter)">
            <summary>
            Writes the specified element.
            </summary>
            <param name="element">The element.</param>
            <param name="depth">The depth.</param>
            <param name="log">The log target.</param>
        </member>
        <member name="T:Emergent.Toolbench.Collections.ValidationObservableCollection`1">
            <summary>
            Lets the users of the collection validate the items to be inserted into the collection. Call
            AddValidationRule to add a validation delegate.
            </summary>
            <typeparam name="T">Type of items in the collection.</typeparam>
        </member>
        <member name="M:Emergent.Toolbench.Collections.ValidationObservableCollection`1.AddValidationRule(Emergent.Toolbench.Collections.ValidationObservableCollection{`0}.ValidationRule)">
            <summary>
            Adds a new validation rule for the collection.
            </summary>
            <param name="rule">A delegate to a function that validates items.</param>
        </member>
        <member name="M:Emergent.Toolbench.Collections.ValidationObservableCollection`1.IsItemValid(`0,System.String@)">
            <summary>
            Validates the item with all registered validation rules.
            </summary>
            <param name="item">The item to validate.</param>
            <param name="message">The message returned in the case the item is not accepted.</param>
            <returns>Returns true if the item is accepted by all validation rules.</returns>
        </member>
        <member name="M:Emergent.Toolbench.Collections.ValidationObservableCollection`1.SetItem(System.Int32,`0)">
            <summary>
            The only functions we need to override for the validation of new items are SetItem and
            InsertItem, which are called internaly by other functions such as Add(T),
            Insert(Int32,T) and Item[Int32].
            </summary>
            <param name="index">The zero-based index of the element to replace.</param>
            <param name="item">The new value for the element at the specified index.</param>
        </member>
        <member name="M:Emergent.Toolbench.Collections.ValidationObservableCollection`1.InsertItem(System.Int32,`0)">
            <summary>
            Override Collection virtual function to handle all insertions.
            </summary>
            <param name="index">The zero-based index at which <paramref name="item"/> should be
            inserted.</param>
            <param name="item">The object to insert.</param>
        </member>
        <member name="M:Emergent.Toolbench.Collections.ValidationObservableCollection`1.EnsureValid(`0)">
            <summary>
            Throws an exception if the item is not valid.
            </summary>
            <param name="item">The item to validate.</param>
            <exception cref="T:System.InvalidOperationException">The item failed validation.
            </exception>
        </member>
        <member name="T:Emergent.Toolbench.Collections.ValidationObservableCollection`1.ValidationRuleArgs">
            <summary>
            Helper class for arguments passed to the validation rule. Set Accepted to false to
            reject a new item. When rejecting an item, set the message as the reason of the
            rejection.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.Collections.ValidationObservableCollection`1.ValidationRuleArgs.#ctor(`0)">
            <summary>
            Initializes a new instance of the
            <see cref="T:Emergent.Toolbench.Collections.ValidationObservableCollection`1.ValidationRuleArgs"/> class.
            </summary>
            <param name="item">The item to be validated.</param>
        </member>
        <member name="P:Emergent.Toolbench.Collections.ValidationObservableCollection`1.ValidationRuleArgs.Item">
            <summary>
            Collection item to be validated.
            </summary>
            <value>The item.</value>
        </member>
        <member name="P:Emergent.Toolbench.Collections.ValidationObservableCollection`1.ValidationRuleArgs.Accepted">
            <summary>
            Gets or sets a value indicating whether Item is accepted.
            </summary>
            <value><c>true</c> if accepted; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Emergent.Toolbench.Collections.ValidationObservableCollection`1.ValidationRuleArgs.Message">
            <summary>
            Gets or sets the message describing a reason for item rejection.
            </summary>
            <value>The reason for rejection.</value>
        </member>
        <member name="T:Emergent.Toolbench.Collections.ValidationObservableCollection`1.ValidationRule">
            <summary>
            Delegate for validating collection items.
            </summary>
            <param name="args">Arguments providing input to the validation function and storing the
            results.</param>
        </member>
        <member name="T:Emergent.Toolbench.PluginActivator">
            <summary>
            This class is responsible for actually loading a specific plug-in assembly and maintaining a
            handle to the open assemblies. All dependencies are activated recursively.
            </summary>
            <remarks>This class is also used to factory objects. Plug-ins go through the Platform
            interface which internally uses this class. This allows plug-ins to use the meta-data
            defined by their extensions and extension points without worrying about what assembly the
            specified type originates from.</remarks>
        </member>
        <member name="M:Emergent.Toolbench.PluginActivator.#ctor">
            <summary>
            Initializes the <see cref="T:Emergent.Toolbench.PluginActivator"/> class.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.PluginActivator.Initialize">
            <summary>
            Modifies the environment variables so that the base directory of Toolbench is considered
            first in any path resolutions that happen.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.PluginActivator.ActivatePlugin(Emergent.Toolbench.PluginDescriptor)">
            <summary>
            Activates a plug-in by loading the plug-in runtime assembly and ensuring that its
            dependencies are loaded in the correct order.
            </summary>
            <param name="descriptor">The plug-in descriptor.</param>
            <remarks>If the plug-in has already been activated, this method results in a no-op.
            </remarks>
        </member>
        <member name="M:Emergent.Toolbench.PluginActivator.CheckDependencies(System.String,System.Collections.Generic.HashSet{System.String})">
            <summary>
            Checks the dependencies of the provided assembly.
            </summary>
            <param name="dllFilePath">The assembly to trace the dependencies on.</param>
            <param name="checkedFiles">The checked files set, to stop recursion.</param>
        </member>
        <member name="M:Emergent.Toolbench.PluginActivator.LocateDll(System.String,System.String,System.String@)">
            <summary>
            Locates a DLL checking the base directory, assumed to be the directory where the DLL was
            that depended on the DLL being searched for.
            </summary>
            <param name="dllName">The DLL to search for.</param>
            <param name="basePath">The base search path.</param>
            <param name="dllPath">The full path to the DLL if the DLL is located.</param>
            <returns><c>true</c> if the dll was located, otherwise; <c>false</c>.</returns>
        </member>
        <member name="M:Emergent.Toolbench.PluginActivator.DeactivatePlugins">
            <summary>
            Cleanly deactivates all plug-ins in reverse order that they were activated and unloads
            their assemblies.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.PluginActivator.CreateObject(System.String)">
            <summary>
            Generic factory method for creating an object given its class name. The type of the
            object is searched in the activator's list of loaded assemblies.
            </summary>
            <param name="fullClassName">Full name of the class.</param>
            <returns>A run-time instance of the specified class.</returns>
            <remarks>Since this class is an internal class, plug-ins must go through the
            <see cref="T:Emergent.Toolbench.Platform"/> class, which relies on this method internally.</remarks>
        </member>
        <member name="M:Emergent.Toolbench.PluginActivator.FindTypeInAssemblies(System.String)">
            <summary>
            Looks through the list of the plug-in assemblies that have been activated and gets a
            Type object representing the requested class. The Type object is then used by the
            Activator to factory the specified class. Note that the Type lookup is case insensitive.
            </summary>
            <param name="fullClassName">Full name of the class.</param>
            <returns>A valid Type object or null if the type was not found.</returns>
        </member>
        <member name="M:Emergent.Toolbench.PluginActivator.FindTypeInAssemblies(System.String,System.String)">
            <summary>
            Looks through the list of the plug-in assemblies that have been activated and gets a
            Type object representing the requested class. The Type object is then used by the
            Activator to factory the specified class. Note that the Type lookup is case insensitive.
            </summary>
            <param name="fullClassName">Full name of the class.</param>
            <param name="classNamespace">The class namespace.</param>
            <returns>A valid Type object or null if the type was not found.</returns>
        </member>
        <member name="M:Emergent.Toolbench.PluginActivator.RegisterAssembly(System.Reflection.Assembly)">
            <summary>
            Walks the exported types for an assembly to gather all namespaces. Associating a
            namespace with an assembly allows for quick lookup of the assembly by full class name
            later. Note the limitation that only one assembly can be associated with a given class
            name. Also, referenced assemblies are recursively searched.
            </summary>
            <param name="assembly">Assembly to be registered.</param>
        </member>
        <member name="M:Emergent.Toolbench.PluginActivator.IsAssemblyRegistered(System.String)">
            <summary>
            Determine if this assembly has been previously registered.
            </summary>
            <param name="fullName">The full name of the assembly.</param>
            <returns><c>true</c> if the assembly is registered; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Emergent.Toolbench.PluginActivator.OnAssemblyLoad(System.Object,System.AssemblyLoadEventArgs)">
            <summary>
            When an assembly gets loaded we should go ahead and attempt to register it in case it
            was loaded outside of the plug-in activator.</summary>
            <param name="sender">The sender.</param>
            <param name="args">The assembly loading event args.</param>
        </member>
        <member name="M:Emergent.Toolbench.PluginActivator.OnAssemblyResolve(System.Object,System.ResolveEventArgs)">
            <summary>
            When an assembly fails to load, log it to display to the user before we throw the
            exception and lose the specifics of the failure. However, Toolbench does nothing to find
            the assembly, we just return null.
            </summary>
            <param name="sender">The sender.</param>
            <param name="args">The assembly resolve args.</param>
            <returns>The assembly, if found.</returns>
        </member>
        <member name="E:Emergent.Toolbench.PluginActivator.PluginActivated">
            <summary>
            Occurs when a plug-in is activated.
            </summary>
        </member>
        <member name="T:Emergent.Toolbench.XElementEx">
            <summary>
            A set of extension methods for <see cref="T:System.Xml.Linq.XElement"/>.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.XElementEx.Attribute(System.Xml.Linq.XElement,System.Xml.Linq.XName,System.String)">
            <summary>
            Gets the value from the specified attribute.
            </summary>
            <param name="xElement">The XML element.</param>
            <param name="name">The attribute name.</param>
            <param name="defaultValue">The value to return if the attribute is not found.</param>
            <returns>The value of the attribute or the default value if the attribute was not found
            in this data element.</returns>
        </member>
        <member name="M:Emergent.Toolbench.XElementEx.Attribute(System.Xml.Linq.XElement,System.Xml.Linq.XName,System.Byte)">
            <summary>
            Gets the value from the specified attribute.
            </summary>
            <param name="xElement">The XML element.</param>
            <param name="name">The attribute name.</param>
            <param name="defaultValue">The value to return if the attribute is not found.</param>
            <returns>The value of the attribute or the default value if the attribute was not found
            in this data element.</returns>
        </member>
        <member name="M:Emergent.Toolbench.XElementEx.Attribute(System.Xml.Linq.XElement,System.Xml.Linq.XName,System.SByte)">
            <summary>
            Gets the value from the specified attribute.
            </summary>
            <param name="xElement">The XML element.</param>
            <param name="name">The attribute name.</param>
            <param name="defaultValue">The value to return if the attribute is not found.</param>
            <returns>The value of the attribute or the default value if the attribute was not found
            in this data element.</returns>
        </member>
        <member name="M:Emergent.Toolbench.XElementEx.Attribute(System.Xml.Linq.XElement,System.Xml.Linq.XName,System.Boolean)">
            <summary>
            Gets the value from the specified attribute.
            </summary>
            <param name="xElement">The XML element.</param>
            <param name="name">The attribute name.</param>
            <param name="defaultValue">The value to return if the attribute is not found.</param>
            <returns>The value of the attribute or the default value if the attribute was not found
            in this data element.</returns>
        </member>
        <member name="M:Emergent.Toolbench.XElementEx.Attribute(System.Xml.Linq.XElement,System.Xml.Linq.XName,System.Int16)">
            <summary>
            Gets the value from the specified attribute.
            </summary>
            <param name="xElement">The XML element.</param>
            <param name="name">The attribute name.</param>
            <param name="defaultValue">The value to return if the attribute is not found.</param>
            <returns>The value of the attribute or the default value if the attribute was not found
            in this data element.</returns>
        </member>
        <member name="M:Emergent.Toolbench.XElementEx.Attribute(System.Xml.Linq.XElement,System.Xml.Linq.XName,System.UInt16)">
            <summary>
            Gets the value from the specified attribute.
            </summary>
            <param name="xElement">The XML element.</param>
            <param name="name">The attribute name.</param>
            <param name="defaultValue">The value to return if the attribute is not found.</param>
            <returns>The value of the attribute or the default value if the attribute was not found
            in this data element.</returns>
        </member>
        <member name="M:Emergent.Toolbench.XElementEx.Attribute(System.Xml.Linq.XElement,System.Xml.Linq.XName,System.Int32)">
            <summary>
            Gets the value from the specified attribute.
            </summary>
            <param name="xElement">The XML element.</param>
            <param name="name">The attribute name.</param>
            <param name="defaultValue">The value to return if the attribute is not found.</param>
            <returns>The value of the attribute or the default value if the attribute was not found
            in this data element.</returns>
        </member>
        <member name="M:Emergent.Toolbench.XElementEx.Attribute(System.Xml.Linq.XElement,System.Xml.Linq.XName,System.UInt32)">
            <summary>
            Gets the value from the specified attribute.
            </summary>
            <param name="xElement">The XML element.</param>
            <param name="name">The attribute name.</param>
            <param name="defaultValue">The value to return if the attribute is not found.</param>
            <returns>The value of the attribute or the default value if the attribute was not found
            in this data element.</returns>
        </member>
        <member name="M:Emergent.Toolbench.XElementEx.Attribute(System.Xml.Linq.XElement,System.Xml.Linq.XName,System.Int64)">
            <summary>
            Gets the value from the specified attribute.
            </summary>
            <param name="xElement">The XML element.</param>
            <param name="name">The attribute name.</param>
            <param name="defaultValue">The value to return if the attribute is not found.</param>
            <returns>The value of the attribute or the default value if the attribute was not found
            in this data element.</returns>
        </member>
        <member name="M:Emergent.Toolbench.XElementEx.Attribute(System.Xml.Linq.XElement,System.Xml.Linq.XName,System.UInt64)">
            <summary>
            Gets the value from the specified attribute.
            </summary>
            <param name="xElement">The XML element.</param>
            <param name="name">The attribute name.</param>
            <param name="defaultValue">The value to return if the attribute is not found.</param>
            <returns>The value of the attribute or the default value if the attribute was not found
            in this data element.</returns>
        </member>
        <member name="M:Emergent.Toolbench.XElementEx.Attribute(System.Xml.Linq.XElement,System.Xml.Linq.XName,System.Single)">
            <summary>
            Gets the value from the specified attribute.
            </summary>
            <param name="xElement">The XML element.</param>
            <param name="name">The attribute name.</param>
            <param name="defaultValue">The value to return if the attribute is not found.</param>
            <returns>The value of the attribute or the default value if the attribute was not found
            in this data element.</returns>
        </member>
        <member name="M:Emergent.Toolbench.XElementEx.Attribute(System.Xml.Linq.XElement,System.Xml.Linq.XName,System.Double)">
            <summary>
            Gets the value from the specified attribute.
            </summary>
            <param name="xElement">The XML element.</param>
            <param name="name">The attribute name.</param>
            <param name="defaultValue">The value to return if the attribute is not found.</param>
            <returns>The value of the attribute or the default value if the attribute was not found
            in this data element.</returns>
        </member>
        <member name="M:Emergent.Toolbench.XElementEx.Attribute(System.Xml.Linq.XElement,System.Xml.Linq.XName,System.Decimal)">
            <summary>
            Gets the value from the specified attribute.
            </summary>
            <param name="xElement">The XML element.</param>
            <param name="name">The attribute name.</param>
            <param name="defaultValue">The value to return if the attribute is not found.</param>
            <returns>The value of the attribute or the default value if the attribute was not found
            in this data element.</returns>
        </member>
        <member name="M:Emergent.Toolbench.XElementEx.Attribute(System.Xml.Linq.XElement,System.Xml.Linq.XName,System.Char)">
            <summary>
            Gets the value from the specified attribute.
            </summary>
            <param name="xElement">The XML element.</param>
            <param name="name">The attribute name.</param>
            <param name="defaultValue">The value to return if the attribute is not found.</param>
            <returns>The value of the attribute or the default value if the attribute was not found
            in this data element.</returns>
        </member>
        <member name="M:Emergent.Toolbench.XElementEx.Attribute``1(System.Xml.Linq.XElement,System.Xml.Linq.XName,System.Enum)">
            <summary>
            Gets the value from the specified attribute.
            </summary>
            <typeparam name="TEnum">The type of the enum.</typeparam>
            <param name="xElement">The XML element.</param>
            <param name="name">The attribute name.</param>
            <param name="defaultValue">The value to return if the attribute is not found.</param>
            <returns>The value of the attribute or the default value if the attribute was not found
            in this data element.</returns>
        </member>
        <member name="T:Emergent.Toolbench.DisposableAction">
            <summary>
            A guard class to be instantiated in using statements. It ensures that resources are cleaned
            up using the passed in delegate. Note that in this context Action refers to System.Action,
            not the Toolbench action system.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.DisposableAction.#ctor(System.Action)">
            <summary>
            Initializes a new instance of the <see cref="T:Emergent.Toolbench.DisposableAction"/> class.
            </summary>
            <param name="action">The action to call on Dispose.</param>
        </member>
        <member name="M:Emergent.Toolbench.DisposableAction.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting
            unmanaged resources.
            </summary>
        </member>
        <member name="T:Emergent.Toolbench.IPluginDependency">
            <summary>
            This interface defines the necessary information needed to identify a 
            plug-in's dependency. All plug-ins can define 0 or more of these 
            dependencies in their manifest and the run-time ensures those
            dependencies are loaded in the proper order.
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.IPluginDependency.Version">
            <summary>
            Gets the version of the dependency.
            </summary>
            <value>The version.</value>
        </member>
        <member name="P:Emergent.Toolbench.IPluginDependency.Name">
            <summary>
            Gets the unique name of the plug-in dependency where the unique name
            is the name assigned to the plug-in dependency in its manifest file.
            </summary>
            <value>The unique name.</value>
        </member>
        <member name="T:Emergent.Toolbench.ExceptionEx">
            <summary>
            Extension methods for the <see cref="T:System.Exception"/> class.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.ExceptionEx.MessageBlock(System.Exception)">
            <summary>
            Builds a string from tracing through a series of exceptions.
            </summary>
            <param name="ex">The final exception to inspect.</param>
            <returns>A string describing the exception chain.</returns>
        </member>
        <member name="T:Emergent.Toolbench.Data.PropertyChangedEventArgs">
            <summary>
            An EventArgs class that includes additional information about a PropertyChanged event.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.Data.PropertyChangedEventArgs.#ctor(System.String,System.Object,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Emergent.Toolbench.Data.PropertyChangedEventArgs"/> class.
            </summary>
            <param name="propertyName">Name of the property.</param>
            <param name="oldValue">The old value.</param>
            <param name="newValue">The new value.</param>
        </member>
        <member name="P:Emergent.Toolbench.Data.PropertyChangedEventArgs.OldValue">
            <summary>
            Gets the old value.
            </summary>
            <value>The old value.</value>
        </member>
        <member name="P:Emergent.Toolbench.Data.PropertyChangedEventArgs.NewValue">
            <summary>
            Gets the new value.
            </summary>
            <value>The new value.</value>
        </member>
        <member name="T:Emergent.Toolbench.Collections.ObservableDictionary`2">
            <summary>
            A dictionary with notifications for changes (for WPF support).
            </summary>
            <typeparam name="TKey">The key type.</typeparam>
            <typeparam name="TValue">The value type.</typeparam>
        </member>
        <member name="M:Emergent.Toolbench.Collections.ObservableDictionary`2.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Emergent.Toolbench.Collections.ObservableDictionary`2"/>
            class.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.Collections.ObservableDictionary`2.#ctor(System.Collections.Generic.IDictionary{`0,`1})">
            <summary>
            Initializes a new instance of the <see cref="T:Emergent.Toolbench.Collections.ObservableDictionary`2"/>
            class.
            </summary>
            <param name="dictionary">The dictionary to wrap.</param>
        </member>
        <member name="M:Emergent.Toolbench.Collections.ObservableDictionary`2.Add(`0,`1)">
            <summary>
            Adds an element with the provided key and value to the dictionary.
            </summary>
            <param name="key">The object to use as the key of the element to add.</param>
            <param name="value">The object to use as the value of the element to add.</param>
        </member>
        <member name="M:Emergent.Toolbench.Collections.ObservableDictionary`2.ContainsKey(`0)">
            <summary>
            Determines whether the dictionary contains an element with the specified key.
            </summary>
            <param name="key">The key to locate in the dictionary.</param>
            <returns>true if the dictionary contains an element with the key; otherwise, false.
            </returns>
        </member>
        <member name="M:Emergent.Toolbench.Collections.ObservableDictionary`2.Remove(`0)">
            <summary>
            Removes the element with the specified key from the dictionary.
            </summary>
            <param name="key">The key of the element to remove.</param>
            <returns>true if the element is successfully removed; otherwise, false. This method also
            returns false if <paramref name="key"/> was not found in the dictionary.</returns>
        </member>
        <member name="M:Emergent.Toolbench.Collections.ObservableDictionary`2.TryGetValue(`0,`1@)">
            <summary>
            Gets the value associated with the specified key.
            </summary>
            <param name="key">The key whose value to get.</param>
            <param name="value">When this method returns, the value associated with the specified
            key, if the key is found; otherwise, the default value for the type of the
            <paramref name="value"/> parameter. This parameter is passed uninitialized.</param>
            <returns>true if the dictionary contains an element with the specified key; otherwise,
            false.</returns>
        </member>
        <member name="M:Emergent.Toolbench.Collections.ObservableDictionary`2.Add(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Adds an item to the collection.
            </summary>
            <param name="item">The object to add to the collection.</param>
        </member>
        <member name="M:Emergent.Toolbench.Collections.ObservableDictionary`2.Clear">
            <summary>
            Removes all items from the collection.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.Collections.ObservableDictionary`2.Contains(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Determines whether the collection contains a specific value.
            </summary>
            <param name="item">The object to locate in the collection.</param>
            <returns>true if <paramref name="item"/> is found in the collection; otherwise, false.
            </returns>
        </member>
        <member name="M:Emergent.Toolbench.Collections.ObservableDictionary`2.CopyTo(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Int32)">
            <summary>
            Copies the elements of the collection to an array, starting at a particular index.
            </summary>
            <param name="array">The one-dimensional array that is the destination of the elements
            copied from the collection. The array must have zero-based indexing.</param>
            <param name="arrayIndex">The zero-based index in <paramref name="array"/> at which
            copying begins.</param>
        </member>
        <member name="M:Emergent.Toolbench.Collections.ObservableDictionary`2.Remove(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Removes the first occurrence of a specific object from the collection.
            </summary>
            <param name="item">The object to remove from the collection.</param>
            <returns>true if <paramref name="item"/> was successfully removed from the collection;
            otherwise, false. This method also returns false if <paramref name="item"/> is not found
            in the collection.
            </returns>
        </member>
        <member name="M:Emergent.Toolbench.Collections.ObservableDictionary`2.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>An enumerator that can be used to iterate through the collection.</returns>
        </member>
        <member name="M:Emergent.Toolbench.Collections.ObservableDictionary`2.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>An enumerator that can be used to iterate through the collection.</returns>
        </member>
        <member name="M:Emergent.Toolbench.Collections.ObservableDictionary`2.Add(System.Object,System.Object)">
            <summary>
            Adds an element with the provided key and value to the dictionary.
            </summary>
            <param name="key">The object to use as the key of the element to add.</param>
            <param name="value">The object to use as the value of the element to add.</param>
        </member>
        <member name="M:Emergent.Toolbench.Collections.ObservableDictionary`2.Contains(System.Object)">
            <summary>
            Determines whether the dictionary contains an element with the specified key.
            </summary>
            <param name="key">The key to locate in the dictionary.</param>
            <returns>true if the dictionary contains an element with the key; otherwise, false.
            </returns>
        </member>
        <member name="M:Emergent.Toolbench.Collections.ObservableDictionary`2.System#Collections#IDictionary#GetEnumerator">
            <summary>
            Returns an enumerator for the dictionary.
            </summary>
            <returns>An <see cref="T:System.Collections.IDictionaryEnumerator"/> object for the
            dictionary.
            </returns>
        </member>
        <member name="M:Emergent.Toolbench.Collections.ObservableDictionary`2.Remove(System.Object)">
            <summary>
            Removes the element with the specified key from the dictionary.
            </summary>
            <param name="key">The key of the element to remove.</param>
        </member>
        <member name="M:Emergent.Toolbench.Collections.ObservableDictionary`2.CopyTo(System.Array,System.Int32)">
            <summary>
            Copies the elements of the collection to an array, starting at a particular index.
            </summary>
            <param name="array">The one-dimensional array that is the destination of the elements
            copied from the collection. The array must have zero-based indexing.</param>
            <param name="index">The zero-based index in <paramref name="array"/> at which copying
            begins.</param>
        </member>
        <member name="M:Emergent.Toolbench.Collections.ObservableDictionary`2.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo"/> with the data
            needed to serialize the target object.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> to
            populate with data.</param>
            <param name="context">The destination for this serialization.</param>
        </member>
        <member name="M:Emergent.Toolbench.Collections.ObservableDictionary`2.OnDeserialization(System.Object)">
            <summary>
            Runs when the entire object graph has been deserialized.
            </summary>
            <param name="sender">The object that initiated the callback.</param>
        </member>
        <member name="M:Emergent.Toolbench.Collections.ObservableDictionary`2.IndexOf(`0)">
            <summary>
            Finds the index of a key in the dictionary.
            </summary>
            <param name="key">The key to locate.</param>
            <returns>The index of the key.</returns>
        </member>
        <member name="P:Emergent.Toolbench.Collections.ObservableDictionary`2.Keys">
            <summary>
            Gets a collection containing the keys of the dictionary.
            </summary>
            <value>The keys in the dictionary.</value>
        </member>
        <member name="P:Emergent.Toolbench.Collections.ObservableDictionary`2.Values">
            <summary>
            Gets a collection containing the values in the dictionary.
            </summary>
            <value>The values in the dictionary.</value>
        </member>
        <member name="P:Emergent.Toolbench.Collections.ObservableDictionary`2.Item(`0)">
            <summary>
            Gets or sets the value with the specified key.
            </summary>
            <value>The value with the specified key.</value>
        </member>
        <member name="P:Emergent.Toolbench.Collections.ObservableDictionary`2.Count">
            <summary>
            Gets the number of elements contained in the collection.
            </summary>
            <value>The number of elements contained in the collection.</value>
        </member>
        <member name="P:Emergent.Toolbench.Collections.ObservableDictionary`2.IsReadOnly">
            <summary>
            Gets a value indicating whether the collection is read-only.
            </summary>
            <value>false, indicating that the collection is not read-only.</value>
        </member>
        <member name="P:Emergent.Toolbench.Collections.ObservableDictionary`2.IsFixedSize">
            <summary>
            Gets a value indicating whether the dictionary has a fixed size.
            </summary>
            <value>false, indicating that the dictionary does not have a fixed size.</value>
        </member>
        <member name="P:Emergent.Toolbench.Collections.ObservableDictionary`2.System#Collections#IDictionary#Keys">
            <summary>
            Gets a collection containing the keys of the dictionary.
            </summary>
            <value>The keys of the dictionary.</value>
        </member>
        <member name="P:Emergent.Toolbench.Collections.ObservableDictionary`2.System#Collections#IDictionary#Values">
            <summary>
            Gets a collection containing the values in the dictionary.
            </summary>
            <value>The values in the dictionary.</value>
        </member>
        <member name="P:Emergent.Toolbench.Collections.ObservableDictionary`2.Item(System.Object)">
            <summary>
            Gets or sets the value with the specified key.
            </summary>
            <value>The value with the specified key.</value>
        </member>
        <member name="P:Emergent.Toolbench.Collections.ObservableDictionary`2.IsSynchronized">
            <summary>
            Gets a value indicating whether access to the collection is synchronized (thread safe).
            </summary>
            <value>true if access to the collection is synchronized (thread safe); otherwise, false.
            </value>
        </member>
        <member name="P:Emergent.Toolbench.Collections.ObservableDictionary`2.SyncRoot">
            <summary>
            Gets an object that can be used to synchronize access to the collection.
            </summary>
            <value>An object that can be used to synchronize access to the collection.</value>
        </member>
        <member name="E:Emergent.Toolbench.Collections.ObservableDictionary`2.CollectionChanged">
            <summary>
            Occurs when the collection changes.
            </summary>
        </member>
        <member name="E:Emergent.Toolbench.Collections.ObservableDictionary`2.PropertyChanged">
            <summary>
            Occurs when a property value changes.
            </summary>
        </member>
        <member name="T:Emergent.Toolbench.Collections.BidirectionalDictionary`2">
            <summary>
            A dictionary for 1:1 mapping. Both keys and values are assumed to be unique.
            </summary>
            <typeparam name="TKey">The type of the key.</typeparam>
            <typeparam name="TValue">The type of the value.</typeparam>
        </member>
        <member name="M:Emergent.Toolbench.Collections.BidirectionalDictionary`2.#ctor">
            <summary>
            Creates a new instance of the BidirectionalDictionary.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.Collections.BidirectionalDictionary`2.#ctor(System.Collections.Generic.IDictionary{`0,`1},System.Collections.Generic.IDictionary{`1,`0})">
            <summary>
            Creates a new instance of the BidirectionalDictionary with custom forward and reverse
            dictionaries.
            </summary>
            <param name="forwardDictionary">The forward key -> value lookup dictionary.</param>
            <param name="reverseDictionary">The reverse value -> key lookup dictionary.</param>
        </member>
        <member name="M:Emergent.Toolbench.Collections.BidirectionalDictionary`2.Add(`0,`1)">
            <summary>
            Adds an element with the provided key and value to the collection.
            </summary>
            <param name="key">The object to use as the key of the element to add.</param>
            <param name="value">The object to use as the value of the element to add.</param>
        </member>
        <member name="M:Emergent.Toolbench.Collections.BidirectionalDictionary`2.ContainsKey(`0)">
            <summary>
            Determines whether the collection contains an element with the specified key.
            </summary>
            <param name="key">The key to locate in the collection.</param>
            <returns>True if the collection contains an element with the key, else false.</returns>
        </member>
        <member name="M:Emergent.Toolbench.Collections.BidirectionalDictionary`2.ContainsValue(`1)">
            <summary>
            Determines whether the collection contains an element with the specified value.
            </summary>
            <param name="value">The value to locate in the collection.</param>
            <returns>True if the collection contains an element with the value, else false.
            </returns>
        </member>
        <member name="M:Emergent.Toolbench.Collections.BidirectionalDictionary`2.System#Collections#Generic#IDictionary{TKey@TValue}#Remove(`0)">
            <summary>
            Removes the element with the specified key from the collection.
            </summary>
            <param name="key">The key of the element to remove.</param>
            <returns>True if the element is found and successfully removed, else false.</returns>
        </member>
        <member name="M:Emergent.Toolbench.Collections.BidirectionalDictionary`2.RemoveByKey(`0)">
            <summary>
            Removes the element with the specified key from the collection.
            </summary>
            <param name="key">The key of the element to remove.</param>
            <returns>True if the element is found and successfully removed, else false.</returns>
        </member>
        <member name="M:Emergent.Toolbench.Collections.BidirectionalDictionary`2.RemoveByValue(`1)">
            <summary>
            Removes the element with the specified value from the collection.
            </summary>
            <param name="value">The value of the element to remove.</param>
            <returns>True if the element is found and successfully removed, else false.</returns>
        </member>
        <member name="M:Emergent.Toolbench.Collections.BidirectionalDictionary`2.TryGetKey(`1,`0@)">
            <summary>
            Gets the key associated with the specified value.
            </summary>
            <param name="value">The value for which to find a key.</param>
            <param name="key">The key associated with the specified value or the default key for the
            key type if the value is not found.</param>
            <returns>True if the collection contains an element with the specified value, else
            false.</returns>
        </member>
        <member name="M:Emergent.Toolbench.Collections.BidirectionalDictionary`2.TryGetValue(`0,`1@)">
            <summary>
            Gets the value associated with the specified key.
            </summary>
            <param name="key">The key for which to find a value.</param>
            <param name="value">The value associated with the specified key or the default value for
            the value type if the key is not found.</param>
            <returns>True if the collection contains an element with the specified key, else false.
            </returns>
        </member>
        <member name="M:Emergent.Toolbench.Collections.BidirectionalDictionary`2.GetValue(`0)">
            <summary>
            Gets the value associated with the specified key.
            </summary>
            <param name="key">The key for which to find a value.</param>
            <returns>The value associated with the specified key.</returns>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">Thrown if the key does
            not exist in the collection.</exception>
        </member>
        <member name="M:Emergent.Toolbench.Collections.BidirectionalDictionary`2.SetValue(`0,`1)">
            <summary>
            Sets the value associated with a key in the collection.
            </summary>
            <param name="key">The key for which to associate a value.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Emergent.Toolbench.Collections.BidirectionalDictionary`2.GetKey(`1)">
            <summary>
            Gets the key associated with the specified value.
            </summary>
            <param name="value">The value for which to find a key.</param>
            <returns>The key associated with the specified value.</returns>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">Thrown if the value
            does not exist in the collection.</exception>
        </member>
        <member name="M:Emergent.Toolbench.Collections.BidirectionalDictionary`2.SetKey(`1,`0)">
            <summary>
            Sets the key associated with a value in the collection.
            </summary>
            <param name="value">The value for which to associate a key.</param>
            <param name="key">The key to set.</param>
        </member>
        <member name="M:Emergent.Toolbench.Collections.BidirectionalDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#Add(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Adds an item to the collection.
            </summary>
            <param name="item">The object to add to the collection.</param>
        </member>
        <member name="M:Emergent.Toolbench.Collections.BidirectionalDictionary`2.Clear">
            <summary>
            Removes all items from the collection.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.Collections.BidirectionalDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#Contains(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Determines whether the collection contains a specific item.
            </summary>
            <param name="item">The object to locate in the collection.</param>
            <returns>True if the item is found in the collection, else false.</returns>
        </member>
        <member name="M:Emergent.Toolbench.Collections.BidirectionalDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#CopyTo(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Int32)">
            <summary>
            Copies the elements of the collection to an array, starting at a particular index.
            </summary>
            <param name="array">The array that is the destination of the elements copied from the
            collection.</param>
            <param name="arrayIndex">The zero-based index into the array at which copying begins.
            </param>
        </member>
        <member name="M:Emergent.Toolbench.Collections.BidirectionalDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#Remove(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Removes a specific object from the collection.
            </summary>
            <param name="item">The object to remove from the collection.</param>
            <returns>True if the object was successfully found and removed from the collection, else
            false.</returns>
        </member>
        <member name="M:Emergent.Toolbench.Collections.BidirectionalDictionary`2.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
            <summary>
            Copies the elements of the collection to an array, starting at a particular index.
            </summary>
            <param name="array">The array that is the destination of the elements copied from the
            collection.</param>
            <param name="index">The zero-based index in the array at which copying begins.</param>
            <exception cref="T:System.NotImplementedException">Always thrown.</exception>
        </member>
        <member name="M:Emergent.Toolbench.Collections.BidirectionalDictionary`2.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>An enumerator that can be used to iterate through the collection.</returns>
        </member>
        <member name="M:Emergent.Toolbench.Collections.BidirectionalDictionary`2.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>An enumerator that can be used to iterate through the collection.</returns>
        </member>
        <member name="P:Emergent.Toolbench.Collections.BidirectionalDictionary`2.Keys">
            <summary>
            Gets the set of keys in the collection.
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.Collections.BidirectionalDictionary`2.Values">
            <summary>
            Get the set of values in the collection.
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.Collections.BidirectionalDictionary`2.Item(`0)">
            <summary>
            Gets or sets the element with the specified key.
            </summary>
            <param name="key">The key of the element to get or set.</param>
            <returns>The element with the specified key.</returns>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">Thrown on a get if the
            key does not exist in the collection.</exception>
        </member>
        <member name="P:Emergent.Toolbench.Collections.BidirectionalDictionary`2.Count">
            <summary>
            Gets the number of elements contained in the collection.
            </summary>
            <returns>The number of elements contained in the collection.</returns>
        </member>
        <member name="P:Emergent.Toolbench.Collections.BidirectionalDictionary`2.IsReadOnly">
            <summary>
            Gets a value indicating whether the collection is read-only.
            </summary>
            <returns>True if the collection is read-only, else false.</returns>
        </member>
        <member name="P:Emergent.Toolbench.Collections.BidirectionalDictionary`2.System#Collections#ICollection#IsSynchronized">
            <summary>
            Gets a value indicating whether access to the collection is synchronized (thread safe).
            </summary>
            <returns>True if access to the collection is synchronized (thread safe), else false.
            </returns>
        </member>
        <member name="P:Emergent.Toolbench.Collections.BidirectionalDictionary`2.System#Collections#ICollection#SyncRoot">
            <summary>
            Gets an object that can be used to synchronize access to the collection.
            </summary>
            <returns>An object that can be used to synchronize access to the collection.</returns>
        </member>
        <member name="T:Emergent.Toolbench.Arguments">
            <summary>
            A class for representing command-line arguments.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.Arguments.Parse(System.String[])">
            <summary>
            Creates a key-value pair dictionary of all commands and their arguments if specified;
            null otherwise.
            </summary>
            <param name="args">The command-line arguments to be parsed.</param>
            <returns>A key-value pair of commands and arguments.</returns>
            <remarks>Some potential examples:
            -run MyApplication
            -maximized
            </remarks>
        </member>
        <member name="P:Emergent.Toolbench.Arguments.UnkeyedArguments">
            <summary>
            Gets the unkeyed arguments.
            </summary>
            <value>The unkeyed arguments.</value>
        </member>
        <member name="P:Emergent.Toolbench.Arguments.KeyedArguments">
            <summary>
            Gets the keyed arguments.
            </summary>
            <value>The keyed arguments.</value>
        </member>
        <member name="T:Emergent.Toolbench.PluginStatus">
            <summary>
            The status of the plug-in.
            </summary>
        </member>
        <member name="F:Emergent.Toolbench.PluginStatus.Unloaded">
            <summary>
            The plug-in has not been loaded.
            </summary>
        </member>
        <member name="F:Emergent.Toolbench.PluginStatus.Loading">
            <summary>
            The plug-in has started loading.
            </summary>
        </member>
        <member name="F:Emergent.Toolbench.PluginStatus.Loaded">
            <summary>
            The plug-in has loaded.
            </summary>
        </member>
        <member name="F:Emergent.Toolbench.PluginStatus.Failed">
            <summary>
            The plug-in has failed to load.
            </summary>
        </member>
        <member name="T:Emergent.Toolbench.PluginDependency">
            <summary>
            Internal implementation of the interface representing a plug-in 
            dependency.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.PluginDependency.#ctor(System.String,System.Version)">
            <summary>
            Initializes a new instance of the <see cref="T:Emergent.Toolbench.PluginDependency"/> 
            class.
            </summary>
            <param name="name">The full/unique name of the plug-in.</param>
            <param name="version">The minimal version needed.</param>
        </member>
        <member name="P:Emergent.Toolbench.PluginDependency.Name">
            <summary>
            Gets the unique name of the plug-in dependency where the unique 
            name is the name assigned to the plug-in dependency in its manifest 
            file.
            </summary>
            <value>The unique name.</value>
        </member>
        <member name="P:Emergent.Toolbench.PluginDependency.Version">
            <summary>
            Gets the version of the dependency.
            </summary>
            <value>The version.</value>
        </member>
        <member name="T:Emergent.Toolbench.PluginActivatedEventArgs">
            <summary>
            Event arguments to event listeners for plug-in activation events.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.PluginActivatedEventArgs.#ctor(Emergent.Toolbench.IPluginDescriptor)">
            <summary>
            Initializes a new instance of the event args class.
            </summary>
            <param name="pd">The plug-in descriptor for the plug-in that was 
                activated.
            </param>
        </member>
        <member name="P:Emergent.Toolbench.PluginActivatedEventArgs.PluginDescriptor">
            <summary>
            Gets the plug-in descriptor for the plug-in that was activated.
            </summary>
            <value>The plug-in descriptor.</value>
        </member>
        <member name="T:Emergent.Toolbench.PlatformStatus">
            <summary>
            The status of the platform object.
            </summary>
        </member>
        <member name="F:Emergent.Toolbench.PlatformStatus.Uninitialized">
            <summary>
            The platform has not yet started initialization.
            </summary>
        </member>
        <member name="F:Emergent.Toolbench.PlatformStatus.Starting">
            <summary>
            The platform is in the process of loading settings and a runnable extension.
            </summary>
        </member>
        <member name="F:Emergent.Toolbench.PlatformStatus.Running">
            <summary>
            The platform is actively executing a runnable extension.
            </summary>
        </member>
        <member name="F:Emergent.Toolbench.PlatformStatus.Stopping">
            <summary>
            The platform is terminating services and shutting down.
            </summary>
        </member>
        <member name="T:Emergent.Toolbench.IO.StreamHash">
            <summary>
            A series of utility methods for assisting in the calculation of hash values for files and
            data streams.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.IO.StreamHash.ComputeMD5(System.String)">
            <summary>
            Computes the MD5 hash for a file.
            </summary>
            <param name="fileName">The file name of the file to hash.</param>
            <returns>The hashed string of the file.</returns>
        </member>
        <member name="M:Emergent.Toolbench.IO.StreamHash.ComputeMD5(System.IO.Stream)">
            <summary>
            Computes the MD5 hash for a stream.
            </summary>
            <param name="stream">The stream to hash.</param>
            <returns>The hashed string of the stream.</returns>
        </member>
        <member name="M:Emergent.Toolbench.IO.StreamHash.ComputeSHA1(System.String)">
            <summary>
            Computes an SH1 hash for a file.
            </summary>
            <param name="fileName">The file name of the file to hash.</param>
            <returns>The hashed string of the file.</returns>
        </member>
        <member name="M:Emergent.Toolbench.IO.StreamHash.ComputeSHA1(System.IO.Stream)">
            <summary>
            Computes the SHA1 hash for a stream.
            </summary>
            <param name="stream">The stream to hash.</param>
            <returns>The hashed string of the stream.</returns>
        </member>
        <member name="M:Emergent.Toolbench.IO.StreamHash.ComputeHash(System.String,System.Security.Cryptography.HashAlgorithm)">
            <summary>
            Computes a hash for a file.
            </summary>
            <param name="fileName">The file name of the file to hash.</param>
            <param name="hashAlgorithm">The algorithm to use to hash the file.</param>
            <returns>The hashed string of the file.</returns>
        </member>
        <member name="M:Emergent.Toolbench.IO.StreamHash.ComputeHash(System.IO.Stream,System.Security.Cryptography.HashAlgorithm)">
            <summary>
            Computes a hash for a stream.
            </summary>
            <param name="stream">The stream to hash.</param>
            <param name="hashAlgorithm">The algorithm to use to hash the file.</param>
            <returns>The hashed string of the stream.</returns>
        </member>
        <member name="T:Emergent.Toolbench.ICrashHandler">
            <summary>
            Interface for crash handlers, which can capture and report information about a Toolbench
            crash event.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.ICrashHandler.Capture(System.Object,Emergent.Toolbench.CrashEventArgs)">
            <summary>
            Called when a Toolbench crash has occurred, giving an opportunity to collect information
            about the state of the process.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:Emergent.Toolbench.CrashEventArgs"/> instance containing
            the event data.</param>
        </member>
        <member name="M:Emergent.Toolbench.ICrashHandler.Deliver(System.Object,Emergent.Toolbench.CrashReportEventArgs)">
            <summary>
            Called when Toolbench is about to exit, giving the crash handler an opportunity to
            perform final processing on captured crash data.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:Emergent.Toolbench.CrashReportEventArgs"/> instance
            containing the event data.</param>
        </member>
        <member name="T:Emergent.Toolbench.CrashEventArgs">
            <summary>
            Class for forwarding information about a crash capture.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.CrashEventArgs.#ctor(System.Exception,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Emergent.Toolbench.CrashEventArgs"/> class.
            </summary>
            <param name="ex">Exception associated with the crash event.</param>
            <param name="data">Additional data related to the crash event.</param>
        </member>
        <member name="P:Emergent.Toolbench.CrashEventArgs.Exception">
            <summary>
            Gets the exception associated with the crash event.
            </summary>
            <value>The exception.</value>
        </member>
        <member name="P:Emergent.Toolbench.CrashEventArgs.Data">
            <summary>
            Gets the additional data related to the crash event.
            </summary>
            <value>The additional data.</value>
        </member>
        <member name="T:Emergent.Toolbench.CrashReportEventArgs">
            <summary>
            Class for forwarding information about a crash delivery.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.CrashReportEventArgs.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Emergent.Toolbench.CrashReportEventArgs"/> class.
            </summary>
            <param name="traceFile">Path to the archived Toolbench trace file for this run.</param>
        </member>
        <member name="P:Emergent.Toolbench.CrashReportEventArgs.TraceFile">
            <summary>
            Gets the path to the archived trace file.
            </summary>
            <value>The trace file path.</value>
        </member>
        <member name="T:Emergent.Toolbench.Collections.MergedObservableCollection">
            <summary>
            The MergedObservableCollection provides implementation for two interfaces:
             - INotifyCollectionChanged: to be bindable/update-aware in a WPF list
             - IEnumerable: to be listable in a WPF list
            Use the InnerCollections property to add/remove sub collections.
            No copies are made of the inner collections.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.Collections.MergedObservableCollection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Emergent.Toolbench.Collections.MergedObservableCollection"/> class.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.Collections.MergedObservableCollection.OnInternalCollectionsChanged(System.Object,System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Handles the CollectionChanged event of the InnerCollections property when an inner
            collection is added or removed.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The 
            <see cref="T:System.Collections.Specialized.NotifyCollectionChangedEventArgs"/> instance 
            containing the event data.</param>
        </member>
        <member name="M:Emergent.Toolbench.Collections.MergedObservableCollection.OnCollectionChanged(System.Object,System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Handles the CollectionChanged event of the InnerCollections themselves when a single
            inner collection changes.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The 
            <see cref="T:System.Collections.Specialized.NotifyCollectionChangedEventArgs"/> 
            instance containing the event data.</param>
        </member>
        <member name="M:Emergent.Toolbench.Collections.MergedObservableCollection.GetFirstInnerCollectionCount(System.Int32)">
            <summary>
            Gets the count of elements in the first numCollections.
            </summary>
            <param name="numCollections">The number of collections to count.</param>
            <returns>Count of elements in specified collections.</returns>
        </member>
        <member name="M:Emergent.Toolbench.Collections.MergedObservableCollection.GetGlobalIndex(System.Collections.Specialized.INotifyCollectionChanged)">
            <summary>
            Gets the index of an inner collection within the full set.
            </summary>
            <param name="sender">The sender.</param>
            <returns>Global index inside all collections merged together.</returns>
        </member>
        <member name="M:Emergent.Toolbench.Collections.MergedObservableCollection.RaiseCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Raises the CollectionChanged event.
            </summary>
            <param name="e">The 
            <see cref="T:System.Collections.Specialized.NotifyCollectionChangedEventArgs"/> instance 
            containing the event data.</param>
        </member>
        <member name="M:Emergent.Toolbench.Collections.MergedObservableCollection.GetEnumerator">
            <summary>
            Returns an enumerator that will iterate all items of all inner collections. The result
            appears as a merged collection.  No copies are made of the collections.
            </summary>
            <returns>The enumerator.</returns>
        </member>
        <member name="M:Emergent.Toolbench.Collections.MergedObservableCollection.Add(System.Object)">
            <summary>
            Adds an item to the collection.
            </summary>
            <param name="value">Item to add to the collection.</param>
            <returns>Position into which the new item was inserted.</returns>
            <exception cref="T:System.NotImplementedException">Always thrown.</exception>
            <remarks>This method is not implemented. Consider acting on the InnerCollections
            instead.</remarks>
        </member>
        <member name="M:Emergent.Toolbench.Collections.MergedObservableCollection.Clear">
            <summary>
            Removes all items from the collection.
            </summary>
            <exception cref="T:System.NotImplementedException">Always thrown.</exception>
            <remarks>This method is not implemented. Consider acting on the InnerCollections
            instead.</remarks>
        </member>
        <member name="M:Emergent.Toolbench.Collections.MergedObservableCollection.Contains(System.Object)">
            <summary>
            Determines whether the collection contains a specific value.
            </summary>
            <param name="value">The value to locate in the collection.</param>
            <returns>True if the value is found in the collection, else false.</returns>
        </member>
        <member name="M:Emergent.Toolbench.Collections.MergedObservableCollection.IndexOf(System.Object)">
            <summary>
            Determines the index of a specific item in the collection.
            </summary>
            <param name="value">The value to locate in the collection.</param>
            <returns>The index of the value if found in the collection, else -1. Note that the index
            returned is for a specific inner collection.</returns>
        </member>
        <member name="M:Emergent.Toolbench.Collections.MergedObservableCollection.Insert(System.Int32,System.Object)">
            <summary>
            Inserts an item into the collection at the specified index.
            </summary>
            <param name="index">The zero-based index at which the item should be inserted.</param>
            <param name="value">The item to insert into the collection.</param>
            <exception cref="T:System.NotImplementedException">Always thrown.</exception>
            <remarks>This method is not implemented. Consider acting on the InnerCollections
            instead.</remarks>
        </member>
        <member name="M:Emergent.Toolbench.Collections.MergedObservableCollection.Remove(System.Object)">
            <summary>
            Removes the first occurrence of a specific item from the collection.
            </summary>
            <param name="value">The item to remove from the collection.</param>
            <exception cref="T:System.NotImplementedException">Always thrown.</exception>
            <remarks>This method is not implemented. Consider acting on the InnerCollections
            instead.</remarks>
        </member>
        <member name="M:Emergent.Toolbench.Collections.MergedObservableCollection.RemoveAt(System.Int32)">
            <summary>
            Removes the item at the specified index in the collection.
            </summary>
            <param name="index">The zero-based index of the item to remove.</param>
            <exception cref="T:System.NotImplementedException">Always thrown.</exception>
            <remarks>This method is not implemented. Consider acting on the InnerCollections
            instead.</remarks>
        </member>
        <member name="M:Emergent.Toolbench.Collections.MergedObservableCollection.CopyTo(System.Array,System.Int32)">
            <summary>
            Copies elements of the collection to an array starting at a particular index.
            </summary>
            <param name="array">The array that is the destination of the elements copied from the
            collection.</param>
            <param name="index">The zero-based index in the array at which copying begins.</param>
        </member>
        <member name="P:Emergent.Toolbench.Collections.MergedObservableCollection.InnerCollections">
            <summary>
            Contains the inner collections, to be merged by the enumerator.
            </summary>
        </member>
        <member name="E:Emergent.Toolbench.Collections.MergedObservableCollection.CollectionChanged">
            <summary>
            Provide notifications about added/removed elements inside any of the inner collections.
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.Collections.MergedObservableCollection.IsFixedSize">
            <summary>
            Returns false, indicating that the collection is not of fixed size.
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.Collections.MergedObservableCollection.IsReadOnly">
            <summary>
            Returns true, indicating that the collection is read-only and cannot be modified
            directly.
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.Collections.MergedObservableCollection.Item(System.Int32)">
            <summary>
            Gets or sets the item at the specified index.
            </summary>
            <param name="index">The zero-based index of the item to get or set.</param>
            <returns>The item at the specified index.</returns>
            <exception cref="T:System.IndexOutOfRangeException">Thrown for the get method when the supplied
            index is not a valid index in the collection.</exception>
            <exception cref="T:System.NotImplementedException">Always thrown for the set method.</exception>
            <remarks>The set method is not implemented. Consider acting on the InnerCollections
            instead.</remarks>
        </member>
        <member name="P:Emergent.Toolbench.Collections.MergedObservableCollection.Count">
            <summary>
            Gets the number of elements contained in the collection.
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.Collections.MergedObservableCollection.IsSynchronized">
            <summary>
            Returns false, indicating that the collection is not synchronized (thread safe).
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.Collections.MergedObservableCollection.SyncRoot">
            <summary>
            Returns an object that can be used to synchronize access to the collection.
            </summary>
        </member>
        <member name="T:Emergent.Toolbench.Collections.MergedObservableCollection.Enumerator">
            <summary>
            The enumerator uses the enumerators of the inner lists. It enqueues them in Reset and
            dequeues them in MoveNext.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.Collections.MergedObservableCollection.Enumerator.#ctor(Emergent.Toolbench.Collections.MergedObservableCollection)">
            <summary>
            Constructs an Enumerator.
            </summary>
            <param name="mergedCollection">The merged collection to enumerate.</param>
        </member>
        <member name="M:Emergent.Toolbench.Collections.MergedObservableCollection.Enumerator.MoveNext">
            <summary>
            Advances the enumerator to the next element of the collection.
            </summary>
            <returns>True if the enumerator was successfully advanced to the next element;
            false if the enumerator has passed the end of the collection.</returns>
            <exception cref="T:System.InvalidOperationException">The collection was modified 
            after the enumerator was created.</exception>
        </member>
        <member name="M:Emergent.Toolbench.Collections.MergedObservableCollection.Enumerator.Reset">
            <summary>
            Sets the enumerator to its initial position, which is before the first element in 
            the collection.
            </summary>
            <exception cref="T:System.InvalidOperationException">The collection was modified 
            after the enumerator was created.</exception>
        </member>
        <member name="P:Emergent.Toolbench.Collections.MergedObservableCollection.Enumerator.Current">
            <summary>
            Gets the current element in the collection.
            </summary>
            <returns>The current element in the collection.</returns>
            <exception cref="T:System.InvalidOperationException">The enumerator is positioned 
            before the first element of the collection or after the last element. -or- The 
            collection was modified after the enumerator was created.</exception>
        </member>
    </members>
</doc>
