<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Emergent.Toolbench.ContentService</name>
    </assembly>
    <members>
        <member name="T:Emergent.Toolbench.ContentService.IDocumentContentFactory">
            <summary>
            This interface provides additional functionality for specialized
            content based on physical files on the local disk on somewhere on the 
            network.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.ContentService.IDocumentContentFactory.New(Emergent.Toolbench.ContentService.ContentCreationSettings)">
            <summary>
            Creates a new instance of a document.
            </summary>
            <param name="args">Additional configuration data used to create the document.
            </param>
            <returns>A new document instance.</returns>
        </member>
        <member name="M:Emergent.Toolbench.ContentService.IDocumentContentFactory.Open(Emergent.Toolbench.ContentService.ContentCreationSettings)">
            <summary>
            Opens content from the specified location and builds a new document
            from that content.
            </summary>
            <param name="args">Additional configuration data used to create the document.
            </param>
            <returns>A new document instance.</returns>
        </member>
        <member name="M:Emergent.Toolbench.ContentService.IDocumentContentFactory.Save(Emergent.Toolbench.ContentService.AbstractDocument)">
            <summary>
            Saves the specified document.
            </summary>
            <param name="document">The document to save.</param>
        </member>
        <member name="M:Emergent.Toolbench.ContentService.IDocumentContentFactory.SaveAs(Emergent.Toolbench.ContentService.AbstractDocument,System.Uri)">
            <summary>
            Saves the specified document to a new location.
            </summary>
            <param name="document">The document.</param>
            <param name="newLocation">The new location.</param>
        </member>
        <member name="T:Emergent.Toolbench.ContentService.IContentService">
            <summary>
            This interface provides the means to create specialized types of
            content. Plug-ins can provide implementations of this factory via 
            the extension points in this plug-in. Note, the IContentFactory
            interface is also a service. Therefore, other plug-ins may use it and
            request additional information from the content factory during 
            run-time.
            </summary>    
        </member>
        <member name="M:Emergent.Toolbench.ContentService.IContentService.CreateContent(Emergent.Toolbench.ContentService.IContentFactoryDescriptor,Emergent.Toolbench.ContentService.ContentCreationSettings)">
            <summary>
            Creates a new content object instance. This is done by loading the 
            plug-in containing the specified content factory and instructing
            the factory to create the new content.
            </summary>
            <param name="factoryDesc">The descriptor containing the definition
                of the content factory to use for the creation of the new 
                content.
            </param>
            <param name="createArguments">Contains the arguments that may be 
                used by the factory when creating the new content.
            </param>
            <returns>A new content instance.</returns>
            <exception cref="T:Emergent.Toolbench.PlatformException">Thrown if an error occurs 
                creating the factory or the associated content instance.
            </exception>
        </member>
        <member name="M:Emergent.Toolbench.ContentService.IContentService.SaveDocumentContent(Emergent.Toolbench.ContentService.AbstractDocument)">
            <summary>
            This method is specialized for document sub-classed content. It 
            looks up the appropriate content factory and instructs the factory
            to save the specified content.
            </summary>
            <param name="document">The document to save.</param>
        </member>
        <member name="M:Emergent.Toolbench.ContentService.IContentService.OpenDocumentContent(System.Uri,Emergent.Toolbench.ContentService.ContentContext)">
            <summary>
            This method is specialized for document sub-classed content. It 
            looks up the appropriate content factory and instructs the factory
            to create and open the specified content.
            </summary>
            <remarks>
            <para>Warning: Calling this will increment the document ref 
            count.  Be sure you check if the document is open before calling 
            this method, or you will need to close the content as many times 
            as it is opened.</para>
            <para>The user interaction level is set depending on the context.</para>
            </remarks>
            <param name="resourcePath">Location of the content to open.</param>
            <returns>A new document instance containing the data at the
                specified resource path.
            </returns>
        </member>
        <member name="M:Emergent.Toolbench.ContentService.IContentService.OpenDocumentContent(System.Uri,Emergent.Toolbench.ContentService.ContentContext,Emergent.Toolbench.ContentService.ContentInteractivity)">
            <summary>
            This method is specialized for document sub-classed content. It 
            looks up the appropriate content factory and instructs the factory
            to create and open the specified content.
            </summary>
            <remarks>Warning: Calling this will increment the document ref 
            count.  Be sure you check if the document is open before calling 
            this method, or you will need to close the content as many times 
            as it is opened.</remarks>
            <param name="resourcePath">Location of the content to open.</param>
            <param name="interactivity">Desired level of user interaction.</param>
            <returns>A new document instance containing the data at the
                specified resource path.
            </returns>
        </member>
        <member name="M:Emergent.Toolbench.ContentService.IContentService.SaveDocumentContentAs(Emergent.Toolbench.ContentService.AbstractDocument,System.Uri)">
            <summary>
            This method is specialized for document sub-classed content. It 
            looks up the appropriate content factory and instructs the factory
            to save the specified content under a new path.
            </summary>
            <param name="doc">The document to save.</param>
            <param name="newResourcePath">Location with which to save the 
                document content.
            </param>
        </member>
        <member name="M:Emergent.Toolbench.ContentService.IContentService.CloseContent(Emergent.Toolbench.ContentService.AbstractContent,Emergent.Toolbench.ContentService.ContentContext)">
            <summary>
            Closes the specified content object and invokes its OnClose method.
            </summary>
            <param name="toClose">To close.</param>
        </member>
        <member name="M:Emergent.Toolbench.ContentService.IContentService.DeleteContent(Emergent.Toolbench.ContentService.AbstractContent,Emergent.Toolbench.ContentService.ContentContext)">
            <summary>
            Delete the specified content object and invokes its OnDelete method.
            </summary>
            <param name="toClose">To delete.</param>
        </member>
        <member name="M:Emergent.Toolbench.ContentService.IContentService.RegisterContent(Emergent.Toolbench.ContentService.AbstractContent,Emergent.Toolbench.ContentService.ContentContext)">
            <summary>
            Registers the content from the content service.  This will increment the content
            based on the context provided, but will not issue content open or opening events, it
            just turns on tracking for a piece of content.
            </summary>
            <param name="content">The content to register.</param>
            <param name="context">The context to register it in.</param>
        </member>
        <member name="M:Emergent.Toolbench.ContentService.IContentService.UnregisterContent(Emergent.Toolbench.ContentService.AbstractContent,Emergent.Toolbench.ContentService.ContentContext)">
            <summary>
            Unregisters the content from the content service.  This will decrement the content 
            based on the context provided, but will not issue any content close or closing events.
            It just turns off the tracking for a piece of content, removing it from internally
            tracking lists.
            </summary>
            <param name="content">The content to unregister.</param>
            <param name="context">The context to unregister it in.</param>
        </member>
        <member name="M:Emergent.Toolbench.ContentService.IContentService.IsContentOpen(System.Uri,Emergent.Toolbench.ContentService.AbstractContent@)">
            <summary>
            Determines whether the content referenced by the specified uri is
            opened.
            </summary>
            <param name="resourceLocation">The resource location.</param>
            <returns>The opened content or null if no such content exists.
            </returns>
        </member>
        <member name="M:Emergent.Toolbench.ContentService.IContentService.IsDocumentOpen(System.Uri,Emergent.Toolbench.ContentService.AbstractDocument@)">
            <summary>
            Determines whether the document referenced by the specified uri is
            opened.
            </summary>
            <param name="resourceLocation">The resource location.</param>
            <returns>The opened content or null if no such content exists.
            </returns>
        </member>
        <member name="M:Emergent.Toolbench.ContentService.IContentService.IsDocumentOpenGlobally(System.Uri,Emergent.Toolbench.ContentService.AbstractDocument@)">
            <summary>
            Determines whether the content referenced by the specified uri is
            opened globally or not.
            </summary>
            <param name="resourceLocation">The resource location.</param>
            <param name="document">The opened content or null if no such content exists.</param>
            <returns><c>true</c> if the content was found; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Emergent.Toolbench.ContentService.IContentService.FindContentDescriptor(System.String)">
            <summary>
            Finds a content descriptor for a particular unique content id.
            </summary>
            <param name="contentId">The content id.</param>
            <returns>The content descriptor for the content id.  If none exists;
            <value>null</value> is returned.</returns>
        </member>
        <member name="M:Emergent.Toolbench.ContentService.IContentService.FindContentByCategory(System.String)">
            <summary>
            Finds all the content descriptors that are in the specified 
            content category and only that category.
            </summary>
            <param name="fullCategoryName">Full name of the category where the 
                full name is the dot delimited hierarchical name.
            </param>
            <returns>A collection of content descriptors mapping to the
                specified category.
            </returns>
        </member>
        <member name="M:Emergent.Toolbench.ContentService.IContentService.FindAllContent(System.String)">
            <summary>
            Finds all content in the specified category as well as any content
            types in child categories.
            </summary>
            <param name="categoryName">Name of root category to search from.
            </param>
            <returns>A read-only collection of content descriptors.</returns>
        </member>
        <member name="M:Emergent.Toolbench.ContentService.IContentService.FindContentCategory(System.String)">
            <summary>
            Finds the content category with the specified dot delimited name.
            </summary>
            <param name="fullCategoryName">Full name of the category.</param>
            <returns>A valid category or null if a category with the specified
                name was not found.
            </returns>
        </member>
        <member name="M:Emergent.Toolbench.ContentService.IContentService.FindAspectsForContent(System.String)">
            <summary>
            Finds all the aspects that support the specified content.
            </summary>
            <param name="contentId">The content id.</param>
            <returns>A collection of aspect descriptors or an empty collection 
            if the specified content does not have any aspects that support it.
            </returns>
        </member>
        <member name="M:Emergent.Toolbench.ContentService.IContentService.FindPrimaryViewsForContentAspect(System.String,System.String)">
            <summary>
            Finds the primary views that support the specified content and 
            aspect combination.
            </summary>
            <param name="contentId">The content unique id.</param>
            <param name="aspectId">The aspect unique id.</param>
            <returns>A read-only collection of strings that contain unique 
            id's for the views supported the content/aspect combination. If 
            no supporting views are found, an empty collection is returned.
            </returns>
        </member>
        <member name="M:Emergent.Toolbench.ContentService.IContentService.HasPrimaryView(System.String)">
            <summary>
            Checks if there is a primary view for the content id.
            </summary>
            <param name="contentId">The content id to check.</param>
            <returns><c>true</c> if the content matching the id has a mapped primary view; 
            otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Emergent.Toolbench.ContentService.IContentService.IsPrimaryView(System.String,System.String)">
            <summary>
            Checks if the provided view id is the primary view for the content.
            </summary>
            <param name="contentId">The content id to look at.</param>
            <param name="viewId">The view id to check.</param>
            <returns><c>true</c> if the view is the primary view for the content; 
            otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Emergent.Toolbench.ContentService.IContentService.IsPrimaryView(System.String,System.String,System.String)">
            <summary>
            Checks if the provided view id is the primary view for the content.
            </summary>
            <param name="contentId">The content id to look at.</param>
            <param name="aspectId">The content aspect id.</param>
            <param name="viewId">The view id to check.</param>
            <returns><c>true</c> if the view is the primary view for the 
            content; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Emergent.Toolbench.ContentService.IContentService.IsSupportedFile(System.String,System.Boolean)">
            <summary>
            Gets a value indicating if the file is supported by a content 
            factory registered with Toolbench.
            </summary>
            <param name="fileName">The filename.</param>
            <param name="openDirectly">A value indicating if the file should support being opened 
            directly from explorer.</param>
            <returns><c>true</c> if the file is supported; otherwise, 
            <c>false</c>.</returns>
        </member>
        <member name="M:Emergent.Toolbench.ContentService.IContentService.IsSupportedFileExtension(System.String,System.Boolean)">
            <summary>
            Gets a value indicating if the file extension is supported by a 
            content factory registered with Toolbench.
            </summary>
            <param name="fileName">The file extension.</param>
            <param name="openDirectly">A value indicating if the file should support being opened 
            directly from explorer.</param>
            <returns><c>true</c> if the file extension is supported; otherwise, 
            <c>false</c>.</returns>
        </member>
        <member name="M:Emergent.Toolbench.ContentService.IContentService.FindContentForFile(System.String,System.Boolean)">
            <summary>
            Finds a collection of content descriptors for a given file 
            name.  Because not all content is based on a document the only
            results possible will be content types that have been mapped to
            document factories.
            </summary>
            <param name="fileName">The file.</param>
            <returns>A collection of content descriptors mapping to the 
            provided file extension.</returns>
        </member>
        <member name="M:Emergent.Toolbench.ContentService.IContentService.FindContentForFileExtension(System.String,System.Boolean)">
            <summary>
            Finds a collection of content descriptors for a given file 
            extension.  Because not all content is based on a document the only
            results possible will be content types that have been mapped to
            document factories.
            </summary>
            <param name="fileExt">The file extension.</param>
            <returns>A collection of content descriptors mapping to the 
            provided file extension.</returns>
        </member>
        <member name="M:Emergent.Toolbench.ContentService.IContentService.FindContentFactoriesForFile(System.String,System.Boolean)">
            <summary>
            Finds all the factories that support the file extension of the 
            provided file.
            </summary>
            <param name="fileName">The file.</param>
            <returns>A collection of content factory descriptors mapping to the 
            provided file.</returns>
        </member>
        <member name="M:Emergent.Toolbench.ContentService.IContentService.FindContentFactoriesForFileExtension(System.String,System.Boolean)">
            <summary>
            Finds all the factories that support the provided file extension.
            </summary>
            <param name="fileName">The file extension.</param>
            <returns>A collection of content factory descriptors mapping to the 
            provided file extension.</returns>
        </member>
        <member name="M:Emergent.Toolbench.ContentService.IContentService.FindContentFactory(System.String)">
            <summary>
            Finds the content factory with a unique id matching the specified 
            unique id.
            </summary>
            <param name="uniqueId">The unique id.</param>
            <returns>A valid content factory or null if a factory with the 
                specified unique id could not be found.
            </returns>
        </member>
        <member name="M:Emergent.Toolbench.ContentService.IContentService.FindFactoriesForContent(Emergent.Toolbench.ContentService.IContentDescriptor,System.Boolean)">
            <summary>
            Gets a list of content factory descriptors that support the 
            specified content.
            </summary>
            <param name="contentDescriptor">The descriptor for the content.
            </param>
            <returns>A list of factory descriptors.</returns>
        </member>
        <member name="M:Emergent.Toolbench.ContentService.IContentService.FindAllContentFactories">
            <summary>
            Gets a collection of all the content factories currently registered
            with the content service.
            </summary>
            <returns>A read-only collection of factory descriptors.</returns>
        </member>
        <member name="M:Emergent.Toolbench.ContentService.IContentService.FindDocumentByResourcePath(System.Uri)">
            <summary>
            Finds the document that wraps the file located at the specified 
            resource path.
            </summary>
            <param name="resourcePath">The resource path.</param>
            <returns>The document instance or null if a document with the 
                specified resource path could not be found.
            </returns>
        </member>
        <member name="M:Emergent.Toolbench.ContentService.IContentService.IsFileContentTypeUniqueAndOpen(System.Uri,Emergent.Toolbench.ContentService.AbstractContent@)">
            <summary>
            Checks if the file based content type is unique and open.
            </summary>
            <param name="resourcePath">The resource path to the content type.
            </param>
            <returns><c>true</c> if the content is unique and open; otherwise, 
            <c>false</c>.</returns>
        </member>
        <member name="M:Emergent.Toolbench.ContentService.IContentService.IsContentTypeOpen(System.String)">
            <summary>
            Checks if there is an instance of content matching the provided 
            content type id.
            </summary>
            <param name="contentId">The content type to check.</param>
            <returns><c>true</c> if the content is open; otherwise, 
            <c>false</c>.</returns>
        </member>
        <member name="M:Emergent.Toolbench.ContentService.IContentService.FindContentWizards(System.String)">
            <summary>
            Finds all the content wizard descriptors for a particular content type id.
            </summary>
            <param name="contentTypeId">The content type id.</param>
            <returns>A collection of content wizards descriptors.</returns>
        </member>
        <member name="P:Emergent.Toolbench.ContentService.IContentService.ActiveContent">
            <summary>
            Gets or sets the active content.  The active content is generally
            speaking the content that has focus.  If no content is open then
            the value will be <value>null</value>.  If the ActiveContent is
            changed, the ActiveContentChanging event will be fired before the
            change.  Following the change the ActiveContentChanged event will
            be fired.
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.ContentService.IContentService.ActiveDocument">
            <summary>
            Gets the ActiveContent in the form of an 
            <see cref="T:Emergent.Toolbench.ContentService.AbstractDocument"/>, if the underlying content is not 
            an <see cref="T:Emergent.Toolbench.ContentService.AbstractDocument"/> then <value>null</value> is 
            returned.
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.ContentService.IContentService.IsSaving">
            <summary>
            Gets a sets a value indicating if saving is occurring.
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.ContentService.IContentService.ContentCategories">
            <summary>
            Gets the top level categories for content. Categories are defined
            in a plug-in's manifest via the 
            Emergent.Toolbench.ContentService.ContentCategory extension point.
            Categories are used to organize different types of content.
            </summary>
            <value>A read-only collection of top level content categories.
            </value>
        </member>
        <member name="P:Emergent.Toolbench.ContentService.IContentService.ContentDescriptors">
            <summary>
            Gets all the content descriptors defined in the plug-in registry.
            </summary>
            <value>A read-only collection of content descriptors. If none are 
                found, the collection will be empty.
            </value>
        </member>
        <member name="P:Emergent.Toolbench.ContentService.IContentService.LiveContent">
            <summary>
            Gets a collection of content that is currently open or has been 
            created. Useful for classes that need to perform an operation on 
            all existing content. (e.g. SaveAll).
            </summary>
            <value>Content collection.</value>
        </member>
        <member name="T:Emergent.Toolbench.ContentService.ContentEventArgs">
            <summary>
            Provides data for content events.
            </summary>
        </member>
        <member name="T:Emergent.Toolbench.ContentService.ISerializableAspect">
            <summary>
            Serializable aspects exist so that if the content is extensible and you need
            to add metadata to the content then attaching serializable aspects would be
            the best way to achieve this.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.ContentService.ISerializableAspect.ToXml">
            <summary>
            Gets the serializable representation of the aspect.
            </summary>
            <returns>The serialized aspect data.</returns>
        </member>
        <member name="M:Emergent.Toolbench.ContentService.ISerializableAspect.FromXml(System.Xml.Linq.XElement)">
            <summary>
            Content factories should call this method if they wish to
            pass the data that was serialized by the aspect back to it.
            </summary>
        </member>
        <member name="T:Emergent.Toolbench.ContentService.IContentAspect">
            <summary>
            This interface exposes a chunk of data with-in an 
            <see cref="T:Emergent.Toolbench.ContentService.IContent"/> instance. Therefore a given type of content can
            be partitioned into separate pieces that views can display or edit.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.ContentService.IContentAspect.TryConnectContent(Emergent.Toolbench.ContentService.AbstractContent)">
            <summary>
            This method is used to attach an aspect instance to a supported 
            content instance. Note, implementations of this method must be sure
            to at the very least add themselves to the specified content 
            instance if appropriate.
            </summary>
            <param name="content">The content with which to attach.</param>
            <returns>True if the aspect was attached to the context, false
                otherwise. As an example, if a particular aspect operates on 
                physics data and the specified content object does not contain
                any physics data, then this method should return false.
            </returns>
        </member>
        <member name="M:Emergent.Toolbench.ContentService.IContentAspect.OnContentChanged(System.Object)">
            <summary>
            Called by the content that the aspect is connected to when its 
            content has been changed.
            </summary>
            <param name="genericData">The generic data.</param>
        </member>
        <member name="M:Emergent.Toolbench.ContentService.IContentAspect.DisconnectContent">
            <summary>
            Called just before the aspect is removed from the content it is 
            currently attached to.
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.ContentService.IContentAspect.AspectType">
            <summary>
            The aspect type represents the interface/class type to be used when looking
            up the aspect.  It will be found even if the user does not look up the aspect
            by this type, however, for quickest lookup times, this property should contain
            the expected type that would be used to lookup the aspect.
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.ContentService.IContentAspect.AspectData">
            <summary>
            Gets or sets the specific data that the aspect can use and 
            manipulate. Views that support a given aspect are expected to 
            understand the actual data contained in the generic object.
            </summary>
            <value>The content.</value>
        </member>
        <member name="P:Emergent.Toolbench.ContentService.IContentAspect.IsConnected">
            <summary>
            Gets a value indicating whether the aspect is connected to a given
            piece of content.
            </summary>
            <value><c>true</c> if the aspect is connected; otherwise, 
                <c>false</c>.
            </value>
        </member>
        <member name="P:Emergent.Toolbench.ContentService.IContentAspect.Descriptor">
            <summary>
            Gets the <see cref="T:Emergent.Toolbench.ContentService.IAspectDescriptor"/> for the aspect.
            </summary>
            <value>The descriptor.</value>
        </member>
        <member name="T:Emergent.Toolbench.ContentService.ArchiveAspect">
            <summary>
            The <see cref="T:Emergent.Toolbench.ContentService.ArchiveAspect"/> is designed to assist in backing up the last version of a
            file on disk.  The ArchiveAspect is designed to only archive the first version of a file
            until another save occurs, then all records are purged and another version can be archived.
            To take advantage of this functionality, just be sure to call 
            <see cref="M:Emergent.Toolbench.ContentService.ArchiveAspect.RememberDelete(System.String)"/> before performing deletes and 
            <see cref="M:Emergent.Toolbench.ContentService.ArchiveAspect.RememberRestore(System.String)"/> after undoing a delete.
            </summary>
        </member>
        <member name="T:Emergent.Toolbench.ContentService.AbstractContentAspect">
            <summary>
            Abstract class that provides default implementations for some of the 
            content aspect interfaces. New aspects must derive from this class.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.ContentService.AbstractContentAspect.#ctor">
            <summary>
            Initializes a new instance of the 
            <see cref="T:Emergent.Toolbench.ContentService.AbstractContentAspect"/> class. Note, this method is 
            protected since this is an abstract class.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.ContentService.AbstractContentAspect.TryConnectContent(Emergent.Toolbench.ContentService.AbstractContent)">
            <summary>
            This method is used to attach an aspect instance to a supported
            content instance. 
            </summary>
            <param name="content">The content with which to attach.</param>
            <returns>
                True if the aspect should be attached to the context, false
                otherwise. As an example, if a particular aspect operates on
                physics data and the specified content object does not contain
                any physics data, then this method should return false.
            </returns>
        </member>
        <member name="M:Emergent.Toolbench.ContentService.AbstractContentAspect.OnContentChanged(System.Object)">
            <summary>
            Called by the content that the aspect is connected to when its
            content has been changed.
            </summary>
            <param name="genericData">The generic data.</param>
            <remarks>Default implementation does nothing.</remarks>
        </member>
        <member name="M:Emergent.Toolbench.ContentService.AbstractContentAspect.DisconnectContent">
            <summary>
            Called just before the aspect is removed from the content it is
            currently attached to.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.ContentService.AbstractContentAspect.OnContentDisconnected">
            <summary>
            Called just before the content is disconnected from the aspect.
            </summary>
            <remarks>Default implementation does nothing.</remarks>
        </member>
        <member name="P:Emergent.Toolbench.ContentService.AbstractContentAspect.AspectType">
            <summary>
            The aspect type represents the interface/class type to be used when looking
            up the aspect.  It will be found even if the user does not look up the aspect
            by this type, however, for quickest lookup times, this property should contain
            the expected type that would be used to lookup the aspect.
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.ContentService.AbstractContentAspect.AspectData">
            <summary>
            Gets or sets the specific data that the aspect can use and 
            manipulate. Views that support a given aspect are expected to 
            understand the actual data contained in the generic object.
            </summary>
            <value>The content.</value>
        </member>
        <member name="P:Emergent.Toolbench.ContentService.AbstractContentAspect.Content">
            <summary>
            Gets the connected content for this aspect.
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.ContentService.AbstractContentAspect.Descriptor">
            <summary>
            Gets the <see cref="T:Emergent.Toolbench.ContentService.IAspectDescriptor"/> for the aspect.
            </summary>
            <value>The descriptor.</value>
        </member>
        <member name="P:Emergent.Toolbench.ContentService.AbstractContentAspect.IsConnected">
            <summary>
            Gets a value indicating whether the aspect is connected to a given
            piece of content.
            </summary>
            <value><c>true</c> if the aspect is connected; otherwise,
            <c>false</c>.
            </value>
        </member>
        <member name="M:Emergent.Toolbench.ContentService.ArchiveAspect.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:Emergent.Toolbench.ContentService.ArchiveAspect"/>.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.ContentService.ArchiveAspect.OnContentConnected">
            <summary>
            Called when content is connected to the aspect.  Adds event handlers for the content
            being saved so that we can purge any archives.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.ContentService.ArchiveAspect.OnContentDisconnected">
            <summary>
            Called just before the content is disconnected from the aspect.  Will remove event
            handlers and restore any existing archives.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.ContentService.ArchiveAspect.OnContentSaved(Emergent.Toolbench.ContentService.AbstractDocument)">
            <summary>
            Called when the content connected to this aspect is saved.  We purge any archived
            files when a save occurs.
            </summary>
            <param name="sender">The content.</param>
        </member>
        <member name="M:Emergent.Toolbench.ContentService.ArchiveAspect.Initialize">
            <summary>
            Initializes the aspect.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.ContentService.ArchiveAspect.Shutdown">
            <summary>
            Shuts down the aspect and restores any outstanding archives.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.ContentService.ArchiveAspect.RememberCreate(System.String)">
            <summary>
            Remembers that a file creation occurred so that it can be deleted later.
            </summary>
            <param name="path">The file path to remember.</param>
        </member>
        <member name="M:Emergent.Toolbench.ContentService.ArchiveAspect.RememberDelete(System.String)">
            <summary>
            Archives the file the the given path and makes a temporary copy of the files unless
            one already exists.
            </summary>
            <param name="path">The file path to archive.</param>
        </member>
        <member name="M:Emergent.Toolbench.ContentService.ArchiveAspect.RememberRestore(System.String)">
            <summary>
            Restores an the last archived version of the path specified.  If no archive exists
            nothing is restored.
            </summary>
            <param name="path">The file path of the file to restore from an archive.</param>
        </member>
        <member name="M:Emergent.Toolbench.ContentService.ArchiveAspect.RememberRename(System.String,System.String)">
            <summary>
            Tracks renames and archives old versions of the files so that they can be restored if
            the renames are not saved.
            </summary>
            <param name="sourcePath">The source path.</param>
            <param name="destPath">The destination path.</param>
        </member>
        <member name="P:Emergent.Toolbench.ContentService.ArchiveAspect.Initialized">
            <summary>
            Gets the a value indicating if the archive aspect has been initialized.  This value is
            automatically set when the archive aspect gets used by a piece of content or archive or
            restore files.
            </summary>
        </member>
        <member name="T:Emergent.Toolbench.ContentService.ArchiveAspect.CreateRecord">
            <summary>
            The <see cref="T:Emergent.Toolbench.ContentService.ArchiveAspect.CreateRecord"/> class stores information about a file creation that
            occured.
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.ContentService.ArchiveAspect.CreateRecord.OriginalFile">
            <summary>
            Gets or sets the file name.
            </summary>
        </member>
        <member name="T:Emergent.Toolbench.ContentService.ArchiveAspect.DeleteRecord">
            <summary>
            The <see cref="T:Emergent.Toolbench.ContentService.ArchiveAspect.DeleteRecord"/> class stores information about the archived file
            and the original file it came from.
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.ContentService.ArchiveAspect.DeleteRecord.ArchiveFile">
            <summary>
            Gets or sets the archived file name.
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.ContentService.ArchiveAspect.DeleteRecord.OriginalFile">
            <summary>
            Gets or sets the original file name.
            </summary>
        </member>
        <member name="T:Emergent.Toolbench.ContentService.ArchiveAspect.RestoreRecord">
            <summary>
            When a delete is undone we need to add a record noting that the file was restored
            this is so that during the delete/create/undelete rollback we can restore the files
            on disk.
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.ContentService.ArchiveAspect.RestoreRecord.ArchiveFile">
            <summary>
            Gets or sets the archived file name that the restored file came from.
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.ContentService.ArchiveAspect.RestoreRecord.RestoredFile">
            <summary>
            Gets or sets the restored file name.
            </summary>
        </member>
        <member name="T:Emergent.Toolbench.ContentService.ArchiveAspect.RenameRecord">
            <summary>
            The <see cref="T:Emergent.Toolbench.ContentService.ArchiveAspect.RenameRecord"/> stores the original and new file name of a rename. As
            well as the normalized path used for record lookups.
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.ContentService.ArchiveAspect.RenameRecord.SourceFile">
            <summary>
            Gets the original file name.
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.ContentService.ArchiveAspect.RenameRecord.DestinationFile">
            <summary>
            Gets the new file name.
            </summary>
        </member>
        <member name="T:Emergent.Toolbench.ContentService.ContentContext">
            <summary>
            Provides a way of opening content in a specific context.
            </summary>
        </member>
        <member name="F:Emergent.Toolbench.ContentService.ContentContext.Global">
            <summary>
            Content opened globally is content opened by the user, opening content in this fashion
            will cause the creation of UI just as if the user had opened it from a menu.
            </summary>
        </member>
        <member name="F:Emergent.Toolbench.ContentService.ContentContext.Shared">
            <summary>
            Content opened shared is content opened by another piece of content that wants to 
            actively share the instance with anyone else who has opened the same content globally 
            or shared.
            </summary>
        </member>
        <member name="F:Emergent.Toolbench.ContentService.ContentContext.Private">
            <summary>
            Content opened privately will not be reported to other systems watching the content
            service.  This instance of the content will need to be managed by whoever opens it.
            </summary>
        </member>
        <member name="T:Emergent.Toolbench.ContentService.IContent">
            <summary>
            This interface defines a logical object for content that may also 
            contain <see cref="T:Emergent.Toolbench.ContentService.IContentAspect"/> instances. Content can be provided 
            by anything from a network stream, to a physical file on disk. Note, 
            this is an internal interface since users must extend the 
            <see cref="T:Emergent.Toolbench.ContentService.AbstractContent"/> class instead of implementing this interface.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.ContentService.IContent.FindAspect(System.String)">
            <summary>
            Searches for an aspect with the specified unique id.
            </summary>
            <param name="uniqueId">The unique id.</param>
            <returns>An aspect with the specified id or null if no such aspect
                exists on the content.
            </returns>
        </member>
        <member name="M:Emergent.Toolbench.ContentService.IContent.FindAspect(System.Type)">
            <summary>
            Finds the aspect matching the class type of the specified template
            argument. If there are multiple aspects of the same class type on
            the content, the first one is returned.
            </summary>
            <param name="aspectType">The type of the aspect to extract.</param>
            <returns>
                An aspect of the specified class type, or null if no such
                aspect could be found.
            </returns>
        </member>
        <member name="M:Emergent.Toolbench.ContentService.IContent.FindAspect``1">
            <summary>
            Finds the aspect matching the class type of the specified template
            argument. If there are multiple aspects of the same class type on 
            the content, the first one is returned.
            </summary>
            <returns>An aspect of the specified class type, or null if no such
                aspect could be found.
            </returns>
        </member>
        <member name="M:Emergent.Toolbench.ContentService.IContent.ContainsAspect(System.String)">
            <summary>
            Determines whether the content has an instance of an aspect with 
            the specified unique id.
            </summary>
            <param name="uniqueId">The unique id.</param>
            <returns>True if the aspect exists on the content, false otherwise.
            </returns>
        </member>
        <member name="M:Emergent.Toolbench.ContentService.IContent.ContainsAspect(System.Type)">
            <summary>
            Determines whether the content has an instance of an aspect with
            the specified type.
            </summary>
            <param name="type">The type of the aspect to look for.</param>
            <returns><c>true</c> if the aspect exists on the content, <c>false</c> otherwise.
            </returns>
        </member>
        <member name="M:Emergent.Toolbench.ContentService.IContent.UpdateContent(System.Object)">
            <summary>
            Called when content is updated. 
            </summary>
            <param name="genericData">The generic data representing the 
                updated content.
            </param>
        </member>
        <member name="M:Emergent.Toolbench.ContentService.IContent.UpdateContent(System.Object,System.String)">
            <summary>
            Called when content is updated.
            </summary>
            <param name="genericData">The generic data representing the 
                updated content.
            </param>
            <param name="viewId">Identifier of the view that updated the 
                content. This is to allow views to make sure they don't get 
                update messages from themselves.
            </param>
        </member>
        <member name="M:Emergent.Toolbench.ContentService.IContent.Clear">
            <summary>
            Resets the content to a default state.
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.ContentService.IContent.ContentInstanceId">
            <summary>
            Gets the id assigned to the content when it was created.  This is
            id is guaranteed to be the same while the instance of this content is
            active.
            </summary>
            <remarks>Do not use this id when persisting information about a piece of
            content.</remarks>
        </member>
        <member name="P:Emergent.Toolbench.ContentService.IContent.FactoryDescriptor">
            <summary>
            Gets the descriptor of the content factory that was used to create
            the content.
            </summary>
            <value>The content factory descriptor.</value>
        </member>
        <member name="P:Emergent.Toolbench.ContentService.IContent.ContentDescriptor">
            <summary>
            Gets the content descriptor for the content. The content descriptor
            provides a means of categorizing the content.
            </summary>
            <value>The content descriptor.</value>
        </member>
        <member name="P:Emergent.Toolbench.ContentService.IContent.ContentAspects">
            <summary>
            Gets the content aspects contained by the content instance. The 
            content aspects represent the actual data provided by the 
            particular content object.
            </summary>
            <value>The content aspects.</value>
        </member>
        <member name="P:Emergent.Toolbench.ContentService.IContent.Dirty">
            <summary>
            Gets a value indicating whether this <see cref="T:Emergent.Toolbench.ContentService.IDocument"/> is 
            dirty. 
            </summary>
            <value><c>true</c> if dirty; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Emergent.Toolbench.ContentService.IContent.IsIgnoringDirtyChanges">
            <summary>
            Gets or sets a value indicating whether changes to the <see cref="P:Emergent.Toolbench.ContentService.IContent.Dirty"/>
            flag should be honored. If true, changes to the dirty flag are ignored.
            </summary>
            <remarks>
            This property is useful during file loading; aspects may inadvertently set
            the dirty flag on documents when attaching themselves to content.
            </remarks>
        </member>
        <member name="T:Emergent.Toolbench.ContentService.IContentDescriptor">
            <summary>
            Defines an interface for inspecting meta-data descriptions about a 
            given type of content. Some of the information exposed by the interface
            may or may not be useful for all content types.
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.ContentService.IContentDescriptor.UniqueId">
            <summary>
            Gets the unique identifier for the content. Content implementations
            must have a unique identifier in order for content aspects to 
            connect to them.
            </summary>
            <value>The unique id.</value>
        </member>
        <member name="P:Emergent.Toolbench.ContentService.IContentDescriptor.Semantic">
            <summary>
            Gets the semantic of the content. The semantic provides a
            way to logically distinguish between different types of content. 
            Semantics are similar to mime-types.
            </summary>
            <value>The semantic.</value>
        </member>
        <member name="P:Emergent.Toolbench.ContentService.IContentDescriptor.Category">
            <summary>
            Gets the content category for the content instance.
            </summary>
            <value>The category.</value>
        </member>
        <member name="P:Emergent.Toolbench.ContentService.IContentDescriptor.FilterDescription">
            <summary>
            Gets the filter description. The filter description is used when 
            presenting classes of content types to the user for selection. 
            (Ex: Open file dialog uses this description in conjunction with the
            file extension when generating a filter string).
            </summary>
            <value>The filter description.</value>
        </member>
        <member name="P:Emergent.Toolbench.ContentService.IContentDescriptor.Unique">
            <summary>
            Gets a value indicating if the content is unique.  Unique content
            is content that can only exist as a single instance at any given
            time.
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.ContentService.IContentDescriptor.RequiresSolution">
            <summary>
            Gets a value indicating if the content requires an open game solution.
            This is used for file types that must be contained in the open solution's
            content root.
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.ContentService.IContentDescriptor.Hidden">
            <summary>
            Gets a value indicating if the content is should be hidden from
            any user-facing dialogues. This is generally used for content types
            that are opened privately and not meant for user creation.
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.ContentService.IContentDescriptor.FileAssociationAllowed">
            <summary>
            Gets a value indicating if the content can be file associated.
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.ContentService.IContentDescriptor.ConfigurationData">
            <summary>
            Gets the configuration data for the content. The configuration data
            is set while parsing the plug-in manifest that defines the content.
            This allows the custom content type to define additional data in 
            the XML manifest unique to that particular type of content.
            </summary>
            <value>The configuration data.</value>
        </member>
        <member name="T:Emergent.Toolbench.ContentService.ContentChangedEventArgs">
            <summary>
            Event containing data for a content changed event that is invoked by 
            an instance of an <see cref="T:Emergent.Toolbench.ContentService.AbstractContent"/>.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.ContentService.ContentChangedEventArgs.#ctor(System.String,System.Object)">
            <summary>
            Initializes the event.
            </summary>
            <param name="viewId">Unique identifier of the view that causes the
                event to occur or null if the event was invoked from another 
                source.
            </param>
            <param name="newContent">The new content.</param>
        </member>
        <member name="T:Emergent.Toolbench.ContentService.Plugin">
            <summary>
            Content factory plug-in entry point. The plug-in initializes and adds 
            the content factory service to the platform.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.ContentService.Plugin.Start">
            <summary>
            When the plug-in is loaded, the content factory service is added
            to the platform.
            </summary>
        </member>
        <member name="T:Emergent.Toolbench.ContentService.IContentFactoryDescriptor">
            <summary>
            This interface provides a method by which meta-data of a given content
            factory can be accessed. Note, some fields may not apply depending on 
            the type of content factory the descriptor represents.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.ContentService.IContentFactoryDescriptor.SupportsFileExtension(System.String)">
            <summary>
            Determines whether the specified file extension is supported by 
            the content factory described by the descriptor.
            </summary>
            <param name="fileExtension">The file extension. Note, the dot must
                be included. (e.g. .bmp instead of bmp).
            </param>
            <returns>True if supported, false otherwise.</returns>
        </member>
        <member name="M:Emergent.Toolbench.ContentService.IContentFactoryDescriptor.GetFilterPattern">
            <summary>
            Builds a filter pattern from the factory's list of supported 
            extensions. A filter pattern is a semi-colon separated list of glob
            patterns. (e.g. *.bmp;*.jpg;*.png)
            </summary>
            <returns>A string containing the filter pattern.</returns>
        </member>
        <member name="P:Emergent.Toolbench.ContentService.IContentFactoryDescriptor.UniqueId">
            <summary>
            Gets the unique identifier of the factory.
            </summary>
            <value>The unique id.</value>
        </member>
        <member name="P:Emergent.Toolbench.ContentService.IContentFactoryDescriptor.Name">
            <summary>
            Gets a simple name for the factory.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:Emergent.Toolbench.ContentService.IContentFactoryDescriptor.Description">
            <summary>
            Gets the description of what the factory provides.
            </summary>
            <value>The description.</value>
        </member>
        <member name="P:Emergent.Toolbench.ContentService.IContentFactoryDescriptor.ContentId">
            <summary>
            Gets the content identifier that the factory is mapped to.
            </summary>
            <value>The content id.</value>
        </member>
        <member name="P:Emergent.Toolbench.ContentService.IContentFactoryDescriptor.Icon">
            <summary>
            Gets the icon that represents the content factory. The icon is used
            to conjunction with other meta-data to present the factory to the 
            user when one must be selected.
            </summary>
            <value>The icon.</value>
        </member>
        <member name="P:Emergent.Toolbench.ContentService.IContentFactoryDescriptor.Abstract">
            <summary>
            Gets a value indicating if this factory can be used to create 
            documents.
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.ContentService.IContentFactoryDescriptor.FileExtensions">
            <summary>
            Gets an array of file extensions supported by the content factory.
            </summary>
            <value>
            An array of file extensions.
            </value>
        </member>
        <member name="P:Emergent.Toolbench.ContentService.IContentFactoryDescriptor.ConfigurationData">
            <summary>
            Gets the XML configuration data defining the content factory.
            </summary>
            <value>The configuration data.</value>
        </member>
        <member name="P:Emergent.Toolbench.ContentService.IContentFactoryDescriptor.SuggestDefaultFolder">
            <summary>
            Determines whether the New Content UI should suggest a default folder
            for this content.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.ContentService.ContentWizardDescriptor.#ctor(Emergent.Toolbench.IElementData)">
            <summary>
            Extracts the necessary data from the XML element configuration 
            node.
            </summary>
            <param name="configData">The config data.</param>
        </member>
        <member name="T:Emergent.Toolbench.ContentService.AbstractDocumentFactory">
            <summary>
            Provides abstract implementations of the document factory interface.
            Plug-ins that wish to provide new document content should in most cases
            extend this class.
            </summary>
        </member>
        <member name="T:Emergent.Toolbench.ContentService.IContentFactory">
            <summary>
            This interface provides the basis for creating content instances in the 
            content system.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.ContentService.IContentFactory.Create(Emergent.Toolbench.ContentService.ContentCreationSettings)">
            <summary>
            Creates the specified content. This method is invoked when a piece
            of content is requested by the system that maps to the specific 
            factory implementation.
            </summary>
            <param name="creationArgs">Additional data that may be used when
                creating the new content. May be null if no additional data is
                required.
            </param>
            <returns>A new content instance.</returns>
        </member>
        <member name="M:Emergent.Toolbench.ContentService.AbstractDocumentFactory.#ctor">
            <summary>
            Empty protected default constructor.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.ContentService.AbstractDocumentFactory.New(Emergent.Toolbench.ContentService.ContentCreationSettings)">
            <summary>
            Creates a new instance of a document. This method is called when 
            the content is created.
            </summary>
            <param name="args">Additional configuration data used to create
                the document.</param>
            <returns>A new document instance.</returns>
        </member>
        <member name="M:Emergent.Toolbench.ContentService.AbstractDocumentFactory.Open(Emergent.Toolbench.ContentService.ContentCreationSettings)">
            <summary>
            Opens content from the specified location and builds a new document
            from that content.
            </summary>
            <param name="args">Additional configuration data used to create
                the document.</param>
            <returns>A new document instance.</returns>
        </member>
        <member name="M:Emergent.Toolbench.ContentService.AbstractDocumentFactory.Save(Emergent.Toolbench.ContentService.AbstractDocument)">
            <summary>
            Saves the specified document.
            </summary>
            <param name="document">The document to save.</param>
        </member>
        <member name="M:Emergent.Toolbench.ContentService.AbstractDocumentFactory.SaveAs(Emergent.Toolbench.ContentService.AbstractDocument,System.Uri)">
            <summary>
            Saves the specified document to a new location. The default
            implementation sets the new resource location and then invokes the
            save method.
            </summary>
            <param name="document">The document.</param>
            <param name="newLocation">The new location.</param>
        </member>
        <member name="M:Emergent.Toolbench.ContentService.AbstractDocumentFactory.Create(Emergent.Toolbench.ContentService.ContentCreationSettings)">
            <summary>
            Creates the specified content. This method is invoked when a piece
            of content is requested by the system that maps to the specific 
            factory implementation.
            </summary>
            <param name="creationArgs">Additional data that may be used when
                creating the new content. May be null if no additional data is
                required.
            </param>
            <returns>A new content instance.</returns>
        </member>
        <member name="T:Emergent.Toolbench.ContentService.IDocument">
            <summary>
            This interface extends the base content interface adding support for 
            read-only status, modified status, etc. Instances of this content
            interface are in most cases mapped to a physical file on disk. Note, 
            this interface is internal. Users should extend the AbstractDocument
            class instead of implementing this interface.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.ContentService.IDocument.OnDocumentLoaded">
            <summary>
            Fires the DocumentLoaded event.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.ContentService.IDocument.OnDocumentSaved">
            <summary>
            Fires the DocumentSaved event.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.ContentService.IDocument.OnDocumentSavedAs(System.Uri)">
            <summary>
            Fires the DocumentSavedAs event.
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.ContentService.IDocument.ContentState">
            <summary>
            Gets the content state.
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.ContentService.IDocument.ReadOnly">
            <summary>
            Gets a value indicating whether the document is read-only.
            </summary>
            <value><c>true</c> if [read only]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Emergent.Toolbench.ContentService.IDocument.ResourceLocation">
            <summary>
            Gets the location or path of the document where the resource 
            location could be a file path, network path, etc.
            </summary>
            <value>The resource location.</value>
        </member>
        <member name="T:Emergent.Toolbench.ContentService.IContentWizard">
            <summary>
            The content wizard interface allows plugin writers to write custom handlers for new content
            creation.  After their factory has created the content they can add an extension that 
            points to a content wizard that can be launched when their content is created for the
            first time.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.ContentService.IContentWizard.Summon(Emergent.Toolbench.ContentService.AbstractContent)">
            <summary>
            Called when the content service needs the content wizard to perform whatever action
            it needs to finish initializing the content.
            </summary>
            <param name="content">The content that has been created.</param>
            <returns><c>true</c> if the wizard finished successfully; otherwise <c>false</c>.
            </returns>
        </member>
        <member name="T:Emergent.Toolbench.ContentService.ContentDescriptor">
            <summary>
            Implements the content descriptor interface and provides additional 
            functionality for injecting the necessary data into the descriptor when
            parsing a plug-in's manifest. Note, this is an internal class only.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.ContentService.ContentDescriptor.#ctor(Emergent.Toolbench.IElementData)">
            <summary>
            Initializes a new instance of the <see cref="T:Emergent.Toolbench.ContentService.ContentDescriptor"/> 
            class.
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.ContentService.ContentDescriptor.UniqueId">
            <summary>
            Gets the unique identifier for the content. Content implementations
            must have a unique identifier in order for content aspects to
            connect to them.
            </summary>
            <value>The unique id.</value>
        </member>
        <member name="P:Emergent.Toolbench.ContentService.ContentDescriptor.Semantic">
            <summary>
            Gets the semantic of the content. The semantic provides a
            way to logically distinguish between different types of content.
            Semantics are similar to mime-types.
            </summary>
            <value>The semantic.</value>
        </member>
        <member name="P:Emergent.Toolbench.ContentService.ContentDescriptor.Category">
            <summary>
            Gets the content category for the content instance.
            </summary>
            <value>The category.</value>
        </member>
        <member name="P:Emergent.Toolbench.ContentService.ContentDescriptor.FilterDescription">
            <summary>
            Gets the filter description. The filter description is used when
            presenting classes of content types to the user for selection.
            (Ex: Open file dialog uses this description in conjunction with the
            file extension when generating a filter string).
            </summary>
            <value>The filter description.</value>
        </member>
        <member name="P:Emergent.Toolbench.ContentService.ContentDescriptor.Unique">
            <summary>
            Gets a value indicating if the content is unique.  Unique content
            is content that can only exist as a single instance at any given
            time.
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.ContentService.ContentDescriptor.Hidden">
            <summary>
            Gets a value indicating if the content is should be hidden from
            any user-facing dialogs. This is generally used for content types
            that are opened privately and not meant for user creation.
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.ContentService.ContentDescriptor.RequiresSolution">
            <summary>
            Gets a value indicating if the content requires an open game solution.
            This is used for file types that must be contained in the open solution's
            content root.
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.ContentService.ContentDescriptor.FileAssociationAllowed">
            <summary>
            Gets a value indicating if the content can be file associated.
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.ContentService.ContentDescriptor.ConfigurationData">
            <summary>
            Gets the configuration data for the content. The configuration data
            is set while parsing the plug-in manifest that defines the content.
            This allows the custom content type to define additional data in 
            the XML manifest unique to that particular type of content.
            </summary>
            <value>The configuration data.</value>
        </member>
        <member name="T:Emergent.Toolbench.ContentService.ContentMigrationEventArgs">
            <summary>
            Class that encapsulates the arguments of a content migration for an opening document.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.ContentService.ContentMigrationEventArgs.#ctor(Emergent.Toolbench.ContentService.IContentDescriptor,System.Uri,Emergent.Toolbench.MigrationService.MigrationJob)">
            <summary>
            Initializes a new instance of the <see cref="T:Emergent.Toolbench.ContentService.ContentMigrationEventArgs"/> class.
            </summary>
            <param name="contentDescriptor">The content descriptor.</param>
            <param name="resourcePath">The resource path.</param>
            <param name="migrationJob">The migration job.</param>
        </member>
        <member name="P:Emergent.Toolbench.ContentService.ContentMigrationEventArgs.ContentDescriptor">
            <summary>
            Gets the content descriptor.
            </summary>
            <value>The content descriptor.</value>
        </member>
        <member name="P:Emergent.Toolbench.ContentService.ContentMigrationEventArgs.ResourcePath">
            <summary>
            Gets the resource path.
            </summary>
            <value>The resource path.</value>
        </member>
        <member name="P:Emergent.Toolbench.ContentService.ContentMigrationEventArgs.MigrationJob">
            <summary>
            Gets the migration job.
            </summary>
            <value>The migration job.</value>
        </member>
        <member name="P:Emergent.Toolbench.ContentService.ContentMigrationEventArgs.PreMigrationVersion">
            <summary>
            Gets the pre-migration version.
            </summary>
            <value>The pre-migration version.</value>
        </member>
        <member name="T:Emergent.Toolbench.ContentService.ContentInteractivity">
            <summary>
            Describes the amount of desired user interaction when opening content.
            </summary>
        </member>
        <member name="F:Emergent.Toolbench.ContentService.ContentInteractivity.OnlyLogs">
            <summary>
            Content should not display any UI, but may still log entries to the Output View.
            </summary>
        </member>
        <member name="F:Emergent.Toolbench.ContentService.ContentInteractivity.ShowEverything">
            <summary>
            Content may display any necessary UI.
            </summary>
        </member>
        <member name="T:Emergent.Toolbench.ContentService.ContentCategory">
            <summary>
            Implements the content category interface. Note this is an internal 
            class.
            </summary>
        </member>
        <member name="T:Emergent.Toolbench.ContentService.IContentCategory">
            <summary>
            Defines the interface for a category of content in the content system.
            A category may have nested categories.
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.ContentService.IContentCategory.Name">
            <summary>
            Gets the name of the category.
            </summary>
            <value>The category name.</value>
        </member>
        <member name="P:Emergent.Toolbench.ContentService.IContentCategory.FullName">
            <summary>
            Gets the full name where the full name represents the dot delimited
            name of the category.
            </summary>
            <value>The full name.</value>
        </member>
        <member name="P:Emergent.Toolbench.ContentService.IContentCategory.Description">
            <summary>
            Gets the description of the category.
            </summary>
            <value>The description.</value>
        </member>
        <member name="P:Emergent.Toolbench.ContentService.IContentCategory.SubCategories">
            <summary>
            Gets the children of the category. This is useful for grouping 
            related yet disjoint sub-categories.
            </summary>
            <value>The sub-categories.</value>
        </member>
        <member name="M:Emergent.Toolbench.ContentService.ContentCategory.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Emergent.Toolbench.ContentService.ContentCategory"/> 
            class.
            </summary>
            <param name="name">The name. Must be valid.</param>
            <param name="description">The description. Can be null.</param>
        </member>
        <member name="M:Emergent.Toolbench.ContentService.ContentCategory.AddSubCategory(Emergent.Toolbench.ContentService.IContentCategory)">
            <summary>
            Adds a new sub-category to this parent category.
            </summary>
            <param name="subCat">The sub cat.</param>
        </member>
        <member name="P:Emergent.Toolbench.ContentService.ContentCategory.Name">
            <summary>
            Gets the name of the category where the name is the name of the
            category within it's hierarchical context.
            </summary>
            <value>The category name.</value>
        </member>
        <member name="P:Emergent.Toolbench.ContentService.ContentCategory.FullName">
            <summary>
            Gets the full name where the full name represents the dot delimited
            name of the category.
            </summary>
            <value>The full name.</value>
        </member>
        <member name="P:Emergent.Toolbench.ContentService.ContentCategory.Description">
            <summary>
            Gets the description of the category.
            </summary>
            <value>The description.</value>
        </member>
        <member name="P:Emergent.Toolbench.ContentService.ContentCategory.SubCategories">
            <summary>
            Gets the children of the category. This is useful for grouping
            related yet disjoint sub-categories.
            </summary>
            <value>The sub-categories.</value>
        </member>
        <member name="T:Emergent.Toolbench.ContentService.AbstractContent">
            <summary>
            Implements the base content which plug-ins can use as a starting point
            for adding new content to the system.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.ContentService.AbstractContent.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Emergent.Toolbench.ContentService.AbstractContent"/> 
            class.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.ContentService.AbstractContent.BeginIgnoringDirty">
            <summary>
            Begins ignoring dirty changes.  Internally being/end ignoring dirty uses a counter and
            there must be a matching End for every Begin.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.ContentService.AbstractContent.EndIgnoringDirty">
            <summary>
            Ends ignoring dirty changes.  Internally being/end ignoring dirty uses a counter and
            there must be a matching End for every Begin.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.ContentService.AbstractContent.ForceDirty">
            <summary>
            Forces the content to be marked as dirty.  This will set the content as dirty if it is
            not already, despite any dirty changes being ignored.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.ContentService.AbstractContent.OnDirtyStatusChanged">
            <summary>
            Called when the document's dirty status is changed.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Emergent.Toolbench.ContentService.AbstractContent.FindAspect(System.String)" -->
        <member name="M:Emergent.Toolbench.ContentService.AbstractContent.FindAspect``1">
            <summary>
            Finds the aspect matching the class type of the specified template
            argument. If there are multiple aspects of the same class type on
            the content, the first one is returned.
            </summary>
            <returns>
                An aspect of the specified class type, or null if no such
                aspect could be found.
            </returns>
        </member>
        <member name="M:Emergent.Toolbench.ContentService.AbstractContent.FindAspect(System.Type)">
            <summary>
            Finds the aspect matching the class type of the specified template
            argument. If there are multiple aspects of the same class type on
            the content, the first one is returned.
            </summary>
            <param name="aspectType">The type of the aspect to extract.</param>
            <returns>
                An aspect of the specified class type, or null if no such
                aspect could be found.
            </returns>
        </member>
        <member name="M:Emergent.Toolbench.ContentService.AbstractContent.ContainsAspect(System.String)">
            <summary>
            Determines whether the content has an instance of an aspect with 
            the specified unique id.
            </summary>
            <param name="uniqueId">The unique id.</param>
            <returns><c>true</c> if the aspect exists on the content, <c>false</c> otherwise.
            </returns>
        </member>
        <member name="M:Emergent.Toolbench.ContentService.AbstractContent.ContainsAspect(System.Type)">
            <summary>
            Determines whether the content has an instance of an aspect with
            the specified type.
            </summary>
            <param name="type">The type of the aspect to look for.</param>
            <returns><c>true</c> if the aspect exists on the content, <c>false</c> otherwise.
            </returns>
        </member>
        <member name="M:Emergent.Toolbench.ContentService.AbstractContent.UpdateContent(System.Object)">
            <summary>
            Called when content is updated.
            </summary>
            <param name="genericData">The generic data representing the
                updated content.
            </param>
        </member>
        <member name="M:Emergent.Toolbench.ContentService.AbstractContent.UpdateContent(System.Object,System.String)">
            <summary>
            Called when content is updated.
            </summary>
            <param name="genericData">The generic data representing the
                updated content.
            </param>
            <param name="viewId">Identifier of the view that updated the
                content. This is to allow views to make sure they don't get
                update messages from themselves.
            </param>
            <remarks>The default implementation tells each aspect that content
                has been updated and then spawns the ContentChanged event. If
                a derived class overrides this method, it must invoke the base
                implementation.
            </remarks>
        </member>
        <member name="M:Emergent.Toolbench.ContentService.AbstractContent.OnCreated">
            <summary>
            Called the first time the content is constructed.  Content being recreated from a 
            saved file, such as a document will not have this method called when the document is
            opened.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.ContentService.AbstractContent.Close">
            <summary>
            Called to close the content.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.ContentService.AbstractContent.OnClosing">
            <summary>
            Called when the content is closing.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.ContentService.AbstractContent.OnClosed">
            <summary>
            Called when the content has finished closing.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.ContentService.AbstractContent.Clear">
            <summary>
            Resets the content to a default state. The default implementation
            does nothing.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.ContentService.AbstractContent.AddContentAspect(Emergent.Toolbench.ContentService.IContentAspect)">
            <summary>
            Adds the content aspect to the content's list of aspects.
            </summary>
            <param name="aspect">The aspect.</param>
        </member>
        <member name="M:Emergent.Toolbench.ContentService.AbstractContent.OnAspectAdded(Emergent.Toolbench.ContentService.IContentAspect)">
            <summary>
            Called when an aspect is added to the abstract content.
            </summary>
            <param name="aspect">The aspect that was added.</param>
        </member>
        <member name="M:Emergent.Toolbench.ContentService.AbstractContent.RemoveContentAspect(Emergent.Toolbench.ContentService.IContentAspect)">
            <summary>
            Removes the content aspect from the list of aspects on the content.
            </summary>
            <param name="aspect">The aspect to remove.</param>
        </member>
        <member name="M:Emergent.Toolbench.ContentService.AbstractContent.OnAspectRemoved(Emergent.Toolbench.ContentService.IContentAspect)">
            <summary>
            Called when an aspect is removed from the content.
            </summary>
            <param name="aspect">The aspect that was removed.</param>
        </member>
        <member name="E:Emergent.Toolbench.ContentService.AbstractContent.DirtyStatusChanged">
            <summary>
            
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.ContentService.AbstractContent.ContentName">
            <summary>
            Gets the display name of the content.  This should just be some human readable way of
            referring to the content, and should not be used as a unique identifier.
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.ContentService.AbstractContent.ContentInstanceId">
            <summary>
            Gets the id assigned to the content when it was created.  This is
            id is guaranteed to be the same while the instance of this content is
            active.
            </summary>
            <remarks>Do not use this id when persisting information about a piece of
            content.</remarks>
        </member>
        <member name="P:Emergent.Toolbench.ContentService.AbstractContent.FactoryDescriptor">
            <summary>
            Gets the descriptor of the content factory that was used to create
            the content.
            </summary>
            <value>The content factory descriptor.</value>
        </member>
        <member name="P:Emergent.Toolbench.ContentService.AbstractContent.ContentDescriptor">
            <summary>
            Gets the content descriptor for the content. The content descriptor
            provides a means of categorizing the content.
            </summary>
            <value>The content descriptor.</value>
        </member>
        <member name="P:Emergent.Toolbench.ContentService.AbstractContent.ContentAspects">
            <summary>
            Gets the content aspects contained by the content instance. The
            content aspects represent the actual data provided by the
            particular content object.
            </summary>
            <value>The content aspects.</value>
        </member>
        <member name="P:Emergent.Toolbench.ContentService.AbstractContent.IsClosing">
            <summary>
            Get a value indicating if the content is closing.
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.ContentService.AbstractContent.IsClosed">
            <summary>
            Get a value indicating if the content has closed.
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.ContentService.AbstractContent.Dirty">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Emergent.Toolbench.ContentService.IDocument"/> is
            dirty. If the dirty flag changed, the DirtyStatusChanged event is
            spawned.
            </summary>
            <value><c>true</c> if dirty; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Emergent.Toolbench.ContentService.AbstractContent.IsIgnoringDirtyChanges">
            <summary>
            Gets or sets a value indicating whether changes to the <see cref="P:Emergent.Toolbench.ContentService.AbstractContent.Dirty"/>
            flag should be honored. If true, changes to the dirty flag are ignored.
            </summary>
            <remarks>
            This property is useful during file loading; aspects may inadvertently set
            the dirty flag on documents when attaching themselves to content.
            </remarks>
        </member>
        <member name="T:Emergent.Toolbench.ContentService.ContentRejectedException">
            <summary>
            The exception that is thrown when disk content should not be opened by ContentService.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.ContentService.ContentRejectedException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the ContentRejectedException class with a specified error
            message.
            </summary>
            <param name="message">A string that describes the error. The content of message is 
            intended to be understood by humans. The caller of this constructor is required to 
            ensure that this string has been localized for the current system culture.</param>
        </member>
        <member name="T:Emergent.Toolbench.ContentService.IAspectDescriptor">
            <summary>
            Defines an interface for describing a content aspect. This allows 
            aspects to be created through delayed loading of plug-ins.
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.ContentService.IAspectDescriptor.ConfigurationData">
            <summary>
            Gets the configuration data for the aspect. The configuration data
            is set while parsing the plug-in manifest that defines the aspect.
            </summary>
            <value>The configuration data.</value>
        </member>
        <member name="P:Emergent.Toolbench.ContentService.IAspectDescriptor.SupportedContent">
            <summary>
            Gets an array of strings containing the unique ids of the content
            types supported by this aspect.
            </summary>
            <value>A collection of content type unique ids.</value>
        </member>
        <member name="P:Emergent.Toolbench.ContentService.IAspectDescriptor.UniqueId">
            <summary>
            Gets the unique id for the content aspect. All content aspects must
            have unique identifiers so they may be referenced by the various 
            components in the system.
            </summary>
            <value>The unique id.</value>
        </member>
        <member name="P:Emergent.Toolbench.ContentService.IAspectDescriptor.Class">
            <summary>
            Gets the class associated with this content aspect.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.ContentService.AspectDescriptor.#ctor(Emergent.Toolbench.IElementData)">
            <summary>
            Initializes a new instance of the <see cref="T:Emergent.Toolbench.ContentService.AspectDescriptor"/> 
            class and extracts all relevant data from the manifest XML element.
            </summary>
            <param name="configData">The XML configuration data.</param>
        </member>
        <member name="P:Emergent.Toolbench.ContentService.AspectDescriptor.ConfigurationData">
            <summary>
            Gets the configuration data for the aspect. The configuration data
            is set while parsing the plug-in manifest that defines the aspect.
            </summary>
            <value>The configuration data.</value>
        </member>
        <member name="P:Emergent.Toolbench.ContentService.AspectDescriptor.SupportedContent">
            <summary>
            Gets an array of strings containing the unique ids of the content
            types supported by this aspect.
            </summary>
            <value>A collection of content type unique ids.</value>
        </member>
        <member name="P:Emergent.Toolbench.ContentService.AspectDescriptor.UniqueId">
            <summary>
            Gets the unique id for the content aspect. All content aspects must
            have unique identifiers so they may be referenced by the various
            components in the system.
            </summary>
            <value>The unique id.</value>
        </member>
        <member name="P:Emergent.Toolbench.ContentService.AspectDescriptor.Class">
            <summary>
            Gets the class associated with this content aspect.
            </summary>
        </member>
        <member name="T:Emergent.Toolbench.ContentService.ContentCreationSettings">
            <summary>
            Simple class that contains custom data depending on the content factory
            and or content type being created. By default, it supports a generic 
            mapping of key value pairs.
            </summary>
        </member>
        <member name="T:Emergent.Toolbench.ContentService.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.ContentService.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.ContentService.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.ContentService.Properties.Resources.CanNotSaveReadOnlyDocument">
            <summary>
              Looks up a localized string similar to The document {0} is read-only and can not be saved..
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.ContentService.Properties.Resources.DocumentFactoryTypeInvalid">
            <summary>
              Looks up a localized string similar to Document factory does not implement the IDocumentContentFactory interface for the document {0}..
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.ContentService.Properties.Resources.UnableToConnectAspect">
            <summary>
              Looks up a localized string similar to Unable to connect content aspect &apos;{0}&apos; to &apos;{1}&apos;..
            </summary>
        </member>
        <member name="T:Emergent.Toolbench.ContentService.ContentService">
            <summary>
            Implements the content factory and service interfaces. Note, this is 
            an internal class only.
            </summary>
        </member>
        <member name="F:Emergent.Toolbench.ContentService.ContentService.m_aspects">
            <summary>
            Aspect descriptors
            </summary>
        </member>
        <member name="F:Emergent.Toolbench.ContentService.ContentService.m_contentWizards">
            <summary>
            Holds the list of all content wizards that will be created for a given content type
            when an instance of that content type is created, not opened.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.ContentService.ContentService.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Emergent.Toolbench.ContentService.ContentService"/> 
            class.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.ContentService.ContentService.Initialize">
            <summary>
            Allows a service to perform initialization code.
            </summary>
            <exception cref="T:Emergent.Toolbench.PlatformException">Thrown is a catastrophic error
            occurs during initialization.
            </exception>
        </member>
        <member name="M:Emergent.Toolbench.ContentService.ContentService.Dispose">
            <summary>
            Disposes the content service, closing all live content.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.ContentService.ContentService.CreateContent(Emergent.Toolbench.ContentService.IContentFactoryDescriptor,Emergent.Toolbench.ContentService.ContentCreationSettings)">
            <summary>
            Creates a new content object instance. This is done by loading the 
            plug-in containing the specified content factory and instructing
            the factory to create the new content.
            </summary>
            <param name="factoryDesc">The descriptor containing the definition
                of the content factory to use for the creation of the new 
                content.
            </param>
            <param name="createArguments">Contains the arguments that may be 
                used by the factory when creating the new content.
            </param>
            <returns>A new content instance.</returns>
            <exception cref="T:Emergent.Toolbench.PlatformException">Thrown if an error occurs 
                creating the factory or the associated content instance.
            </exception>
        </member>
        <member name="M:Emergent.Toolbench.ContentService.ContentService.SaveDocumentContent(Emergent.Toolbench.ContentService.AbstractDocument)">
            <summary>
            This method is specialized for document sub-classed content. It 
            looks up the appropriate content factory and instructs the factory
            to save the specified content.
            </summary>
            <param name="document">The document to save.</param>
        </member>
        <member name="M:Emergent.Toolbench.ContentService.ContentService.OpenDocumentContent(System.Uri,Emergent.Toolbench.ContentService.ContentContext)">
            <summary>
            This method is specialized for document sub-classed content. It 
            looks up the appropriate content factory and instructs the factory
            to create and open the specified content.
            </summary>
            <remarks>Warning: Calling this will increment the document ref 
            count.  Be sure you check if the document is open before calling 
            this method, or you will need to close the content as many times 
            as it is opened.
            
            Plugins that need to interrupt the document loading process may
            throw <seealso cref="T:Emergent.Toolbench.ContentService.ContentRejectedException"/>. This is 
            mainly of interest to the Game Solution plugins, but may be
            useful to others.
            </remarks>
            <param name="resourcePath">Location of the content to open.</param>
            <param name="context">Intended sharing level of the content.</param>
            <returns>A new document instance containing the data at the
                specified resource path.
            </returns>
        </member>
        <member name="M:Emergent.Toolbench.ContentService.ContentService.OpenDocumentContent(System.Uri,Emergent.Toolbench.ContentService.ContentContext,Emergent.Toolbench.ContentService.ContentInteractivity)">
            <summary>
            This method is specialized for document sub-classed content. It 
            looks up the appropriate content factory and instructs the factory
            to create and open the specified content.
            </summary>
            <remarks>Warning: Calling this will increment the document ref 
            count.  Be sure you check if the document is open before calling 
            this method, or you will need to close the content as many times 
            as it is opened.
            
            Plugins that need to interrupt the document loading process may
            throw <seealso cref="T:Emergent.Toolbench.ContentService.ContentRejectedException"/>. This is 
            mainly of interest to the Game Solution plugins, but may be
            useful to others.
            </remarks>
            <param name="resourcePath">Location of the content to open.</param>
            <param name="context">Intended sharing level of the content.</param>
            <param name="interactionLevel">Desired user interaction level.</param>
            <returns>A new document instance containing the data at the
                specified resource path.
            </returns>
        </member>
        <member name="M:Emergent.Toolbench.ContentService.ContentService.CheckForFileMigration(Emergent.Toolbench.ContentService.IContentDescriptor,System.Uri)">
            <summary>
            Checks to see if the files need to be migrated to a new format and performs the update
            if required.
            </summary>
            <param name="contentDescriptor">The content descriptor.</param>
            <param name="resourcePath">The resource to check and upgrade.</param>
        </member>
        <member name="M:Emergent.Toolbench.ContentService.ContentService.SaveDocumentContentAs(Emergent.Toolbench.ContentService.AbstractDocument,System.Uri)">
            <summary>
            This method is specialized for document sub-classed content. It 
            looks up the appropriate content factory and instructs the factory
            to save the specified content under a new path.
            </summary>
            <param name="doc">The document to save.</param>
            <param name="newResourcePath">Location with which to save the 
                document content.
            </param>
        </member>
        <member name="M:Emergent.Toolbench.ContentService.ContentService.CloseContent(Emergent.Toolbench.ContentService.AbstractContent,Emergent.Toolbench.ContentService.ContentContext)">
            <summary>
            Closes the specified content object and invokes its OnClose method.
            </summary>
            <param name="toClose">To close.</param>
        </member>
        <member name="M:Emergent.Toolbench.ContentService.ContentService.DeleteContent(Emergent.Toolbench.ContentService.AbstractContent,Emergent.Toolbench.ContentService.ContentContext)">
            <summary>
            Delete the specified content object and invokes its OnDelete method.
            </summary>
            <param name="toDelete">To delete.</param>
        </member>
        <member name="M:Emergent.Toolbench.ContentService.ContentService.RegisterContent(Emergent.Toolbench.ContentService.AbstractContent,Emergent.Toolbench.ContentService.ContentContext)">
            <summary>
            Registers the content from the content service.  This will increment the content
            based on the context provided, but will not issue content open or opening events, it
            just turns on tracking for a piece of content.
            </summary>
            <param name="content">The content to register.</param>
            <param name="context">The context to register it in.</param>
        </member>
        <member name="M:Emergent.Toolbench.ContentService.ContentService.UnregisterContent(Emergent.Toolbench.ContentService.AbstractContent,Emergent.Toolbench.ContentService.ContentContext)">
            <summary>
            Unregisters the content from the content service.  This will decrement the content 
            based on the context provided, but will not issue any content close or closing events.
            It just turns off the tracking for a piece of content, removing it from internally
            tracking lists.
            </summary>
            <param name="content">The content to unregister.</param>
            <param name="context">The context to unregister it in.</param>
        </member>
        <member name="M:Emergent.Toolbench.ContentService.ContentService.IsContentOpen(System.Uri,Emergent.Toolbench.ContentService.AbstractContent@)">
            <summary>
            Determines whether the content referenced by the specified uri is opened.
            </summary>
            <param name="resourceLocation">The resource location.</param>
            <returns>The opened content or null if no such content exists.</returns>
        </member>
        <member name="M:Emergent.Toolbench.ContentService.ContentService.IsDocumentOpen(System.Uri,Emergent.Toolbench.ContentService.AbstractDocument@)">
            <summary>
            Determines whether the content referenced by the specified uri is
            opened.
            </summary>
            <param name="resourceLocation">The resource location.</param>
            <param name="document">The opened content or null if no such content exists.</param>
            <returns><c>true</c> if the content was found; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Emergent.Toolbench.ContentService.ContentService.IsDocumentOpenGlobally(System.Uri,Emergent.Toolbench.ContentService.AbstractDocument@)">
            <summary>
            Determines whether the content referenced by the specified uri is
            opened globally or not.
            </summary>
            <param name="resourceLocation">The resource location.</param>
            <param name="document">The opened content or null if no such content exists.</param>
            <returns><c>true</c> if the content was found; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Emergent.Toolbench.ContentService.ContentService.FindContentByCategory(System.String)">
            <summary>
            Finds all the content descriptors that are in the specified
            content category and only that category.
            </summary>
            <param name="fullCategoryName">Full name of the category where the
            full name is the dot delimited hierarchical name.</param>
            <returns>
            A collection of content descriptors mapping to the
            specified category.
            </returns>
        </member>
        <member name="M:Emergent.Toolbench.ContentService.ContentService.FindAllContent(System.String)">
            <summary>
            Finds all content in the specified category as well as any content
            types in child categories.
            </summary>
            <param name="categoryName">Name of root category to search from.
            </param>
            <returns>An array of content descriptors or an empty array if no 
                content exists for the specified category.
            </returns>
        </member>
        <member name="M:Emergent.Toolbench.ContentService.ContentService.FindContentCategory(System.String)">
            <summary>
            Finds the content category with the specified dot delimited name.
            </summary>
            <param name="fullCategoryName">Full name of the category.</param>
            <returns>A valid category or null if a category with the specified
                name was not found.
            </returns>
        </member>
        <member name="M:Emergent.Toolbench.ContentService.ContentService.FindAspectsForContent(System.String)">
            <summary>
            Finds all the aspects that support the specified content.
            </summary>
            <param name="contentId">The content id.</param>
            <returns>
            A collection of aspect descriptors or an empty collection
            if the specified content does not have any aspects that support
            it.
            </returns>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">Thrown if the specified
            content id does not exist.
            </exception>
        </member>
        <member name="M:Emergent.Toolbench.ContentService.ContentService.FindPrimaryViewsForContentAspect(System.String,System.String)">
            <summary>
            Finds the views that support the specified content and aspect
            combination.
            </summary>
            <param name="contentId">The content unique id.</param>
            <param name="aspectId">The aspect unique id or null if the 
                specific content does not have any aspects.
            </param>
            <returns>
            A read-only collection of strings that contain unique
            id's for the views supported the content/aspect combination. If
            no supporting views are found, an empty collection is returned.
            </returns>
        </member>
        <member name="M:Emergent.Toolbench.ContentService.ContentService.HasPrimaryView(System.String)">
            <summary>
            Checks if there is a primary view for the content id.
            </summary>
            <param name="contentId">The content id to check.</param>
            <returns><c>true</c> if the content matching the id has a mapped
            primary view; otherise, <c>false</c>.</returns>
        </member>
        <member name="M:Emergent.Toolbench.ContentService.ContentService.IsPrimaryView(System.String,System.String)">
            <summary>
            Checks if the provided view id is the primary view for the content.
            </summary>
            <param name="contentId">The content id to look at.</param>
            <param name="viewId">The view id to check.</param>
            <returns><c>true</c> if the view is the primary view for the 
            content; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Emergent.Toolbench.ContentService.ContentService.IsPrimaryView(System.String,System.String,System.String)">
            <summary>
            Checks if the provided view id is the primary view for the content.
            </summary>
            <param name="contentId">The content id to look at.</param>
            <param name="aspectId">The content aspect id.</param>
            <param name="viewId">The view id to check.</param>
            <returns><c>true</c> if the view is the primary view for the 
            content; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Emergent.Toolbench.ContentService.ContentService.IsSupportedFile(System.String,System.Boolean)">
            <summary>
            Gets a value indicating if the file is supported by a content factory registered with 
            Toolbench.
            </summary>
            <param name="fileName">The filename.</param>
            <param name="openDirectly">A value indicating if the file should support being opened 
            directly from explorer.</param>
            <returns><c>true</c> if the file is supported; otherwise, 
            <c>false</c>.</returns>
        </member>
        <member name="M:Emergent.Toolbench.ContentService.ContentService.IsSupportedFileExtension(System.String,System.Boolean)">
            <summary>
            Gets a value indicating if the file extension is supported by a 
            content factory registered with Toolbench.
            </summary>
            <param name="fileName">The file extension.</param>
            <param name="openDirectly">A value indicating if the file should support being opened 
            directly from explorer.</param>
            <returns><c>true</c> if the file extension is supported; otherwise, 
            <c>false</c>.</returns>
        </member>
        <member name="M:Emergent.Toolbench.ContentService.ContentService.FindContentForFile(System.String,System.Boolean)">
            <summary>
            Finds a collection of content descriptors for a given file 
            name.  Because not all content is based on a document the only
            results possible will be content types that have been mapped to
            document factories.
            </summary>
            <param name="fileName">The file.</param>
            <returns>A collection of content descriptors mapping to the 
            provided file extension.</returns>
        </member>
        <member name="M:Emergent.Toolbench.ContentService.ContentService.FindContentForFileExtension(System.String,System.Boolean)">
            <summary>
            Finds a collection of content descriptors for a given file 
            extension.  Because not all content is based on a document the only
            results possible will be content types that have been mapped to
            document factories.
            </summary>
            <param name="fileExt">The file extension.</param>
            <returns>A collection of content descriptors mapping to the 
            provided file extension.</returns>
        </member>
        <member name="M:Emergent.Toolbench.ContentService.ContentService.FindContentFactoriesForFile(System.String,System.Boolean)">
            <summary>
            Finds all the factories that support the file extension of the 
            provided file.
            </summary>
            <param name="fileName">The file.</param>
            <returns>A collection of content factory descriptors mapping to the 
            provided file.</returns>
        </member>
        <member name="M:Emergent.Toolbench.ContentService.ContentService.FindContentFactoriesForFileExtension(System.String,System.Boolean)">
            <summary>
            Finds all the factories that support the provided file extension.
            </summary>
            <param name="fileName">The file extension.</param>
            <returns>A collection of content factory descriptors mapping to the 
            provided file extension.</returns>
        </member>
        <member name="M:Emergent.Toolbench.ContentService.ContentService.FindContentFactory(System.String)">
            <summary>
            Finds the content factory with a unique id matching the specified 
            unique id.
            </summary>
            <param name="uniqueId">The unique id.</param>
            <returns>A valid content factory or null if a factory with the 
                specified unique id could not be found.
            </returns>
        </member>
        <member name="M:Emergent.Toolbench.ContentService.ContentService.FindFactoriesForContent(Emergent.Toolbench.ContentService.IContentDescriptor,System.Boolean)">
            <summary>
            Gets a list of content factory descriptors that support the
            specified content.
            </summary>
            <param name="contentDescriptor">The descriptor for the content.
            </param>
            <returns>A list of factory descriptors.</returns>
        </member>
        <member name="M:Emergent.Toolbench.ContentService.ContentService.FindAllContentFactories">
            <summary>
            Gets a collection of all the content factories currently registered
            with the content service.
            </summary>
            <returns>A read-only collection of factory descriptors.</returns>
        </member>
        <member name="M:Emergent.Toolbench.ContentService.ContentService.FindDocumentByResourcePath(System.Uri)">
            <summary>
            Finds the document that wraps the file located at the specified 
            resource path.
            </summary>
            <param name="resourcePath">The resource path.</param>
            <returns>The document instance or null if a document with the 
                specified resource path could not be found.
            </returns>
        </member>
        <member name="M:Emergent.Toolbench.ContentService.ContentService.AddCategory(System.String,System.String)">
            <summary>
            Adds a new category to the content factory. 
            </summary>
            <param name="fullName">The full name where the full name contains
                a hierarchical dot-delimited name corresponding to the 
                category hierarchy to create/insert into. Any non-existing 
                category hierarchies are automatically created if they do not
                already exist.
            </param>
            <param name="description">The description.</param>
            <exception cref="T:Emergent.Toolbench.PlatformException">Thrown if a duplicate leaf 
                category is added.
            </exception>
        </member>
        <member name="M:Emergent.Toolbench.ContentService.ContentService.InsertCategoryNode(Emergent.Toolbench.ContentService.IContentCategory,System.String,System.String[],System.Int32)">
            <summary>
            Recursively inserts the category node in the category hierarchy.
            </summary>
            <param name="root">The root node of the current recursive tree
                traversal.</param>
            <param name="desc">The description to put on the leaf category 
                node.
            </param>
            <param name="categories">Array of the categories split on the dot
                delimiter.
            </param>
            <param name="index">The index of the current category name.</param>
        </member>
        <member name="M:Emergent.Toolbench.ContentService.ContentService.AddNewAspect(Emergent.Toolbench.ContentService.AspectDescriptor)">
            <summary>
            Adds the new aspect by inserting the aspect instance into one or
            more lists determined by the content types the aspect supports.
            </summary>
            <param name="aspect">The aspect.</param>
        </member>
        <member name="M:Emergent.Toolbench.ContentService.ContentService.FindContentDescriptor(System.String)">
            <summary>
            Finds the content descriptor that matches the specified unique id.
            </summary>
            <param name="contentId">The content id.</param>
            <returns>A content descriptor instance or null if one could not be 
                found.
            </returns>
        </member>
        <member name="M:Emergent.Toolbench.ContentService.ContentService.FindFactoryEntry(Emergent.Toolbench.ContentService.IContentFactoryDescriptor)">
            <summary>
            Finds the factory entry containing the specified content factory
            descriptor. The search is done by comparing the id of the specified
            factory descriptor and the file extension of the descriptor if not
            null.
            </summary>
            <param name="factoryDesc">The factory descriptor.</param>
            <returns>A factory entry object or null if one could not be found.
            </returns>
        </member>
        <member name="M:Emergent.Toolbench.ContentService.ContentService.ConnectContentAspects(Emergent.Toolbench.ContentService.AbstractContent)">
            <summary>
            Locates the content aspects for the specified content and attaches
            them.
            </summary>
            <param name="newContent">The content with which to attach aspects.
            </param>
        </member>
        <member name="M:Emergent.Toolbench.ContentService.ContentService.TryConnectAspect(Emergent.Toolbench.ContentService.AbstractContent,System.String)">
            <summary>
            Internal helper method that is used by the content system to 
            load and connect and aspect if it is needed before the system 
            actually connects it. This can occur if one aspect depends on 
            another in its ConnectContent method.
            </summary>
            <param name="content">The content to try and connect the aspect to.
            </param>
            <param name="uniqueId">Unique id of the aspect.</param>
            <returns>The newly created and connected aspect or null if the 
                operation could not be performed.
            </returns>
        </member>
        <member name="M:Emergent.Toolbench.ContentService.ContentService.TryConnectAspect(Emergent.Toolbench.ContentService.AbstractContent,System.Type)">
            <summary>
            Internal helper method that is used by the content system to 
            load and connect and aspect if it is needed before the system 
            actually connects it. This can occur if one aspect depends on 
            another in its ConnectContent method.
            </summary>
            <param name="content">The content to try and connect the aspect to.
            </param>
            <param name="aspectType">Class type of the aspect to connect.
            </param>
            <returns>The newly created and connected aspect or null if the 
                operation could not be performed.
            </returns>
        </member>
        <member name="M:Emergent.Toolbench.ContentService.ContentService.IsFileContentTypeUniqueAndOpen(System.Uri,Emergent.Toolbench.ContentService.AbstractContent@)">
            <summary>
            Checks if the file based content type is unique and open.
            </summary>
            <param name="resourcePath">The resource path to the content type.
            </param>
            <param name="uniqueContent">The unique open content if it exists.
            </param>
            <returns><c>true</c> if the content is unique and open; otherwise, 
            <c>false</c>.</returns>
        </member>
        <member name="M:Emergent.Toolbench.ContentService.ContentService.IsContentTypeUniqueAndOpen(System.String,System.Uri,Emergent.Toolbench.ContentService.AbstractContent@)">
            <summary>
            Checks if the content type is unique and open.
            </summary>
            <param name="contentId">The content id.</param>
            <param name="uniqueContent">The unique open content if it exists.
            </param>
            <returns><c>true</c> if the content is unique and open; otherwise, 
            <c>false</c>.</returns>
        </member>
        <member name="M:Emergent.Toolbench.ContentService.ContentService.IsContentTypeOpen(System.String)">
            <summary>
            Checks if there is an instance of content matching the provided 
            content type id.
            </summary>
            <param name="contentId">The content type to check.</param>
            <returns><c>true</c> if the content is open; otherwise, 
            <c>false</c>.</returns>
        </member>
        <member name="M:Emergent.Toolbench.ContentService.ContentService.FindContentWizards(System.String)">
            <summary>
            Finds all the content wizard descriptors for a particular content type id.
            </summary>
            <param name="contentTypeId">The content type id.</param>
            <returns>A collection of content wizards descriptors.</returns>
        </member>
        <member name="M:Emergent.Toolbench.ContentService.ContentService.OnFileChanged(Emergent.Toolbench.FileSystemMonitor.PathChangedEventArgs)">
            <summary>
            Called if a document opened by the content service is changed.
            </summary>
            <param name="e">The change event arguments.</param>
        </member>
        <member name="P:Emergent.Toolbench.ContentService.ContentService.ActiveContent">
            <summary>
            Gets or sets the active content.  The active content is generally
            speaking the content that has focus.  If no content is open then
            the value will be <value>null</value>.  If the ActiveContent is
            changed, the ActiveContentChanging event will be fired before the
            change.  Following the change the ActiveContentChanged event will
            be fired.
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.ContentService.ContentService.ActiveDocument">
            <summary>
            Gets the ActiveContent in the form of an 
            <see cref="T:Emergent.Toolbench.ContentService.AbstractDocument"/>, if the underlying content is not 
            an <see cref="T:Emergent.Toolbench.ContentService.AbstractDocument"/> then <value>null</value> is 
            returned.
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.ContentService.ContentService.IsSaving">
            <summary>
            Gets a sets a value indicating if saving is occurring.
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.ContentService.ContentService.XmlWriterSettings">
            <summary>
            Gets the xml writer settings for the content service that should be shared by all xml
            based content files, because these settings are used by the migration service to save
            files that it migrates.
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.ContentService.ContentService.Name">
            <summary>
            Gets the name of this service. Services must have unique names.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:Emergent.Toolbench.ContentService.ContentService.ContentDescriptors">
            <summary>
            Gets all the content descriptors defined in the plug-in registry.
            </summary>
            <value>
            A read-only collection of content descriptors. If none are
            found, the collection will be empty.
            </value>
        </member>
        <member name="P:Emergent.Toolbench.ContentService.ContentService.ContentCategories">
            <summary>
            Gets the top level categories for content. Categories are defined
            in a plug-in's manifest via the
            Emergent.Toolbench.ContentService.ContentCategory extension point.
            Categories are used to organize different types of content.
            </summary>
            <value>A read-only collection of top level content categories.
            </value>
        </member>
        <member name="P:Emergent.Toolbench.ContentService.ContentService.LiveContent">
            <summary>
            Gets a collection of content that is currently open or has been 
            created. Useful for classes that need to perform an operation on 
            all existing content. (e.g. SaveAll).
            </summary>
            <value>Content collection.</value>
        </member>
        <member name="T:Emergent.Toolbench.ContentService.ContentService.ContentFactoryEntry">
            <summary>
            Simple helper class for storing a content factory and its
            meta-data.
            </summary>
        </member>
        <member name="T:Emergent.Toolbench.ContentService.ContentFactoryDescriptor">
            <summary>
            Internal implementation of the content factory descriptor.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.ContentService.ContentFactoryDescriptor.#ctor(Emergent.Toolbench.IElementData)">
            <summary>
            Extracts the necessary data from the XML element configuration 
            node.
            </summary>
            <param name="configData">The config data.</param>
        </member>
        <member name="M:Emergent.Toolbench.ContentService.ContentFactoryDescriptor.SupportsFileExtension(System.String)">
            <summary>
            Determines whether the specified file extension is supported by 
            the content factory described by the descriptor.
            </summary>
            <param name="fileExtension">The file extension. Note, the dot must
                be included. (e.g. .bmp instead of bmp).
            </param>
            <returns>True if supported, false otherwise.</returns>
        </member>
        <member name="M:Emergent.Toolbench.ContentService.ContentFactoryDescriptor.GetFilterPattern">
            <summary>
            Builds a filter pattern from the factory's list of supported 
            extensions. A filter pattern is a semi-colon separated list of glob
            patterns. (e.g. *.bmp;*.jpg;*.png)
            </summary>
            <returns>A string containing the filter pattern.</returns>
        </member>
        <member name="P:Emergent.Toolbench.ContentService.ContentFactoryDescriptor.UniqueId">
            <summary>
            Gets the unique identifier of the factory.
            </summary>
            <value>The unique id.</value>
        </member>
        <member name="P:Emergent.Toolbench.ContentService.ContentFactoryDescriptor.Name">
            <summary>
            Gets a simple name for the factory.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:Emergent.Toolbench.ContentService.ContentFactoryDescriptor.Description">
            <summary>
            Gets the description of what the factory provides.
            </summary>
            <value>The description.</value>
        </member>
        <member name="P:Emergent.Toolbench.ContentService.ContentFactoryDescriptor.ContentId">
            <summary>
            Gets the content identifier that the factory is mapped to.
            </summary>
            <value>The content id.</value>
        </member>
        <member name="P:Emergent.Toolbench.ContentService.ContentFactoryDescriptor.Abstract">
            <summary>
            Gets a value indicating if this factory can be used to create 
            documents.
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.ContentService.ContentFactoryDescriptor.Icon">
            <summary>
            Gets the icon that represents the content factory. The icon is used
            to conjunction with other meta-data to present the factory to the
            user when one must be selected.
            </summary>
            <value>The icon.</value>
        </member>
        <member name="P:Emergent.Toolbench.ContentService.ContentFactoryDescriptor.SuggestDefaultFolder">
            <summary>
            Gets a value indicating if the content should suggest a default
            folder during creation.
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.ContentService.ContentFactoryDescriptor.HasFileExtensions">
            <summary>
            Gets a value indicating if the content has any assigned file 
            extensions.
            </summary>
            <value><c>true</c> if it has extensions, otherwise; <c>false</c>.
            </value>
        </member>
        <member name="P:Emergent.Toolbench.ContentService.ContentFactoryDescriptor.FileExtensions">
            <summary>
            Gets an array of file extensions supported by the content factory.
            </summary>
            <value>
            An array of file extensions.
            </value>
        </member>
        <member name="P:Emergent.Toolbench.ContentService.ContentFactoryDescriptor.ConfigurationData">
            <summary>
            Gets the XML configuration data defining the content factory.
            </summary>
            <value>The configuration data.</value>
        </member>
        <member name="T:Emergent.Toolbench.ContentService.AbstractDocument">
            <summary>
            This class defines the generic root class of document based content in 
            the Toolbench framework. 
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.ContentService.AbstractDocument.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Emergent.Toolbench.ContentService.AbstractDocument"/> 
            class. By default, the document's read-only and dirty flags are
            both set to false, and changes to the dirty flag are permitted.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.ContentService.AbstractDocument.UpdateContent(System.Object)">
            <summary>
            Called when content is updated.
            </summary>
            <param name="genericData">The generic data representing the
                updated content.
            </param>
            <remarks>The default implementation of this method invokes the 
                <see cref="T:Emergent.Toolbench.ContentService.AbstractContent"/> implementation and sets the 
                document's dirty flag to true.
            </remarks>
        </member>
        <member name="M:Emergent.Toolbench.ContentService.AbstractDocument.UpdateContent(System.Object,System.String)">
            <summary>
            Called when content is updated.
            </summary>
            <param name="genericData">The generic data representing the
            updated content.</param>
            <param name="viewId">Identifier of the view that updated the
            content. This is to allow views to make sure they don't get
            update messages from themselves.</param>
            <remarks>The default implementation of this method invokes the 
                <see cref="T:Emergent.Toolbench.ContentService.AbstractContent"/> implementation and sets the 
                document's dirty flag to true.
            </remarks>
        </member>
        <member name="M:Emergent.Toolbench.ContentService.AbstractDocument.ValidateVersion">
            <summary>
            Optional hook for derived documents to check a file version and
            perform any related tasks.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.ContentService.AbstractDocument.OnPropertyChanging(System.String,System.Object,System.Object)">
            <summary>
            When a property is changing we need to check to see if the property is a resource 
            location.
            </summary>
            <param name="e">Property changing event args</param>
        </member>
        <member name="M:Emergent.Toolbench.ContentService.AbstractDocument.OnDocumentLoaded">
            <summary>
            Fires the DocumentLoaded event.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.ContentService.AbstractDocument.OnDocumentSaved">
            <summary>
            Fires the document saved event.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.ContentService.AbstractDocument.OnDocumentSavedAs(System.Uri)">
            <summary>
            Fires the document saved event.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.ContentService.AbstractDocument.OnDocumentSaving">
            <summary>
            Fires the document saving event.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.ContentService.AbstractDocument.Reload">
            <summary>
            Reloads the document in place.
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.ContentService.AbstractDocument.ContentName">
            <summary>
            Gets the display name of the content.  This should just be some human readable way of
            referring to the content, and should not be used as a unique identifier.
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.ContentService.AbstractDocument.ContentState">
            <summary>
            Gets the content state.
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.ContentService.AbstractDocument.ReadOnly">
            <summary>
            Gets a value indicating whether the document is read-only. If the
            read-only status changes on the document the ReadOnlyStatusChanged
            event is spawned.
            </summary>
            <remarks>Note: This value is cached, and is not completely reliable.</remarks>
            <value><c>true</c> if [read only]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Emergent.Toolbench.ContentService.AbstractDocument.CanReload">
            <summary>
            Gets a value indicating whether this abstract document can be reloaded in place
            without having to close and open the document.
            This defaults to false but can be overridden in subclasses which do support
            reload functionality.
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.ContentService.AbstractDocument.CertifiedReadOnly">
            <summary>
            Gets a value indicating whether the document is read-only or not.  Each time this 
            property is called, the disk is checked to see if the document is truly read-only.  
            Use this in situations where the cached value is not good enough, like when saving.  
            Do not request this in a situation where it might be called a lot because this 
            property get is fairly heavy weight.
            </summary>
            <value><c>true</c> if [read only]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Emergent.Toolbench.ContentService.AbstractDocument.ResourceLocation">
            <summary>
            Gets or sets the location or path of the document where the resource
            location could be a file path, network path, etc. The 
            ResourceLocationChanged event is spawned if the resource location
            has changed.
            </summary>
            <value>The resource location.</value>
        </member>
        <member name="P:Emergent.Toolbench.ContentService.AbstractDocument.ResourceName">
            <summary>
            Gets the file name of the resource.
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.ContentService.AbstractDocument.IsSaveNeeded">
            <summary>
            Gets a value indicating if save is needed.
            </summary>
        </member>
    </members>
</doc>
