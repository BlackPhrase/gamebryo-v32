<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Emergent.Toolbench.UI.ContentDialogs</name>
    </assembly>
    <members>
        <member name="T:Emergent.Toolbench.UI.ContentDialogs.Plugin">
            <summary>
            ContentDialogs plug-in entry point. The plug-in initializes and adds 
            the MRUManager service to the platform. It also registers a handler 
            with the file watcher service to respond to changes in documents that
            are modified outside of the toolbench.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.UI.ContentDialogs.Plugin.Start">
            <summary>
            When the plug-in is loaded, the MRUManager service is added to the
            platform.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.UI.ContentDialogs.Plugin.Stop">
            <summary>
            No work to do on plug-in shutdown.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.UI.ContentDialogs.Plugin.OnFileSystemPathChanged(Emergent.Toolbench.FileSystemMonitor.PathChangedEventArgs)">
            <summary>
            Called when the file watcher service detects an external
            modification to an open document in the toolbench.
            </summary>        
        </member>
        <member name="M:Emergent.Toolbench.UI.ContentDialogs.Plugin.OnDragEnter(System.Object,System.Windows.Forms.DragEventArgs)">
            <summary>
            Called when a drag operation is about to begin on the workbench 
            window. This method will only allow files to be dragged from 
            elsewhere in windows and dropped on the workbench. If the file type
            is supported by a plug-in in the content service the file can be 
            dropped and the appropriate documents, views, etc. are created.
            </summary>        
        </member>
        <member name="M:Emergent.Toolbench.UI.ContentDialogs.Plugin.OnDragDrop(System.Object,System.Windows.Forms.DragEventArgs)">
            <summary>
            Grabs all the file names from the drop event and opens each one 
            in the workbench. Note, the data is correct since the DragEnter
            event handles validation.
            </summary>        
        </member>
        <member name="T:Emergent.Toolbench.UI.ContentDialogs.OpenContentAction">
            <summary>
            Action class that displays an Open File dialog allowing the user to 
            open files that map to an AbstractDocument content class registered in 
            the content factory.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.UI.ContentDialogs.OpenContentAction.Execute(Emergent.Toolbench.Actions.ExecutionContext,Emergent.Toolbench.Actions.ExecutionStyle)">
            <summary>
            Allow the user to choose a document to open.
            </summary>
            <param name="context">The execution context of the action.</param>
            <param name="style">The execution style of the action.</param>
        </member>
        <member name="M:Emergent.Toolbench.UI.ContentDialogs.OpenContentAction.ToXml">
            <summary>
            Converts the specified action's data into XML form.
            </summary>
            <returns>An XML node that describes the action.</returns>
        </member>
        <member name="M:Emergent.Toolbench.UI.ContentDialogs.OpenContentAction.FromXml(System.Xml.Linq.XElement)">
            <summary>
            Extracts the necessary action data from the specified XML data.
            </summary>
            <param name="node">Top level XML node containing the action's 
            data.</param>
        </member>
        <member name="P:Emergent.Toolbench.UI.ContentDialogs.OpenContentAction.IsSerializable">
            <summary>
            Gets a value indicating if the action is serializable.  Use this
            if your action can potentially become non-serializable based on
            input conditions.
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.UI.ContentDialogs.OpenContentAction.Description">
            <summary>
            Gets a description used to display information about the serializable
            action to the user.
            </summary>
            <value>The label.</value>
        </member>
        <member name="F:Emergent.Toolbench.UI.ContentDialogs.MissingFileDialog.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.UI.ContentDialogs.MissingFileDialog.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Emergent.Toolbench.UI.ContentDialogs.MissingFileDialog.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Emergent.Toolbench.UI.ContentDialogs.ExitHandlerAction">
            <summary>
            Invoked when the Toolbench exits. This class checks for any unsaved 
            document content and prompts the user accordingly.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.UI.ContentDialogs.ExitHandlerAction.Execute">
            <summary>
            Called by the platform just before it terminates.
            </summary>
            <returns>True if the shutdown process should continue, false if the workbench should
                continue running.
            </returns>
        </member>
        <member name="T:Emergent.Toolbench.UI.ContentDialogs.SaveContentAction">
            <summary>
            Called when the user wants to save a document.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.UI.ContentDialogs.SaveContentAction.Execute(Emergent.Toolbench.Actions.ExecutionContext,Emergent.Toolbench.Actions.ExecutionStyle)">
            <summary>
            Instructs the active document to save itself.
            </summary>       
            <param name="context">The execution context of the action.</param>
            <param name="style">The execution style of the action.</param>
        </member>
        <member name="T:Emergent.Toolbench.UI.ContentDialogs.SaveAllContentAction">
            <summary>
            Saves all the open and modified content.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.UI.ContentDialogs.SaveAllContentAction.Execute(Emergent.Toolbench.Actions.ExecutionContext,Emergent.Toolbench.Actions.ExecutionStyle)">
            <summary>
            Saves all modified content.
            </summary>        
            <param name="context">The execution context of the action.</param>
            <param name="style">The execution style of the action.</param>
        </member>
        <member name="T:Emergent.Toolbench.UI.ContentDialogs.SaveContentAsAction">
            <summary>
            Saves the current active document under a different name.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.UI.ContentDialogs.SaveContentAsAction.Execute(Emergent.Toolbench.Actions.ExecutionContext,Emergent.Toolbench.Actions.ExecutionStyle)">
            <summary>
            Saves the document under a new name.
            </summary>        
            <param name="context">The execution context of the action.</param>
            <param name="style">The execution style of the action.</param>
        </member>
        <member name="T:Emergent.Toolbench.UI.ContentDialogs.OpenContentWithAction">
            <summary>
            Action class that displays an Open File dialog allowing the user to 
            open files that map to an AbstractDocument content class registered in 
            the content factory.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.UI.ContentDialogs.OpenContentWithAction.Execute(Emergent.Toolbench.Actions.ExecutionContext,Emergent.Toolbench.Actions.ExecutionStyle)">
            <summary>
            Allow the user to choose a document to open.
            </summary>
            <param name="context">The execution context of the action.</param>
            <param name="style">The execution style of the action.</param>
        </member>
        <member name="M:Emergent.Toolbench.UI.ContentDialogs.OpenContentWithAction.ToXml">
            <summary>
            Converts the specified action's data into XML form.
            </summary>
            <returns>An XML node that describes the action.</returns>
        </member>
        <member name="M:Emergent.Toolbench.UI.ContentDialogs.OpenContentWithAction.FromXml(System.Xml.Linq.XElement)">
            <summary>
            Extracts the necessary action data from the specified XML data.
            </summary>
            <param name="node">Top level XML node containing the action's 
            data.</param>
        </member>
        <member name="P:Emergent.Toolbench.UI.ContentDialogs.OpenContentWithAction.IsSerializable">
            <summary>
            Gets a value indicating if the action is serializable.  Use this
            if your action can potentially become non-serializable based on
            input conditions.
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.UI.ContentDialogs.OpenContentWithAction.Description">
            <summary>
            Gets a description used to display information about the serializable
            action to the user.
            </summary>
            <value>The label.</value>
        </member>
        <member name="T:Emergent.Toolbench.UI.ContentDialogs.NewContentDialog">
            <summary>
            Dialog box displayed when the user wishes to create a new document. 
            The dialog displays the information from the content service including
            things like content categories, all registered document types, etc. and
            uses the content factory to generate a new document and instantiate the
            appropriate view to edit the content.
            </summary>
        </member>
        <member name="F:Emergent.Toolbench.UI.ContentDialogs.NewContentDialog.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.UI.ContentDialogs.NewContentDialog.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Emergent.Toolbench.UI.ContentDialogs.NewContentDialog.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.UI.ContentDialogs.NewContentDialog.#ctor(System.Collections.Generic.List{System.String})">
            <summary>
            Initializes a new instance of the <see cref="T:Emergent.Toolbench.UI.ContentDialogs.NewContentDialog"/> 
            class.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.UI.ContentDialogs.NewContentDialog.OnChooseFolderButtonClick(System.Object,System.EventArgs)">
            <summary>
            Called when the user clicks the Browse button to choose a path for
            the new content.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance 
                containing the event data.
            </param>
        </member>
        <member name="M:Emergent.Toolbench.UI.ContentDialogs.NewContentDialog.OnFolderTextChanged(System.Object,System.EventArgs)">
            <summary>
            Called when the text for the current save folder path changes.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance 
            containing the event data.
            </param>
        </member>
        <member name="M:Emergent.Toolbench.UI.ContentDialogs.NewContentDialog.OnNameTextChanged(System.Object,System.EventArgs)">
            <summary>
            Called when the user changes the text in the name field. This
            method updates the content name to reflect the change.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance 
            containing the event data.
            </param>
        </member>
        <member name="M:Emergent.Toolbench.UI.ContentDialogs.NewContentDialog.OnExtensionListSelectedIndexChanged(System.Object,System.EventArgs)">
            <summary>
            Called when the selected index of the drop down list of extensions
            changes.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance 
            containing the event data.
            </param>
        </member>
        <member name="M:Emergent.Toolbench.UI.ContentDialogs.NewContentDialog.OnOKButtonClicked(System.Object,System.EventArgs)">
            <summary>
            Called when the OK button is clicked. The method will make sure the
            new file that was created does not already exist and prompt the
            user for the appropriate course of action.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance 
            containing the event data.
            </param>
        </member>
        <member name="M:Emergent.Toolbench.UI.ContentDialogs.NewContentDialog.PopulateContentTree">
            <summary>
            Populates the content tree using the information stored in the 
            content factory service.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.UI.ContentDialogs.NewContentDialog.AddContentSubtree(Emergent.Toolbench.ContentService.IContentCategory,System.Windows.Forms.TreeNode)">
            <summary>
            Recursively adds an entire sub-category tree to the tree view in
            dialog.
            </summary>
            <param name="rootCategory">The root category.</param>
            <param name="rootTreeNode">The root tree node.</param>
        </member>
        <member name="M:Emergent.Toolbench.UI.ContentDialogs.NewContentDialog.UpdateButtonState">
            <summary>
            Helper method to enable/disable the ok and cancel buttons depending
            on whether the information in the dialog box is valid.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.UI.ContentDialogs.NewContentDialog.UpdateDescriptionPane">
            <summary>
            Updates the description pane by extracting the meta-data from the 
            currently selected content type.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.UI.ContentDialogs.NewContentDialog.UpdateExtensionList">
            <summary>
            Updates the drop down list of extensions to reflect the currently
            selected content type's available extensions.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.UI.ContentDialogs.NewContentDialog.OnContentCategoriesAfterSelect(System.Object,System.Windows.Forms.TreeViewEventArgs)">
            <summary>
            Handles the AfterSelect event of the m_contentCategories control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The 
            <see cref="T:System.Windows.Forms.TreeViewEventArgs"/> instance 
            containing the event data.
            </param>
        </member>
        <member name="M:Emergent.Toolbench.UI.ContentDialogs.NewContentDialog.OnContentTypesSelectedIndexChanged(System.Object,System.EventArgs)">
            <summary>
            Handles the SelectedIndexChanged event of the m_factoryTypes 
            control.
            </summary>   
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance 
            containing the event data.
            </param>
        </member>
        <member name="M:Emergent.Toolbench.UI.ContentDialogs.NewContentDialog.ToggleBold">
            <summary>
            Toggles a bold font in the description pane. Any text added to the
            control after this method is called will be bold.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.UI.ContentDialogs.NewContentDialog.OnDialogClosing(System.Object,System.Windows.Forms.FormClosingEventArgs)">
            <summary>
            Called when dialog is closing. This method will prevent the close 
            event if invalid information has been entered in the dialog that is
            not caught while validating the data as it is entered.
            </summary>      
            <param name="sender">The source of the event.</param>
            <param name="e">The 
            <see cref="T:System.Windows.Forms.FormClosingEventArgs"/> instance 
            containing the event data.
            </param>
        </member>
        <member name="M:Emergent.Toolbench.UI.ContentDialogs.NewContentDialog.OnDefaultLocationCheckedChanged(System.Object,System.EventArgs)">
            <summary>
            Called when the "Use Default Location" checkbox is checked or unchecked.
            Updates the UI state and disables/enabled controls appropriately.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance 
            containing the event data.</param>
        </member>
        <member name="M:Emergent.Toolbench.UI.ContentDialogs.NewContentDialog.UpdateDefaultFolder">
            <summary>
            Updates the content path with a new folder constructed from the content
            filename and DefaultRootPath.
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.UI.ContentDialogs.NewContentDialog.FolderPath">
            <summary>
            Gets the folder path that was chosen to house the new document as
            picked by the user.
            </summary>
            <value>The folder path.</value>
        </member>
        <member name="P:Emergent.Toolbench.UI.ContentDialogs.NewContentDialog.ContentName">
            <summary>
            Gets the name of the new document/content to create as entered by
            the user.
            </summary>
            <value>The name of the content.</value>
        </member>
        <member name="P:Emergent.Toolbench.UI.ContentDialogs.NewContentDialog.ContentExtension">
            <summary>
            Gets the file extension of the new content being created.
            </summary>
            <value>The file extension.</value>
        </member>
        <member name="P:Emergent.Toolbench.UI.ContentDialogs.NewContentDialog.FullPath">
            <summary>
            Gets the full path to the new piece of content.
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.UI.ContentDialogs.NewContentDialog.FactoryDescriptor">
            <summary>
            Gets the content descriptor based on what content was selected in
            the dialog.
            </summary>
            <value>The content descriptor.</value>
        </member>
        <member name="T:Emergent.Toolbench.UI.ContentDialogs.IMRUManager">
            <summary>
            Interface for accessing the MRU (most recently used) file system.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.UI.ContentDialogs.IMRUManager.Clear">
            <summary>
            Deletes all MRU records from the persistent settings and the menu
            system.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.UI.ContentDialogs.IMRUManager.AddFile(System.String)">
            <summary>
            Adds a new file record to the MRU system, or bumps it to the first
            slot if it already exists.
            </summary>
            <param name="newPath">Full path to the file being stored.
            </param>
        </member>
        <member name="M:Emergent.Toolbench.UI.ContentDialogs.IMRUManager.RemoveFile(System.String)">
            <summary>
            Removes an obsolete file from the MRU system.
            </summary>
            <param name="oldPath">Full path to the file being removed.
            </param>
        </member>
        <member name="P:Emergent.Toolbench.UI.ContentDialogs.IMRUManager.FileSettings">
            <summary>
            Gets the list of MRU files.
            </summary>
        </member>
        <member name="T:Emergent.Toolbench.UI.ContentDialogs.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.UI.ContentDialogs.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.UI.ContentDialogs.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.UI.ContentDialogs.Properties.Resources.FileWriteProtectedErrorMessage">
            <summary>
              Looks up a localized string similar to The file {0} cannot saved because it is write-protected. Try saving the file to a different location instead..
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.UI.ContentDialogs.Properties.Resources.OperationNotSupportedCaption">
            <summary>
              Looks up a localized string similar to Operation not supported.
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.UI.ContentDialogs.Properties.Resources.OperationNotSupportedMessage">
            <summary>
              Looks up a localized string similar to Operation not supported on content of type &quot;{0}&quot;..
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.UI.ContentDialogs.Properties.Resources.SaveFileErrorTitle">
            <summary>
              Looks up a localized string similar to Save file error.
            </summary>
        </member>
        <member name="T:Emergent.Toolbench.UI.ContentDialogs.MRUMenuFactory">
            <summary>
            IMenuFactory implementation for generating a menu to list the MRU
            (most recently used) files.  Selecting a file from the menu will
            open the file or, if already open, switch focus to the file.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.UI.ContentDialogs.MRUMenuFactory.CreateMenu">
            <summary>
            Gets the dynamically created menu from the factory.
            </summary>
            <returns>
            A Windows Forms menu, or <code>null</code> if none can be created.
            </returns>
        </member>
        <member name="M:Emergent.Toolbench.UI.ContentDialogs.MRUMenuFactory.ConstructAbbreviatedPath(System.String)">
            <summary>
            Generates an abbreviated version of a file path suitable for
            display.
            </summary>
            <param name="fullPath">A file path to condense.</param>
            <returns>
            A shortened version of the input path.
            </returns>
        </member>
        <member name="T:Emergent.Toolbench.UI.ContentDialogs.MRUMenuFactory.MRUMenuAction">
            <summary>
            A helper class used to handle MRU menu "click" events.
            
            This helper actually issues the request to open the selected file.
            </summary>
        </member>
        <member name="F:Emergent.Toolbench.UI.ContentDialogs.MRUMenuFactory.MRUMenuAction.m_path">
            <summary>
            The path to the file that can be opened with this action.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.UI.ContentDialogs.MRUMenuFactory.MRUMenuAction.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Emergent.Toolbench.UI.ContentDialogs.MRUMenuFactory.MRUMenuAction"/>
            class.
            </summary>
            <param name="path">The path to the MRU file.</param>
        </member>
        <member name="M:Emergent.Toolbench.UI.ContentDialogs.MRUMenuFactory.MRUMenuAction.Execute(System.Object,System.EventArgs)">
            <summary>
            Attempts to open a file as a result of a menu "click" event.
            </summary>
            <param name="sender">The menu "click" sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> 
            instance containing the event data.</param>
        </member>
        <member name="T:Emergent.Toolbench.UI.ContentDialogs.NewContentAction">
            <summary>
            When this action is called, it pops up a new content dialog box.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.UI.ContentDialogs.NewContentAction.Execute(Emergent.Toolbench.Actions.ExecutionContext,Emergent.Toolbench.Actions.ExecutionStyle)">
            <summary>
            Displays the new content dialog box. If the user did not cancel the
            new content creation, the content factory is used to create 
            content of the type specified by the user.
            </summary>
            <param name="context">The execution context of the action.</param>
            <param name="style">The execution style of the action.</param>
        </member>
        <member name="M:Emergent.Toolbench.UI.ContentDialogs.NewContentAction.ToXml">
            <summary>
            Converts the specified action's data into XML form.
            </summary>
            <returns>An XML node that describes the action.</returns>
        </member>
        <member name="M:Emergent.Toolbench.UI.ContentDialogs.NewContentAction.FromXml(System.Xml.Linq.XElement)">
            <summary>
            Extracts the necessary action data from the specified XML data.
            </summary>
            <param name="node">Top level XML node containing the action's data.
            </param>
        </member>
        <member name="M:Emergent.Toolbench.UI.ContentDialogs.NewContentAction.CreateNewContent(Emergent.Toolbench.ContentService.IContentFactoryDescriptor,System.String)">
            <summary>
            Creates the new type of content using the content service. If the 
            content is already opened in Toolbench, the content is cleared and
            focus is given to the already opened content.
            </summary>
            <param name="fullPath">The full path to the content.</param>
            <returns>True if content creation succeeded, false if it failed 
            or was canceled.</returns>
        </member>
        <member name="P:Emergent.Toolbench.UI.ContentDialogs.NewContentAction.IsSerializable">
            <summary>
            Gets a value indicating if the action is serializable.  Use this
            if your action can potentially become non-serializable based on
            input conditions.
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.UI.ContentDialogs.NewContentAction.Description">
            <summary>
            Gets a description used to display information about the serializable
            action to the user.
            </summary>
            <value>The label.</value>
        </member>
        <member name="T:Emergent.Toolbench.UI.ContentDialogs.MRUManager">
            <summary>
            Implements the IMRUManager interface.  Responsible for tracking
            records in the MRU (most recently used) content list.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.UI.ContentDialogs.MRUManager.Initialize">
            <summary>
            Loads and validates initial MRU records from the settings file.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.UI.ContentDialogs.MRUManager.Dispose">
            <summary>
            Disposes the object
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.UI.ContentDialogs.MRUManager.Clear">
            <summary>
            Deletes all MRU records from the persistent settings and the menu
            system.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.UI.ContentDialogs.MRUManager.AddFile(System.String)">
            <summary>
            Adds a new file record to the MRU system, or bumps it to the first
            slot if it already exists.
            </summary>
            <param name="newPath">Full path to the file being stored.
            </param>
        </member>
        <member name="M:Emergent.Toolbench.UI.ContentDialogs.MRUManager.RemoveFile(System.String)">
            <summary>
            Removes an obsolete file from the MRU system.
            </summary>
            <param name="oldPath">Full path to the file being removed.
            </param>
        </member>
        <member name="M:Emergent.Toolbench.UI.ContentDialogs.MRUManager.ReadFileSettings">
            <summary>
            Loads MRU records from persistent settings.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.UI.ContentDialogs.MRUManager.WriteFileSettings">
            <summary>
            Saves MRU records to persistent settings.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.UI.ContentDialogs.MRUManager.PopulateMenu">
            <summary>
            Updates the MRU menu to reflect current records.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.UI.ContentDialogs.MRUManager.IsFileValid(System.String)">
            <summary>
            Determines whether the specified file is valid for the MRU list.
            </summary>
            <param name="path">The file's path. Note that as far as this function is
            concerned it can be a full or relative path, or even just a filename. However
            in the more general context of the MRU list, this is normally a full path.
            </param>
            <returns><c>true</c> if the specified file is valid for the MRU list; otherwise,
            <c>false</c>.</returns>
        </member>
        <member name="P:Emergent.Toolbench.UI.ContentDialogs.MRUManager.Name">
            <summary>
            Gets the name of this service. Services must have unique names.
            </summary>
            <value>Emergent.Toolbench.UI.ContentDialogs.MRUManager</value>
        </member>
        <member name="P:Emergent.Toolbench.UI.ContentDialogs.MRUManager.FileSettings">
            <summary>
            Gets the list of MRU files.
            </summary>
        </member>
        <member name="T:Emergent.Toolbench.UI.ContentDialogs.ContentActionUtility">
            <summary>
            Useful utility class for shared operations between actions.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.UI.ContentDialogs.ContentActionUtility.VerifyNewContentDirectory(System.String,System.Boolean)">
            <summary>
            Checks if the directory exists and asks the user if they wish the 
            directory to be created for them if it does not exist.
            </summary>
            <param name="path">The directory path.</param>
            <param name="ignoreUser">Should user interaction be ignored?
            </param>
            <returns><c>true</c> if the directory is valid or a valid directory
            was created; otherwise <c>false</c>.</returns>
        </member>
    </members>
</doc>
