<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Emergent.Toolbench.UI.Workbench</name>
    </assembly>
    <members>
        <member name="T:Emergent.Toolbench.UI.Workbench.SeparatorToolbarItem">
            <summary>
            Simple toolbar item for representing a separator bar.
            </summary>
        </member>
        <member name="T:Emergent.Toolbench.UI.Workbench.ToolbarItem">
            <summary>
            Implementation for a toolbar item to be displayed on a toolbar
            as a Windows Forms ToolStripButton
            </summary>
        </member>
        <member name="T:Emergent.Toolbench.UI.Workbench.IToolbarItem">
            <summary>
            This is the interface for toolbar items which may appear on a toolbar.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.UI.Workbench.IToolbarItem.CreateControl">
            <summary>
            Creates the Windows.Forms control for the toolbar item. 
            </summary>
            <returns>The Windows.Forms control. Depending on the control sub-class, this may be a 
            regular toolbar button, or a combo-box, drop down button, etc.
            </returns>
        </member>
        <member name="M:Emergent.Toolbench.UI.Workbench.IToolbarItem.InitializeControl(System.Windows.Forms.ToolStripItem)">
            <summary>
            Provides a way to customize the constructed control if they do not have control over
            the construction of it.
            </summary>
            <param name="item">The control that was created.</param>
        </member>
        <member name="P:Emergent.Toolbench.UI.Workbench.IToolbarItem.Id">
            <summary>
            Gets the unique id of the toolbar item.
            </summary>
            <value>The unique id.</value>
        </member>
        <member name="P:Emergent.Toolbench.UI.Workbench.IToolbarItem.ElementData">
            <summary>
            Gets the XML configuration data for the toolbar item.
            </summary>
            <value>The element data.</value>
        </member>
        <member name="P:Emergent.Toolbench.UI.Workbench.IToolbarItem.Path">
            <summary>
            Gets the toolbar path for the toolbar item. The path defines which 
            toolbar the item belongs on and where on the toolbar it should be 
            placed.
            </summary>
            <value>The toolbar path.</value>
        </member>
        <member name="P:Emergent.Toolbench.UI.Workbench.IToolbarItem.ToolTip">
            <summary>
            Gets the tool tip for the toolbar item.
            </summary>
            <value>The tool tip.</value>
        </member>
        <member name="M:Emergent.Toolbench.UI.Workbench.ToolbarItem.#ctor">
            <summary>
            Empty default constructor so this class can be created by the 
            platform at runtime. (Since that operation requires a default 
            constructor).
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.UI.Workbench.ToolbarItem.#ctor(Emergent.Toolbench.IElementData)">
            <summary>
            Initializes a new instance of the <see cref="T:Emergent.Toolbench.UI.Workbench.ToolbarItem"/> class.
            </summary>
            <param name="data">The toolbar item element data.</param>        
        </member>
        <member name="M:Emergent.Toolbench.UI.Workbench.ToolbarItem.CreateControl">
            <summary>
            Creates the Windows.Forms control for the toolbar item.
            </summary>
            <returns>
            The Windows.Forms control. Depending on the control
            sub-class, this may be a regular toolbar button, or a
            combo-box, drop down button, etc.
            </returns>
        </member>
        <member name="M:Emergent.Toolbench.UI.Workbench.ToolbarItem.InitializeControl(System.Windows.Forms.ToolStripItem)">
            <summary>
            Provides a way to customize the constructed control if they do not have control over
            the construction of it.
            </summary>
            <param name="item">The control that was created.</param>
        </member>
        <member name="M:Emergent.Toolbench.UI.Workbench.ToolbarItem.Initialize(Emergent.Toolbench.IElementData)">
            <summary>
            Initializes the toolbar item using the specified XML configuration
            data. This method exists to assist in factoring a new item if 
            access to a named constructor is not allowed.
            </summary>
            <param name="configData">The configuration data.</param>
        </member>
        <member name="M:Emergent.Toolbench.UI.Workbench.ToolbarItem.UpdateToolTipForAction(System.Windows.Forms.ToolStripItem,Emergent.Toolbench.Actions.IActionDescriptor)">
            <summary>
            Updates the tooltip for a particular control to match the action.
            </summary>
            <param name="item">The control.</param>
            <param name="action">The action mapped to the control.</param>
        </member>
        <member name="P:Emergent.Toolbench.UI.Workbench.ToolbarItem.Path">
            <summary>
            Gets the toolbar path for the toolbar item. The path defines which
            toolbar the item belongs on and where on the toolbar it should be
            placed.
            </summary>
            <value>The toolbar path.</value>
        </member>
        <member name="P:Emergent.Toolbench.UI.Workbench.ToolbarItem.ToolTip">
            <summary>
            Gets the tool tip for the toolbar item.
            </summary>
            <value>The tool tip.</value>
        </member>
        <member name="P:Emergent.Toolbench.UI.Workbench.ToolbarItem.ElementData">
            <summary>
            Gets the XML configuration data for the toolbar item.
            </summary>
            <value>The element data.</value>
        </member>
        <member name="P:Emergent.Toolbench.UI.Workbench.ToolbarItem.Id">
            <summary>
            Gets the unique id of the toolbar item.
            </summary>
            <value>The unique id.</value>
        </member>
        <member name="P:Emergent.Toolbench.UI.Workbench.ToolbarItem.UseLargeIcons">
            <summary>
            Gets a value indicating if large buttons or icons should be used.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.UI.Workbench.SeparatorToolbarItem.#ctor(Emergent.Toolbench.IElementData)">
            <summary>
            Constructs the separator bar. No information is required from the
            additional configuration data.
            </summary>
            <param name="data">The toolbar item element data.</param>
        </member>
        <member name="M:Emergent.Toolbench.UI.Workbench.SeparatorToolbarItem.CreateControl">
            <summary>
            Creates a separator toolbar control.
            </summary>
            <returns>
            A Windows.Forms.ToolStripSeparator control.
            </returns>
        </member>
        <member name="T:Emergent.Toolbench.UI.Workbench.DropDownButtonToolbarItem">
            <summary>
            Implements a toolbar item that provides a drop down list of actions.
            The drop down button contains an image that may be specified in the 
            extension.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.UI.Workbench.DropDownButtonToolbarItem.#ctor(Emergent.Toolbench.IElementData)">
            <summary>
            Initializes a new instance of the drop down button item. Parses the
            XML element data and extracts the necessary information to build 
            the control.
            </summary>
            <param name="data">The toolbar item element data.</param>
        </member>
        <member name="M:Emergent.Toolbench.UI.Workbench.DropDownButtonToolbarItem.CreateControl">
            <summary>
            Creates a Windows.Forms.ToolStripDropDownButton for the toolbar 
            item.
            </summary>
            <returns>
            A drop down button containing the image specified by the extension
            and a list of actions in the drop down list.
            </returns>
        </member>
        <member name="T:Emergent.Toolbench.UI.Workbench.IToolbarManager">
            <summary>
            Interface for the manager of toolbar contributions. IToolbarManager 
            implementations manage sets of IToolbarItems for building toolbars.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.UI.Workbench.IToolbarManager.BuildToolbars(System.Collections.Generic.List{Emergent.Toolbench.UI.Workbench.IToolbar},System.Collections.Generic.List{Emergent.Toolbench.UI.Workbench.IToolbarItem})">
            <summary>
            Builds the toolbars from a list of <see cref="T:Emergent.Toolbench.UI.Workbench.IToolbarItem"/>.
            </summary>
            <param name="toolbarElements">The toolbar elements.</param>
            <param name="toolbarItemElements">The toolbar item elements.</param>
        </member>
        <member name="M:Emergent.Toolbench.UI.Workbench.IToolbarManager.SetToolbarVisibilty(System.String,System.Boolean)">
            <summary>
            Sets the visibility of the specified toolbar. Note, a new Windows 
            Forms toolbar object will be created the first time the specified
            toolbar is made visible.
            </summary>
            <param name="toolbarName">Name of the toolbar to make visible.
            </param>
            <param name="visible">if set to <c>true</c> the toolbar will be 
            displayed..</param>
        </member>
        <member name="M:Emergent.Toolbench.UI.Workbench.IToolbarManager.SetToolbarVisibilty(Emergent.Toolbench.UI.Workbench.IToolbar,System.Boolean)">
            <summary>
            Sets the visibility of the specified toolbar. Note, a new Windows 
            Forms toolbar object will be created the first time the specified
            toolbar is made visible.
            </summary>
            <param name="toolbar">A reference to the toolbar to make 
            visible.</param>
            <param name="visible">if set to <c>true</c> the toolbar will be 
            displayed..</param>
        </member>
        <member name="P:Emergent.Toolbench.UI.Workbench.IToolbarManager.Toolbars">
            <summary>
            Gets the toolbars.
            </summary>
            <value>The toolbars.</value>
        </member>
        <member name="T:Emergent.Toolbench.UI.Workbench.ExtensionPoints">
            <summary>
            Holds the extension point ids for this assembly.
            </summary>
        </member>
        <member name="F:Emergent.Toolbench.UI.Workbench.ExtensionPoints.ActionSet">
            <summary>
            The extension point ID for ActionSet extension contributions.
            </summary>
        </member>
        <member name="F:Emergent.Toolbench.UI.Workbench.ExtensionPoints.View">
            <summary>
            View
            </summary>
        </member>
        <member name="F:Emergent.Toolbench.UI.Workbench.ExtensionPoints.Perspectives">
            <summary>
            String identifier of the manifest element for a perspective 
            extension point.
            </summary>
        </member>
        <member name="F:Emergent.Toolbench.UI.Workbench.ExtensionPoints.PerspectiveMapping">
            <summary>
            String identifier of the manifest element for a perspective 
            mapping extension point.
            </summary>
        </member>
        <member name="F:Emergent.Toolbench.UI.Workbench.ExtensionPoints.WorkbenchClosing">
            <summary>
            WorkbenchClosing event handler extension point.
            </summary>
        </member>
        <member name="F:Emergent.Toolbench.UI.Workbench.ExtensionPoints.WorkbenchClosed">
            <summary>
            WorkbenchClosed event handler extension point.
            </summary>
        </member>
        <member name="F:Emergent.Toolbench.UI.Workbench.ExtensionPoints.DynamicContextMenuProvider">
            <summary>
            String identifier of the manifest element for a context menu provider.
            </summary>
        </member>
        <member name="F:Emergent.Toolbench.UI.Workbench.ExtensionPoints.DynamicFormContextMenuProvider">
            <summary>
            String identifier of the manifest element for a context menu provider.
            </summary>
        </member>
        <member name="T:Emergent.Toolbench.UI.Workbench.IViewService">
            <summary>
            Interface for a service that tracks the views that have been defined by
            plug-ins and interfaces those views with the rest of the system.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.UI.Workbench.IViewService.CreateView(System.String)">
            <summary>
            Creates the view with the specified view unique id.
            </summary>
            <param name="viewUniqueId">The unique view id.</param>
            <returns>The view created.</returns>
        </member>
        <member name="M:Emergent.Toolbench.UI.Workbench.IViewService.CreateView(Emergent.Toolbench.UI.Workbench.ViewDescriptor)">
            <summary>
            Creates the specified view thus activating the plug-in in which the
            view is located if it is not already activated.
            </summary>
            <param name="entry">The view entry to activate.</param>
        </member>
        <member name="M:Emergent.Toolbench.UI.Workbench.IViewService.CreateOrFindView(System.String)">
            <summary>
            Finds or creates the view if it can not be found.
            </summary>
            <param name="viewUniqueId">The unique view id.</param>
            <returns>The view found or created.</returns>
        </member>
        <member name="M:Emergent.Toolbench.UI.Workbench.IViewService.CreateOrFindView(Emergent.Toolbench.UI.Workbench.ViewDescriptor)">
            <summary>
            Finds or creates the view if it can not be found.
            </summary>
            <param name="descriptor">The view descriptor.</param>
            <returns>The view found or created.</returns>
        </member>
        <member name="M:Emergent.Toolbench.UI.Workbench.IViewService.FindViews(System.String)">
            <summary>
            Gets all the view instances created from the view class of the 
            specified unique id. Note, if the plug-in containing the view's 
            code needs loading, this method will invoke that process prior to
            creating the view.
            </summary>
            <param name="viewUniqueId">The view unique id.</param>
            <returns>A collection of view instances or null if none were found.
            </returns>
        </member>
        <member name="M:Emergent.Toolbench.UI.Workbench.IViewService.FindViews(Emergent.Toolbench.ContentService.AbstractContent)">
            <summary>
            Gets a collection of views that are currently viewing some portion
            of the specified content.
            </summary>
            <param name="content">The content.</param>
            <returns>A collection of views using the specified content.
            </returns>
        </member>
        <member name="M:Emergent.Toolbench.UI.Workbench.IViewService.ShowView(System.String)">
            <summary>
            Shows all views matching the specified unique id. If the view is
            not found an error is logged.
            </summary>
            <param name="viewUniqueId">The view unique identifier.</param>
        </member>
        <member name="M:Emergent.Toolbench.UI.Workbench.IViewService.ShowView(Emergent.Toolbench.UI.Workbench.IView)">
            <summary>
            Shows the specified view.
            </summary>
            <param name="toShow">View to open or make visible.</param>
        </member>
        <member name="M:Emergent.Toolbench.UI.Workbench.IViewService.HideView(System.String)">
            <summary>
            Hides all views matching the specified unique id. If the view is
            not found an error is logged.
            </summary>
            <param name="viewUniqueId">The view unique identifier.</param>
        </member>
        <member name="M:Emergent.Toolbench.UI.Workbench.IViewService.HideView(Emergent.Toolbench.UI.Workbench.IView)">
            <summary>
            Hides the specified view.
            </summary>
            <param name="toHide">View to hide.</param>
        </member>
        <member name="M:Emergent.Toolbench.UI.Workbench.IViewService.CloseView(Emergent.Toolbench.UI.Workbench.IView,System.Boolean,System.Boolean)">
            <summary>
            Closes the specified view. When closing the view, this method will
            call its OnClose method and destroy the window containing the 
            view.
            </summary>
            <param name="toClose">View to close.</param>
            <param name="closeContent">Should the content be closed.</param>
            <param name="checkDirty">Should dirty content be checked for 
            saving.</param>
        </member>
        <member name="M:Emergent.Toolbench.UI.Workbench.IViewService.MakeViewVisible(Emergent.Toolbench.UI.Workbench.IView)">
            <summary>
            Makes the view visible and have focus.
            </summary>
            <param name="view">The view.</param>
        </member>
        <member name="M:Emergent.Toolbench.UI.Workbench.IViewService.GetViewDescriptor(System.String)">
            <summary>
            Gets the view info for a unique if it exists.
            </summary>
            <param name="viewUniqueId">The unique view Id.</param>
            <returns>The view entry.</returns>
        </member>
        <member name="M:Emergent.Toolbench.UI.Workbench.IViewService.IsViewVisible(System.String)">
            <summary>
            Checks if all views with the given view unique id are visible.
            </summary>
            <param name="viewUniqueId">The unique view Id.</param>
            <returns><c>true</c> if the view is visible; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Emergent.Toolbench.UI.Workbench.IViewService.IsViewVisible(Emergent.Toolbench.UI.Workbench.IView)">
            <summary>
            Checks if the view is visible.
            </summary>
            <param name="view">The view.</param>
            <returns><c>true</c> if the view is visible; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Emergent.Toolbench.UI.Workbench.IViewService.IsDocumentView(System.String)">
            <summary>
            Determines whether or not the specified view is a document view 
            meaning its default dock property is set to Document.
            </summary>
            <param name="viewUniqueId">The views unique id.</param>
            <returns><c>true</c> if the view is document docked; otherwise, 
            <c>false</c>.</returns>
        </member>
        <member name="M:Emergent.Toolbench.UI.Workbench.IViewService.IsContentBoundView(System.String)">
            <summary>
            Checks if the view is content bound.
            </summary>
            <param name="viewUniqueId">The views unique id.</param>
            <returns><c>true</c> if the view is content bound; otherwise, 
            <c>false</c>.</returns>
        </member>
        <member name="M:Emergent.Toolbench.UI.Workbench.IViewService.IsViewInstanced(System.String)">
            <summary>
            Checks if a view matching the unique id has been instanced.
            </summary>
            <param name="viewUniqueId">The views unique id.</param>
            <returns><c>true</c> if the view has been instanced; otherwise, 
            <c>false</c>.</returns>
        </member>
        <member name="M:Emergent.Toolbench.UI.Workbench.IViewService.IsViewInstancedWithContent(System.String,Emergent.Toolbench.ContentService.AbstractContent)">
            <summary>
            Checks if a particular type of view contains the content.
            </summary>
            <param name="viewId">The view id.</param>
            <param name="content">The content to check.</param>
            <returns><c>true</c> if there exists a view matching the provided 
            id with the content; otherwise, <c>false</c>.</returns>
        </member>
        <member name="P:Emergent.Toolbench.UI.Workbench.IViewService.ActiveView">
            <summary>
            The active view is the view that currently has focus.
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.UI.Workbench.IViewService.ActiveDocumentView">
            <summary>
            Gets the currently active document view, if there is no active 
            document view <value>null</value> is returned.
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.UI.Workbench.IViewService.InstancedViews">
            <summary>
            Gets an array of all instanced views.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.UI.Workbench.TextBoxToolbarItem.#ctor(Emergent.Toolbench.IElementData)">
            <summary>
            Initializes a new instance of the text box toolbar item class. The
            action id is extracted from the configuration data.
            </summary>
            <param name="configData">The XML configuration data.</param>
        </member>
        <member name="M:Emergent.Toolbench.UI.Workbench.TextBoxToolbarItem.CreateControl">
            <summary>
            Creates a TextBox control for the toolbar item. Note, the toolbar
            item's action is executed when the user pressed enter in the 
            control.
            </summary>
            <returns>
            The Windows.Forms.ToolStripTextBox.
            </returns>
        </member>
        <member name="M:Emergent.Toolbench.UI.Workbench.TextBoxToolbarItem.OnKeyPress(System.Object,System.Windows.Forms.KeyPressEventArgs)">
            <summary>
            Called when the user presses a key on the text box toolbar item.
            This method will execute the action bound to the toolbar item if 
            enter is pressed.
            </summary>        
        </member>
        <member name="M:Emergent.Toolbench.UI.Workbench.RadioButtonToolbarGroup.RequestCheck(System.Object,System.EventArgs)">
            <summary>
            Checks a given ToolStripButton and unchecks the previous one.
            Suitable for use as an event handler for Click.
            </summary>
            <param name="sender">ToolStripButton that was clicked.</param>
            <param name="e">Unused EventArgs.</param>
        </member>
        <member name="M:Emergent.Toolbench.UI.Workbench.RadioButtonToolbarGroup.RequestCheckDefault(System.Windows.Forms.ToolStripButton)">
            <summary>
            Checks the "default" button at control creation time.
            Basically identical to <see cref="M:Emergent.Toolbench.UI.Workbench.RadioButtonToolbarGroup.RequestCheck(System.Object,System.EventArgs)"/>, but emits
            warnings if multiple buttons are marked as default.
            </summary>
            <param name="button">The button to check.</param>
        </member>
        <member name="M:Emergent.Toolbench.UI.Workbench.RadioButtonToolbarGroup.#ctor(System.String)">
            <summary>
            Creates a new toolbar group. Private, since this is accessed through a singleton 
            collection.
            </summary>
            <param name="name">Name to associate with the group.</param>
        </member>
        <member name="M:Emergent.Toolbench.UI.Workbench.RadioButtonToolbarGroup.GetGroup(System.String)">
            <summary>
            Retrieves the RadioButtonToolbarGroup object associated with the specified name.
            Creates a new object if necessary.
            </summary>
            <param name="groupId">A string naming a unique action group.</param>
            <returns>A RadioButtonToolbarGroup for groupID.</returns>
        </member>
        <member name="P:Emergent.Toolbench.UI.Workbench.RadioButtonToolbarGroup.ActiveButton">
            <summary>
            References the currently checked button in this group.
            </summary>
        </member>
        <member name="T:Emergent.Toolbench.UI.Workbench.ButtonToolbarItem">
            <summary>
            This class creates a toolbar item that is a single button in the 
            toolbar.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.UI.Workbench.ButtonToolbarItem.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Emergent.Toolbench.UI.Workbench.ButtonToolbarItem"/> class.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.UI.Workbench.ButtonToolbarItem.#ctor(Emergent.Toolbench.IElementData)">
            <summary>
            Initializes a new instance of the <see cref="T:Emergent.Toolbench.UI.Workbench.ButtonToolbarItem"/> 
            class.
            </summary>
            <param name="data">The toolbar item element data.</param>
            <param name="parent">The parent toolbar</param>
        </member>
        <member name="M:Emergent.Toolbench.UI.Workbench.ButtonToolbarItem.CreateControl">
            <summary>
            Creates the Windows.Forms control for the toolbar item.
            </summary>
            <returns>
            This implementation creates a regular tool strip button and maps 
            the specified action id to the button's click handler.
            </returns>
        </member>
        <member name="M:Emergent.Toolbench.UI.Workbench.ButtonToolbarItem.HandleMouseEnter(System.Object,System.EventArgs)">
            <summary>
            Handles the MouseEnter event for the ToolStripButton control by
            updating tooltip text to reflect any assigned keyboard shortcut.
            </summary>        
        </member>
        <member name="P:Emergent.Toolbench.UI.Workbench.ButtonToolbarItem.ToolTip">
            <summary>
            Get the tooltip for the button.
            </summary>
        </member>
        <member name="T:Emergent.Toolbench.UI.Workbench.Toolbar">
            <summary>   
            Implements the <see cref="T:Emergent.Toolbench.UI.Workbench.IToolbar"/> interface. This implementation 
            will demand load images and create the actual forms controls the first 
            time the toolbar is made "visible".
            </summary>
        </member>
        <member name="T:Emergent.Toolbench.UI.Workbench.IToolbar">
            <summary>
            Interface for objects representing a Forms toolbar.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.UI.Workbench.IToolbar.AddToolbarItem(Emergent.Toolbench.UI.Workbench.IToolbarItem)">
            <summary>
            Adds a toolbar item to this toolbar
            </summary>
            <param name="toolbarItem">The toolbar item to add.</param>
        </member>
        <member name="M:Emergent.Toolbench.UI.Workbench.IToolbar.GetControl">
            <summary>
            Gets the Windows Form control for this toolbar.
            </summary>
            <returns>The toolbar UI control</returns>
        </member>
        <member name="P:Emergent.Toolbench.UI.Workbench.IToolbar.Name">
            <summary>
            Gets the name of this toolbar. The name is typically used to allow
            the user to pick and choose visible toolbars by name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:Emergent.Toolbench.UI.Workbench.IToolbar.Visible">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Emergent.Toolbench.UI.Workbench.IToolbar"/> 
            is visible.
            </summary>
            <value><c>true</c> if visible; otherwise, <c>false</c>.</value>
        </member>
        <member name="E:Emergent.Toolbench.UI.Workbench.IToolbar.VisibleChanged">
            <summary>
            Occurs when The visibility for this IToolbar instance changes.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.UI.Workbench.Toolbar.#ctor(Emergent.Toolbench.IElementData)">
            <summary>
            Initializes a new instance of the <see cref="T:Emergent.Toolbench.UI.Workbench.Toolbar"/> class.
            </summary>
            <param name="data">The extension element data.</param>
            <param name="parent">The parent toolbar element to this one.
            </param>
        </member>
        <member name="M:Emergent.Toolbench.UI.Workbench.Toolbar.AddToolbarItem(Emergent.Toolbench.UI.Workbench.IToolbarItem)">
            <summary>
            Adds a toolbar item to this toolbar
            </summary>
            <param name="toolbarItem">The toolbar item to add.</param>
        </member>
        <member name="M:Emergent.Toolbench.UI.Workbench.Toolbar.GetControl">
            <summary>
            Gets the Windows Form control for this toolbar.
            </summary>
            <returns>The toolbar UI control</returns>
        </member>
        <member name="M:Emergent.Toolbench.UI.Workbench.Toolbar.CreateToolStrip">
            <summary>
            Creates the Windows Forms ToolStrip for this <see cref="T:Emergent.Toolbench.UI.Workbench.IToolbar"/>
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.UI.Workbench.Toolbar.DoVisibleChange(System.Object,System.EventArgs)">
            <summary>
            Event handler for the VisibilityChanged event on the ToolStrip 
            instance for this <see cref="T:Emergent.Toolbench.UI.Workbench.IToolbar"/>.  This event is then 
            propagated to listeners of the 
            <see cref="E:Emergent.Toolbench.UI.Workbench.IToolbar.VisibleChanged"/> event.
            </summary>        
        </member>
        <member name="P:Emergent.Toolbench.UI.Workbench.Toolbar.Id">
            <summary>
            Gets the unique identifier for the toolbar.
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.UI.Workbench.Toolbar.Name">
            <summary>
            Gets the name of this toolbar. The name is typically used to allow
            the user to pick and choose visible toolbars by name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:Emergent.Toolbench.UI.Workbench.Toolbar.Visible">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Emergent.Toolbench.UI.Workbench.IToolbar"/> 
            is visible.
            </summary>
            <value><c>true</c> if visible; otherwise, <c>false</c>.</value>
        </member>
        <member name="E:Emergent.Toolbench.UI.Workbench.Toolbar.VisibleChanged">
            <summary>
            Occurs when The visibility for this IToolbar instance changes
            </summary>
        </member>
        <member name="T:Emergent.Toolbench.UI.Workbench.SaveDirtyContentDialog">
            <summary>
            Displays a dialog containing a list of files that are dirty and might
            need saving. Allows the user to choose to save the files or not, or
            just cancel the operation.
            </summary>
        </member>
        <member name="F:Emergent.Toolbench.UI.Workbench.SaveDirtyContentDialog.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.UI.Workbench.SaveDirtyContentDialog.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Emergent.Toolbench.UI.Workbench.SaveDirtyContentDialog.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.UI.Workbench.SaveDirtyContentDialog.#ctor">
            <summary>
            Initializes a new instance of the 
            <see cref="T:Emergent.Toolbench.UI.Workbench.SaveDirtyContentDialog"/> class.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.UI.Workbench.SaveDirtyContentDialog.AddDocument(Emergent.Toolbench.ContentService.AbstractDocument)">
            <summary>
            Adds a document that has been marked dirty. This is shown in the 
            list of documents the user can review before choosing their 
            decision.
            </summary>
            <param name="doc">The doc.</param>
        </member>
        <member name="P:Emergent.Toolbench.UI.Workbench.SaveDirtyContentDialog.DirtyDocuments">
            <summary>
            Gets the dirty documents.
            </summary>
            <value>The dirty documents.</value>
        </member>
        <member name="T:Emergent.Toolbench.UI.Workbench.IWorkbenchClosedHandler">
            <summary>
            This interface defines a handler for when the workbench is exiting. 
            Extensions for the workbench Shutdown extension point must implement 
            this interface.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.UI.Workbench.IWorkbenchClosedHandler.Execute">
            <summary>
            Executes an action that occurs when the workbench is shutting 
            down. 
            </summary>
            <returns>True if the shutdown process should continue, false if 
                the workbench should continue running.
            </returns>
        </member>
        <member name="M:Emergent.Toolbench.UI.Workbench.IDropTargetAdvisor.OnDragEnter(System.Windows.DragEventArgs)">
            <summary>
            Called when the drop is completed.
            </summary>
            <param name="dataObject">The data object.</param>
            <param name="effects">The drag and drop effects.</param>
            <param name="dropPoint">The drop point.</param>
        </member>
        <member name="M:Emergent.Toolbench.UI.Workbench.IDropTargetAdvisor.IsValidDropTarget(System.Windows.UIElement,System.Windows.IDataObject,System.Windows.Point)">
            <summary>
            Determines whether the control under the mouse is a valid drop target.
            </summary>
            <param name="targetElement">The target element.</param>
            <param name="dataObject">The data object.</param>
            <returns>
                <c>true</c> if the control under the mouse is a valid drop target otherwise, 
                <c>false</c>.
            </returns>
        </member>
        <member name="M:Emergent.Toolbench.UI.Workbench.IDropTargetAdvisor.OnDropCompleted(System.Windows.UIElement,System.Windows.IDataObject,System.Windows.DragDropEffects,System.Windows.Point)">
            <summary>
            Called when the drop is completed.
            </summary>
            <param name="targetElement">The target element.</param>
            <param name="dataObject">The data object.</param>
            <param name="effects">The drag and drop effects.</param>
            <param name="dropPoint">The drop point.</param>
        </member>
        <member name="P:Emergent.Toolbench.UI.Workbench.IDropTargetAdvisor.TargetUI">
            <summary>
            Gets or sets the target UI.
            </summary>
            <value>The target UI.</value>
        </member>
        <member name="T:Emergent.Toolbench.UI.Workbench.IDynamicFormContextMenuProvider">
            <summary>
            Interface for a class that contributes items to a dynamic context menu.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.UI.Workbench.IDynamicFormContextMenuProvider.CreateItems(Emergent.Toolbench.UI.Workbench.DynamicContextMenuEventArgs)">
            <summary>
            Creates the menu items.
            </summary>
            <param name="e">The event arguments.</param>
            <returns>The list of menu items.</returns>
        </member>
        <member name="T:Emergent.Toolbench.UI.Workbench.SplashScreen">
            <summary>
            A simple splash screen form that displays a static image.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.UI.Workbench.SplashScreen.#ctor">
            <summary>
            Constructor of the form.
            </summary>
        </member>
        <member name="T:Emergent.Toolbench.UI.Workbench.IPerspective">
            <summary>
            This class provides the interface for a perspective in the workbench.
            A perspective is mostly data serving to group views, menus, toolbar 
            items, etc. that have a common theme or work flow. The current set of
            visible views, toolbars, menus, and other UI elements are mostly 
            determined by the active perspective. Note, custom perspectives can be 
            created by the user as well.
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.UI.Workbench.IPerspective.Name">
            <summary>
            Gets the name of the perspective. The name should be unique but 
            this is not a requirement.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:Emergent.Toolbench.UI.Workbench.IPerspective.Id">
            <summary>
            Gets a unique identifier for the perspective. The unique id is used
            by various parts of the workbench (e.g. views) to reference a 
            perspective.
            </summary>
            <value>The id.</value>
        </member>
        <member name="P:Emergent.Toolbench.UI.Workbench.IPerspective.Type">
            <summary>
            Gets the perspective type. The perspective type identifies which of
            the perspective types this perspective represents.
            </summary>
            <value>The type.</value>
        </member>
        <member name="P:Emergent.Toolbench.UI.Workbench.IPerspective.Views">
            <summary>
            Gets the views that are associated with the perspective.
            </summary>
            <value>The view ids.</value>
        </member>
        <member name="P:Emergent.Toolbench.UI.Workbench.IPerspective.ActionSets">
            <summary>
            Gets the action sets associated with the perspective.
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.UI.Workbench.IPerspective.Icon">
            <summary>
            Gets the icon associated with the perspective. The icon is used in 
            conjunction with the name to display drop down lists of the
            perspectives available for the user.
            </summary>
            <value>The icon.</value>
        </member>
        <member name="M:Emergent.Toolbench.UI.Workbench.Perspective.#ctor(Emergent.Toolbench.IElementData)">
            <summary>
            Initializes a new instance of the <see cref="T:Emergent.Toolbench.UI.Workbench.Perspective"/> class.
            </summary>
            <param name="data">The data specified in the perspective's 
                configuration data.
            </param>
        </member>
        <member name="M:Emergent.Toolbench.UI.Workbench.Perspective.AddView(Emergent.Toolbench.UI.Workbench.PerspectiveElement)">
            <summary>
            Adds a new view to the list of views associated with this
            perspective.
            </summary>
            <param name="element">The unique id of the view. If the view is 
                already mapped to the perspective this method is a no-op and a 
                warning is logged.
            </param>
        </member>
        <member name="M:Emergent.Toolbench.UI.Workbench.Perspective.AddActionSet(Emergent.Toolbench.UI.Workbench.PerspectiveElement)">
            <summary>
            Adds a new action set to the list of action sets associated with 
            this perspective.
            </summary>
            <param name="element">The unique id of the actionset. If the 
            actionset is already mapped to the perspective this method is a 
            no-op and a warning is logged.</param>
        </member>
        <member name="M:Emergent.Toolbench.UI.Workbench.Perspective.ToString">
            <summary>
            Gets the string representation for a perspective.
            </summary>
            <returns>The string representation of the perspective.</returns>
        </member>
        <member name="P:Emergent.Toolbench.UI.Workbench.Perspective.Name">
            <summary>
            Gets the name of the perspective. The name should be unique but 
            this is not a requirement.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:Emergent.Toolbench.UI.Workbench.Perspective.Id">
            <summary>
            Gets a unique identifier for the perspective. The unique id is used
            by various parts of the workbench (e.g. views) to reference a
            perspective.
            </summary>
            <value>The id.</value>
        </member>
        <member name="P:Emergent.Toolbench.UI.Workbench.Perspective.Views">
            <summary>
            Gets the views that are associated with the perspective.
            </summary>
            <value>The view ids.</value>
        </member>
        <member name="P:Emergent.Toolbench.UI.Workbench.Perspective.ActionSets">
            <summary>
            Gets the action sets associated with the perspective.
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.UI.Workbench.Perspective.Type">
            <summary>
            Gets the perspective type. The perspective type identifies which of
            the perspective types this perspective represents.
            </summary>
            <value>The type.</value>
        </member>
        <member name="P:Emergent.Toolbench.UI.Workbench.Perspective.Icon">
            <summary>
            Gets the icon associated with the perspective. The icon is used in
            conjunction with the name to display drop down lists of the
            perspectives available for the user.
            </summary>
            <value>The icon.</value>
        </member>
        <member name="T:Emergent.Toolbench.UI.Workbench.DynamicContextMenuService">
            <summary>
            Service for creating extension-driven dynamic context menus.
            </summary>
        </member>
        <member name="T:Emergent.Toolbench.UI.Workbench.IDynamicContextMenuService">
            <summary>
            Public interface for requesting menus from the dynamic context menu system.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.UI.Workbench.IDynamicContextMenuService.CreateContextMenu``1(``0)">
            <summary>
            Creates the context menu.
            </summary>
            <typeparam name="T">Context item type for menu.</typeparam>
            <param name="item">The item.</param>
            <returns>The new context menu.</returns>
        </member>
        <member name="M:Emergent.Toolbench.UI.Workbench.IDynamicContextMenuService.CreateContextMenu``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Creates the context menu.
            </summary>
            <typeparam name="T">Context items type for menu.</typeparam>
            <param name="items">The items.</param>
            <returns>The new context menu.</returns>
        </member>
        <member name="M:Emergent.Toolbench.UI.Workbench.IDynamicContextMenuService.CreateContextMenu(System.Type,System.Object)">
            <summary>
            Creates the context menu.
            </summary>
            <param name="type">Context item type for menu.</param>
            <param name="item">The item.</param>
            <returns>The new context menu.</returns>
        </member>
        <member name="M:Emergent.Toolbench.UI.Workbench.IDynamicContextMenuService.CreateContextMenu(System.Type,System.Collections.IEnumerable)">
            <summary>
            Creates the context menu.
            </summary>
            <param name="type">Context items type for menu.</param>
            <param name="items">The items.</param>
            <returns>The new context menu.</returns>
        </member>
        <member name="M:Emergent.Toolbench.UI.Workbench.IDynamicContextMenuService.CreateContextMenu``1(System.String,``0)">
            <summary>
            Creates the context menu.
            </summary>
            <typeparam name="T">Context item type for menu.</typeparam>
            <param name="key">The key.</param>
            <param name="item">The item.</param>
            <returns>The new context menu.</returns>
        </member>
        <member name="M:Emergent.Toolbench.UI.Workbench.IDynamicContextMenuService.CreateContextMenu``1(System.String,System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Creates the context menu.
            </summary>
            <typeparam name="T">Context items type for menu.</typeparam>
            <param name="key">The key.</param>
            <param name="items">The items.</param>
            <returns>The new context menu.</returns>
        </member>
        <member name="M:Emergent.Toolbench.UI.Workbench.IDynamicContextMenuService.CreateContextMenu(System.Type,System.String,System.Object)">
            <summary>
            Creates the context menu.
            </summary>
            <param name="type">Context item type for menu.</param>
            <param name="key">The key.</param>
            <param name="item">The item.</param>
            <returns>The new context menu.</returns>
        </member>
        <member name="M:Emergent.Toolbench.UI.Workbench.IDynamicContextMenuService.CreateContextMenu(System.Type,System.String,System.Collections.IEnumerable)">
            <summary>
            Creates the context menu.
            </summary>
            <param name="type">Context items type for menu.</param>
            <param name="key">The key.</param>
            <param name="items">The items.</param>
            <returns>The new context menu.</returns>
        </member>
        <member name="M:Emergent.Toolbench.UI.Workbench.IDynamicContextMenuService.CreateContextMenu(Emergent.Toolbench.UI.Workbench.DynamicContextMenuEventArgs)">
            <summary>
            Creates the context menu.
            </summary>
            <param name="args">The event arguments.</param>
            <returns>The new context menu.</returns>
        </member>
        <member name="M:Emergent.Toolbench.UI.Workbench.IDynamicContextMenuService.CreateFormContextMenu``1(``0)">
            <summary>
            Creates the context menu.
            </summary>
            <typeparam name="T">Context item type for menu.</typeparam>
            <param name="item">The item.</param>
            <returns>The new context menu.</returns>
        </member>
        <member name="M:Emergent.Toolbench.UI.Workbench.IDynamicContextMenuService.CreateFormContextMenu``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Creates the context menu.
            </summary>
            <typeparam name="T">Context items type for menu.</typeparam>
            <param name="items">The items.</param>
            <returns>The new context menu.</returns>
        </member>
        <member name="M:Emergent.Toolbench.UI.Workbench.IDynamicContextMenuService.CreateFormContextMenu(System.Type,System.Object)">
            <summary>
            Creates the context menu.
            </summary>
            <param name="type">Context item type for menu.</param>
            <param name="item">The item.</param>
            <returns>The new context menu.</returns>
        </member>
        <member name="M:Emergent.Toolbench.UI.Workbench.IDynamicContextMenuService.CreateFormContextMenu(System.Type,System.Collections.IEnumerable)">
            <summary>
            Creates the context menu.
            </summary>
            <param name="type">Context items type for menu.</param>
            <param name="items">The items.</param>
            <returns>The new context menu.</returns>
        </member>
        <member name="M:Emergent.Toolbench.UI.Workbench.IDynamicContextMenuService.CreateFormContextMenu``1(System.String,``0)">
            <summary>
            Creates the context menu.
            </summary>
            <typeparam name="T">Context item type for menu.</typeparam>
            <param name="key">The key.</param>
            <param name="item">The item.</param>
            <returns>The new context menu.</returns>
        </member>
        <member name="M:Emergent.Toolbench.UI.Workbench.IDynamicContextMenuService.CreateFormContextMenu``1(System.String,System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Creates the context menu.
            </summary>
            <typeparam name="T">Context items type for menu.</typeparam>
            <param name="key">The key.</param>
            <param name="items">The items.</param>
            <returns>The new context menu.</returns>
        </member>
        <member name="M:Emergent.Toolbench.UI.Workbench.IDynamicContextMenuService.CreateFormContextMenu(System.Type,System.String,System.Object)">
            <summary>
            Creates the context menu.
            </summary>
            <param name="type">Context item type for menu.</param>
            <param name="key">The key.</param>
            <param name="item">The item.</param>
            <returns>The new context menu.</returns>
        </member>
        <member name="M:Emergent.Toolbench.UI.Workbench.IDynamicContextMenuService.CreateFormContextMenu(System.Type,System.String,System.Collections.IEnumerable)">
            <summary>
            Creates the context menu.
            </summary>
            <param name="type">Context items type for menu.</param>
            <param name="key">The key.</param>
            <param name="items">The items.</param>
            <returns>The new context menu.</returns>
        </member>
        <member name="M:Emergent.Toolbench.UI.Workbench.IDynamicContextMenuService.CreateFormContextMenu(Emergent.Toolbench.UI.Workbench.DynamicContextMenuEventArgs)">
            <summary>
            Creates the context menu.
            </summary>
            <param name="key">The key to identify which provider to use</param>
            <returns>The new context menu.</returns>
        </member>
        <member name="M:Emergent.Toolbench.UI.Workbench.DynamicContextMenuService.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.UI.Workbench.DynamicContextMenuService.Dispose">
            <summary>
            Disposes of the service.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.UI.Workbench.DynamicContextMenuService.Initialize">
            <summary>
            Initializes the service.  This will search through the extensions, keeping
            track of all the extensions with the provider extension point specified.
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.UI.Workbench.DynamicContextMenuService.Name">
            <summary>
            Gets the public name of the service.
            </summary>
        </member>
        <member name="T:Emergent.Toolbench.UI.Workbench.SplitButtonToolbarItem">
            <summary>
            Implements the toolbar item as a split button control. A split button
            control has both a button and a drop down list. The default action is 
            executed when the user presses the button portion and other actions may
            be specified in the drop down portion.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.UI.Workbench.SplitButtonToolbarItem.#ctor(Emergent.Toolbench.IElementData)">
            <summary>
            Initializes the split button toolbar item class. The constructor
            will also extract the actions for the drop down and the default 
            action from the specified XML configuration data.
            </summary>
            <param name="data">The toolbar item element data.</param>
        </member>
        <member name="M:Emergent.Toolbench.UI.Workbench.SplitButtonToolbarItem.CreateControl">
            <summary>
            Creates the ToolStripSplitButton control for the toolbar item.
            </summary>
            <returns>
            A ToolStripSplitButton configured to match the plug-in's 
            specification.
            </returns>
        </member>
        <member name="P:Emergent.Toolbench.UI.Workbench.SplitButtonToolbarItem.ToolTip">
            <summary>
            Get the tooltip for the button.
            </summary>
        </member>
        <member name="T:Emergent.Toolbench.UI.Workbench.CustomToggleToolbarItem">
            <summary>
            Custom toolbar control for toggling a boolean state tied to an action.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.UI.Workbench.CustomToggleToolbarItem.Initialize(Emergent.Toolbench.IElementData)">
            <summary>
            Custom initialization that reads configuration data.
            </summary>
            <param name="configData">The configuration data.</param>
        </member>
        <member name="M:Emergent.Toolbench.UI.Workbench.CustomToggleToolbarItem.CreateControl">
            <summary>
            Creates a ToolStripButton to implement the toggle UI.
            </summary>
            <returns>The configured control.</returns>
            <remarks>Derived classs should override CreateControl to set the initial button image
            and to hook an event that fires when the checked state should be updated.</remarks>
        </member>
        <member name="M:Emergent.Toolbench.UI.Workbench.CustomToggleToolbarItem.OnToolbarItemSizeChanged(System.Boolean)">
            <summary>
            Handles the toolbar icon resize event.
            </summary>
            <param name="largeIcons">True if large toolbar icons should used, else small icons.
            </param>
        </member>
        <member name="M:Emergent.Toolbench.UI.Workbench.CustomToggleToolbarItem.UpdateButtonImage">
            <summary>
            Updates the button image.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.UI.Workbench.CustomToggleToolbarItem.LoadIcon(System.String)">
            <summary>
            Loads an icon to use with the toolbar button.
            </summary>
            <param name="path">Relative path to the image file for the icon.</param>
            <returns>The loaded image.</returns>
        </member>
        <member name="T:Emergent.Toolbench.UI.Workbench.IWorkbenchWindow">
            <summary>
            Interface to a high level window created and managed by the Workbench.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.UI.Workbench.IWorkbenchWindow.CloseWorkbenchWindow">
            <summary>
            Closes the workbench window but before doing so, executes each 
            workbench exit handler. The workbench window will only be closed if
            all handlers return a value of true.
            </summary>
            <returns>True if the close operation should continue, false if the
                operation was veto'd by an exit handler.
            </returns>
        </member>
        <member name="M:Emergent.Toolbench.UI.Workbench.IWorkbenchWindow.ProcessShortcutKeysFromSubWindow(System.Windows.Forms.Keys)">
            <summary>
            Process a command key.
            </summary>
            <param name="keyData">The key data.</param>
            <returns></returns>
        </member>
        <member name="P:Emergent.Toolbench.UI.Workbench.IWorkbenchWindow.MainForm">
            <summary>
            Gets the .NET form instance for this workbench window.
            </summary>
            <returns>The window System.Windows.Forms.Form</returns>
        </member>
        <member name="F:Emergent.Toolbench.UI.Workbench.PerspectiveSelector.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.UI.Workbench.PerspectiveSelector.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Emergent.Toolbench.UI.Workbench.PerspectiveSelector.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Emergent.Toolbench.UI.Workbench.ContentHelpers">
            <summary>
            Static helper class to prevent code duplication among the different
            content operations exposed to the user through the various content
            dialogs.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.UI.Workbench.ContentHelpers.ConnectViewsAndAspects(Emergent.Toolbench.ContentService.AbstractContent)">
            <summary>
            Creates and shows the views that support the specified content.
            </summary>
            <param name="content">The content.</param>
        </member>
        <member name="M:Emergent.Toolbench.UI.Workbench.ContentHelpers.CheckForChanges(Emergent.Toolbench.ContentService.AbstractDocument)">
            <summary>
            Checks the content for whether or not the content needs saving. 
            The user is then prompted with a dialog box containing a list of 
            the files that are dirty.
            </summary>
            <param name="content">The content to check.</param>
            <returns>Returns false if the user canceled the operation else
                returns true.
            </returns>
        </member>
        <member name="M:Emergent.Toolbench.UI.Workbench.ContentHelpers.CheckForChanges(System.Collections.Generic.ICollection{Emergent.Toolbench.ContentService.AbstractDocument})">
            <summary>
            Checks each content in the collection for whether or not the 
            content needs saving. The user is then prompted with a dialog box
            containing a list of the files that are dirty.
            </summary>
            <param name="contentList">The content list.</param>
            <returns>Returns false if the user canceled the operation else
                returns true.
            </returns>
        </member>
        <member name="M:Emergent.Toolbench.UI.Workbench.ContentHelpers.CanFileBeOpened(System.String,System.Boolean)">
            <summary>
            Determines whether the specified file can be opened or not.
            </summary>
            <param name="path">The file's path. Note that as far as this function is
            concerned it can be a full or relative path, or even just a filename.
            </param>
            <param name="filterRequiresSolution">If <c>true</c>, then the function
            considers files whose content descriptor has the <c>RequiresSolution</c>
            attribute to be invalid.
            </param>
            <returns><c>true</c> if the specified file is valid for the MRU list; otherwise,
            <c>false</c>.</returns>
        </member>
        <member name="M:Emergent.Toolbench.UI.Workbench.ContentHelpers.CanContentBeOpened(Emergent.Toolbench.ContentService.IContentDescriptor,System.Boolean)">
            <summary>
            Determines whether the specified content is valid for the MRU list.
            </summary>
            <param name="contentDesc">Content descriptor.</param>
            <param name="filterRequiresSolution">If <c>true</c>, then the function
            considers content descriptors that have the <c>RequiresSolution</c>
            attribute to be invalid.
            </param>
            <returns><c>true</c> if the specified file is valid for the MRU list; otherwise,
            <c>false</c>.</returns>
        </member>
        <member name="M:Emergent.Toolbench.UI.Workbench.ContentHelpers.BuildDialogFilterString(System.Collections.ObjectModel.ReadOnlyCollection{Emergent.Toolbench.ContentService.IContentDescriptor},System.Boolean,System.Boolean)">
            <summary>
            Builds a filter string compatible with a standard windows dialog 
            based on the specified list of content descriptors and the content
            factories associated with those content descriptors.
            </summary>
            <param name="contentDescriptors">A list of content descriptors.</param>
            <param name="defaultToSolution">Flag specifying whether to default to game solution
            filter.</param>
            <param name="filterRequiresSolution">If <c>true</c>, then the function
            considers content descriptors that have the <c>RequiresSolution</c>
            attribute to be invalid.
            </param>
            <returns>A string containing the combined filter string.</returns>
        </member>
        <member name="M:Emergent.Toolbench.UI.Workbench.ContentHelpers.OpenDocumentContent(System.String)">
            <summary>
            Factories a document at the specified location and adds it to the 
            workbench.
            </summary>
            <param name="fileName">Full path to the file.</param>
        </member>
        <member name="T:Emergent.Toolbench.UI.Workbench.WorkbenchWindowForm">
            <summary>
            WorkbenchWindowForm implements the top level window displayed
            for a workbench. This class is essentially an empty window where we can
            begin to attach menubars, toolbars, views, etc... to build up the
            desired UI.
            </summary>
        </member>
        <member name="F:Emergent.Toolbench.UI.Workbench.WorkbenchWindowForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.UI.Workbench.WorkbenchWindowForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Emergent.Toolbench.UI.Workbench.WorkbenchWindowForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:Emergent.Toolbench.UI.Workbench.WorkbenchWindowForm.m_Workbench">
            <summary>
            The IWorkbench that owns this WorkbenchWindow
            </summary>
        </member>
        <member name="F:Emergent.Toolbench.UI.Workbench.WorkbenchWindowForm.m_shortcutMgr">
            <summary>
            Easy access to the ShortcutManager for translating key presses.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.UI.Workbench.WorkbenchWindowForm.#ctor(Emergent.Toolbench.UI.Workbench.IWorkbench)">
            <summary>
            Constructs a new workbench window associated with a Workbench
            instance.
            </summary>
            <param name="workbench">The owning IWorkbench for this window.
            </param>
        </member>
        <member name="M:Emergent.Toolbench.UI.Workbench.WorkbenchWindowForm.CloseWorkbenchWindow">
            <summary>
            Closes the workbench window but before doing so, executes each 
            workbench exit handler. The workbench window will only be closed if
            all handlers return a value of true.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.UI.Workbench.WorkbenchWindowForm.ProcessShortcutKeysFromSubWindow(System.Windows.Forms.Keys)">
            <summary>
            Process a command key.
            </summary>
            <param name="keyData">The key data.</param>
            <returns></returns>
        </member>
        <member name="M:Emergent.Toolbench.UI.Workbench.WorkbenchWindowForm.ProcessCmdKey(System.Windows.Forms.Message@,System.Windows.Forms.Keys)">
            <summary>
            Passes key presses to the ShortcutManager to lookup and execute
            any associated action.
            </summary>
            <param name="msg">The window message to process.</param>
            <param name="keyData">The key pressed, with any modifiers.</param>
            <returns>True if the key was processed.</returns>
        </member>
        <member name="M:Emergent.Toolbench.UI.Workbench.WorkbenchWindowForm.OnFormClosing(System.Windows.Forms.FormClosingEventArgs)">
            <summary>
            Called when the workbench window is about to close. First calls the
            exit handlers on the workbench and makes sure it is ok to continue
            closing.
            </summary>        
        </member>
        <member name="P:Emergent.Toolbench.UI.Workbench.WorkbenchWindowForm.Workbench">
            <summary>
            Property for the IWorkbench that owns this WorkbenchWindow
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.UI.Workbench.WorkbenchWindowForm.MainForm">
            <summary>
            Get the native control instance for this window
            </summary>
            <returns>The window .NET Form control</returns>
        </member>
        <member name="P:Emergent.Toolbench.UI.Workbench.WorkbenchWindowForm.ShortcutManager">
            <summary>
            Retrieves the ShortcutManager instance.
            </summary>
        </member>
        <member name="T:Emergent.Toolbench.UI.Workbench.MenuElement">
            <summary>
            Base class implementation for menu elements. The individual types of 
            menu elements (menu items, menu separators, top level menus, etc.) are 
            implemented by sub-classing this class and implementing the appropriate
            interface.
            </summary>
        </member>
        <member name="T:Emergent.Toolbench.UI.Workbench.IMenuElement">
            <summary>
            Common interface for all menu items
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.UI.Workbench.IMenuElement.CreateControl">
            <summary>
            Creates the appropriate Windows.Forms.ToolStripItem depending on 
            the the type of the menu element.
            </summary>
            <returns>The menu UI control.</returns>
        </member>
        <member name="P:Emergent.Toolbench.UI.Workbench.IMenuElement.Id">
            <summary>
            The globally unique ID for this menu element
            </summary>
            <value>The id.</value>
        </member>
        <member name="P:Emergent.Toolbench.UI.Workbench.IMenuElement.Path">
            <summary>
            The menu path location this menu element. The path allows for a 
            hierarchical organization of nest menus and menu items.
            </summary>
            <value>The path.</value>
        </member>
        <member name="P:Emergent.Toolbench.UI.Workbench.IMenuElement.Name">
            <summary>
            Gets the name of the menu element.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:Emergent.Toolbench.UI.Workbench.IMenuElement.Priority">
            <summary>
            The ordering priority for this menu element. The priority controls
            the order than menu items appear in a menu.
            </summary>
            <value>The priority.</value>
        </member>
        <member name="P:Emergent.Toolbench.UI.Workbench.IMenuElement.Type">
            <summary>
            The type of menu element this object represents.
            </summary>
            <value>The type of menu element.</value>
        </member>
        <member name="M:Emergent.Toolbench.UI.Workbench.MenuElement.#ctor(Emergent.Toolbench.IElementData,Emergent.Toolbench.UI.Workbench.IMenuElement,Emergent.Toolbench.UI.Workbench.MenuElementType)">
            <summary>
            Initializes a new instance of the <see cref="T:Emergent.Toolbench.UI.Workbench.MenuElement"/> class.
            </summary>
            <param name="elementData">The menu element data.</param>
            <param name="parent">The parent menu element</param>
            <param name="elementType">Type of the menu element.</param>
        </member>
        <member name="M:Emergent.Toolbench.UI.Workbench.MenuElement.CreateControl">
            <summary>
            Creates the appropriate Windows.Forms.ToolStripItem depending on
            the the type of the menu element.
            </summary>
            <returns>The menu UI control.</returns>
        </member>
        <member name="P:Emergent.Toolbench.UI.Workbench.MenuElement.Id">
            <summary>
            The globally unique ID for this menu element
            </summary>
            <value>The id.</value>
        </member>
        <member name="P:Emergent.Toolbench.UI.Workbench.MenuElement.Type">
            <summary>
            The type of menu element this object represents.
            </summary>
            <value>The type of menu element.</value>
        </member>
        <member name="P:Emergent.Toolbench.UI.Workbench.MenuElement.Path">
            <summary>
            The menu path location this menu element. The path allows for a
            hierarchical organization of nested menus and menu items.
            </summary>
            <value>The path.</value>
        </member>
        <member name="P:Emergent.Toolbench.UI.Workbench.MenuElement.Priority">
            <summary>
            The ordering priority for this menu element. The priority controls
            the order than menu items appear in a menu.
            </summary>
            <value>The priority.</value>
        </member>
        <member name="P:Emergent.Toolbench.UI.Workbench.MenuElement.Name">
            <summary>
            Gets the name of the menu element. Must be implemented in a 
            sub-class since names could come directly from actions in the case
            of a menu-item or from a label in the case of a top level menu.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:Emergent.Toolbench.UI.Workbench.MenuElement.Data">
            <summary>
            Gets the Extension element data for this menu item.
            </summary>
            <value>The data.</value>
        </member>
        <member name="P:Emergent.Toolbench.UI.Workbench.MenuElement.Parent">
            <summary>
            Gets the parent menu element to this one.
            </summary>
            <value>The parent menu element.  Or <code>null</code> if no parent.
            </value>
        </member>
        <member name="M:Emergent.Toolbench.UI.Workbench.MenuGroupElement.#ctor(Emergent.Toolbench.IElementData,Emergent.Toolbench.UI.Workbench.IMenuElement)">
            <summary>
            Initializes a new instance of the <see cref="T:Emergent.Toolbench.UI.Workbench.MenuGroupElement"/> 
            class. The constructor inspects the specified configuration data 
            and extracts the child menu elements from it.
            </summary>
            <param name="data">The XML element configuration data.</param>
            <param name="parent">The parent.</param>
        </member>
        <member name="M:Emergent.Toolbench.UI.Workbench.MenuGroupElement.CreateControl">
            <summary>
            Creates a Windows.Forms.ToolStripMenuItem.
            </summary>
            <returns>The menu UI control.</returns>
        </member>
        <member name="P:Emergent.Toolbench.UI.Workbench.MenuGroupElement.Name">
            <summary>
            Gets the name of the menu element where the name is the label 
            specified in the XML configuration stripped of any mnemonic 
            annotations.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:Emergent.Toolbench.UI.Workbench.MenuGroupElement.MenuElements">
            <summary>
            Gets the child menu elements.
            </summary>
            <value>The menu elements.</value>
        </member>
        <member name="T:Emergent.Toolbench.UI.Workbench.IView">
            <summary>
            Defines the interface for a view in the workbench. A view in the most 
            general sense is a panel in the workbench that is capable of both 
            viewing and editing data provided by a content provider or some
            internal state. By default, the Workbench provides an implementation of
            the view interface. <see cref="T:Emergent.Toolbench.UI.Workbench.IView"/>
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.UI.Workbench.IView.Initialize">
            <summary>
            Initializes the view using the specified configuration data. The
            configuration data is the XML data specified for the view instance.
            This allows specialized views to provide additional meta-data 
            beyond what is defined in the base view schema.
            </summary>
            <param name="configData">The XML element data.</param>
        </member>
        <member name="M:Emergent.Toolbench.UI.Workbench.IView.ConnectContent(Emergent.Toolbench.ContentService.AbstractContent)">
            <summary>
            Called when a new content object is attached or connected to a
            view. If the new content is based on an 
            <see cref="T:Emergent.Toolbench.ContentService.AbstractDocument"/> the view's title is set to match the
            filename of the related document. Note, this method must be invoked 
            explicitly by a sub-class if it is overridden. 
            </summary>
            <param name="content">The content.</param>
        </member>
        <member name="M:Emergent.Toolbench.UI.Workbench.IView.DisconnectContent">
            <summary>
            Called when the current content is disconnected from the view. This
            could happen in various situations such as when the active
            document is changed, the view is closed, the document is closed,
            etc.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.UI.Workbench.IView.Close(System.Boolean)">
            <summary>
            Notifies the view service that this view needs to be closed.
            </summary>
            <param name="checkDirty">Indicates if the content should be 
            checked for being dirty.</param>
        </member>
        <member name="M:Emergent.Toolbench.UI.Workbench.IView.OnClose(System.Boolean,System.Boolean)">
            <summary>
            Called when the view is about to close. This method allows the view
            to clean up any resources that it may be using or disconnect from
            any events it may be listening for. If this implementation is 
            overridden, users must invoke this method.
            </summary>
            <param name="closeContent">Should the content be closed.</param>
            <param name="checkDirty">If true, the content contained by the view
                is checked for dirty status (if it is an AbstractDocument) 
                and the user if prompted to save changes.
            </param>
            <returns></returns>
        </member>
        <member name="M:Emergent.Toolbench.UI.Workbench.IView.Configure(Emergent.Toolbench.UI.Workbench.ViewDescriptor)">
            <summary>
            Called by the <see cref="T:Emergent.Toolbench.UI.Workbench.IViewService"/> when the view is 
            first created. This method will parse the XML configuration data
            and set the view's properties to reflect the parsed data.
            </summary>
            <param name="entry">The config data for this view.</param>
        </member>
        <member name="M:Emergent.Toolbench.UI.Workbench.IView.ActivateAdapter">
            <summary>
            Exposes to the view a way in which it can activate its container
            so that the docked panel will move to the front and become visible.
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.UI.Workbench.IView.UniqueId">
            <summary>
            Gets the unique id for the view. All views must have a system wide
            unique identifier. This is usually the full name of the view class.
            </summary>
            <value>The unique id.</value>
        </member>
        <member name="P:Emergent.Toolbench.UI.Workbench.IView.Descriptor">
            <summary>
            Gets the view memento for this view.  A views memento is used to store information that
            the view needs to keep around in between uses by other pieces of content, if a view is
            shared by multiple pieces of content.  Between 2 pieces of content of the same type, the
            view memento will not change.
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.UI.Workbench.IView.AllowFloating">
            <summary>
            Gets a value indicating whether the view can be floating. (e.g. Not
            docked in the workbench).
            </summary>
            <value><c>true</c> if [allow floating]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Emergent.Toolbench.UI.Workbench.IView.AllowDocking">
            <summary>
            Gets a value indicating whether the view can be docked or undocked from its default
            docked position.
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.UI.Workbench.IView.Content">
            <summary>
            Gets the content object currently bound to the view.
            </summary>
            <value>The content.</value>
        </member>
        <member name="P:Emergent.Toolbench.UI.Workbench.IView.HasContent">
            <summary>
            Gets a value indicating if the view has any content.
            </summary>
            <value>A value indicating if the view has any content.</value>
        </member>
        <member name="P:Emergent.Toolbench.UI.Workbench.IView.IsDocumentView">
            <summary>
            Determines whether the view is docked in the document section of
            the workbench. The document section of the workbench operates
            differently than other views such that it must track and report
            dirty states or report messages to the user when document's are
            closed.
            </summary>
            <returns>
            True if this is a document docked view, false otherwise.
            </returns>
        </member>
        <member name="P:Emergent.Toolbench.UI.Workbench.IView.IsContentBound">
            <summary>
            Gets a value indicating if the view is content bound.  Content 
            bound views are special because they are instanced for each unique
            content instance, and while they are open do not ever switch their 
            content.
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.UI.Workbench.IView.IsPrimaryView">
            <summary>
            Checks if the current abstract view is the primary view.  If the 
            abstract view has no content then it is not the primary view.  If
            the content does not possess a primary view then the primary view
            becomes dependent upon whether or not the view is a document view.
            </summary>;
            <value><c>true</c> if the view is the primary view; otherwise, 
            <c>false</c>.</value>
        </member>
        <member name="P:Emergent.Toolbench.UI.Workbench.IView.IsValid">
            <summary>
            Gets a value indicating if the view is in a valid state.  Views typically become invalid
            after the view system is reset.
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.UI.Workbench.IView.DockAdapter">
            <summary>
            Internal method for getting or setting the dock adapter window. 
            This allows the view to refresh it's text or icon and have the tab
            or title bar redraw itself. Since those controls are actually on 
            the adapter, we need access to it.
            </summary>
            <value>The dock adapter.</value>
        </member>
        <member name="T:Emergent.Toolbench.UI.Workbench.IWorkbenchClosingHandler">
            <summary>
            This interface defines a handler for when the workbench is exiting. 
            Extensions for the workbench Shutdown extension point must implement 
            this interface.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.UI.Workbench.IWorkbenchClosingHandler.Execute">
            <summary>
            Executes an action that occurs when the workbench is shutting 
            down. 
            </summary>
            <returns>True if the shutdown process should continue, false if 
                the workbench should continue running.
            </returns>
        </member>
        <member name="M:Emergent.Toolbench.UI.Workbench.PerspectiveFactory.CreatePerspective(Emergent.Toolbench.IElementData)">
            <summary>
            Creates an instance of the proper perspective based on the type 
            attribute.  If the creation fails, a 
            <see cref="T:Emergent.Toolbench.PlatformException"/> is thrown.
            </summary>
            <param name="data">The data to create the perspective with.</param>
            <returns>A new perspective based on the data.</returns>
        </member>
        <member name="T:Emergent.Toolbench.UI.Workbench.ResetLayoutAction">
            <summary>
            This action gets the current active document and closes it along with
            it's view.
            </summary>
        </member>
        <member name="T:Emergent.Toolbench.UI.Workbench.AbstractView">
            <summary>
            Base implementation of the view interface. This class also provides a 
            form for adding UI elements to a view. Custom views must extend this 
            class to be injected into the workbench.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.UI.Workbench.AbstractView.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Emergent.Toolbench.UI.Workbench.AbstractView"/> class.
            Note, the constructor is protected since this is an abstract class.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.UI.Workbench.AbstractView.Initialize">
            <summary>
            Initializes the view using the specified configuration data. The
            configuration data is the XML data specified for the view instance.
            This allows specialized views to provide additional meta-data 
            beyond what is defined in the base view schema.
            </summary>
            <param name="configData">The XML element data.</param>
        </member>
        <member name="M:Emergent.Toolbench.UI.Workbench.AbstractView.ConnectContent(Emergent.Toolbench.ContentService.AbstractContent)">
            <summary>
            Called when a new content object is attached or connected to a
            view. If the new content is based on an 
            <see cref="T:Emergent.Toolbench.ContentService.AbstractDocument"/> the view's title is set to match the
            filename of the related document. Note, this method must be invoked 
            explicitly by a sub-class if it is overridden. 
            </summary>
            <param name="content">The content.</param>
        </member>
        <member name="M:Emergent.Toolbench.UI.Workbench.AbstractView.OnContentContextClosed(Emergent.Toolbench.ContentService.AbstractContent,Emergent.Toolbench.ContentService.ContentContext)">
            <summary>
            Make sure to disconnect the content if it is closed.
            </summary>
            <param name="sender"></param>
        </member>
        <member name="M:Emergent.Toolbench.UI.Workbench.AbstractView.OnContentConnecting(Emergent.Toolbench.ContentService.AbstractContent)">
            <summary>
            Called just before the content has been connected to the view.
            </summary>
            <param name="content">The content.</param>
        </member>
        <member name="M:Emergent.Toolbench.UI.Workbench.AbstractView.OnContentConnected(Emergent.Toolbench.ContentService.AbstractContent)">
            <summary>
            Called just after the content has been connected to the view.
            </summary>
            <param name="content">The content.</param>
        </member>
        <member name="M:Emergent.Toolbench.UI.Workbench.AbstractView.DisconnectContent">
            <summary>
            Called when the current content is disconnected from the view. This
            could happen in various situations such as when the active
            document is changed, the view is closed, the document is closed,
            etc.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.UI.Workbench.AbstractView.OnContentDisconnecting">
            <summary>
            Called just before the content is disconnected from the view.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.UI.Workbench.AbstractView.OnContentDisconnected">
            <summary>
            Called just after the content is disconnected from the view.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.UI.Workbench.AbstractView.Close(System.Boolean)">
            <summary>
            Notifies the view service that this view needs to be closed.
            </summary>
            <param name="checkDirty">Indicates if the content should be 
            checked for being dirty.</param>
        </member>
        <member name="M:Emergent.Toolbench.UI.Workbench.AbstractView.OnClose(System.Boolean,System.Boolean)">
            <summary>
            Called when the view is about to close. This method allows the view
            to clean up any resources that it may be using or disconnect from
            any events it may be listening for. If this implementation is 
            overridden, users must invoke this method.
            </summary>
            <param name="closeContent">Should the content be closed.</param>
            <param name="checkDirty">If true, the content contained by the view
                is checked for dirty status (if it is an AbstractDocument) 
                and the user if prompted to save changes.
            </param>
            <returns></returns>
        </member>
        <member name="M:Emergent.Toolbench.UI.Workbench.AbstractView.OnContentDirtyChanged(Emergent.Toolbench.ContentService.AbstractContent)">
            <summary>
            Called when the document's dirty status is changed.
            </summary>
            <param name="sender">The document that changed.</param>
        </member>
        <member name="M:Emergent.Toolbench.UI.Workbench.AbstractView.OnDocumentReadOnlyChanged(Emergent.Toolbench.ContentService.AbstractDocument)">
            <summary>
            Called when the document's read-only status is changed.
            </summary>
            <param name="sender">The document that changed.</param>
        </member>
        <member name="M:Emergent.Toolbench.UI.Workbench.AbstractView.BuildTabText(Emergent.Toolbench.ContentService.AbstractDocument)">
            <summary>
            Builds a string containing the name of the file shown by this view
            including additional tags if the document is dirty or read-only.
            </summary>
            <param name="doc"></param>
            <returns></returns>
        </member>
        <member name="M:Emergent.Toolbench.UI.Workbench.AbstractView.OnDocumentLocationChanged(Emergent.Toolbench.ContentService.AbstractDocument)">
            <summary>
            Called when the document's resource location changed. (e.g. When 
            the user saves the current document under a different file name.
            </summary>
            <param name="sender">The document that changed.</param>
        </member>
        <member name="M:Emergent.Toolbench.UI.Workbench.AbstractView.OnAdapterChanged">
            <summary>
            Called when the adapter is changed.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.UI.Workbench.AbstractView.Configure(Emergent.Toolbench.UI.Workbench.ViewDescriptor)">
            <summary>
            Called by the <see cref="T:Emergent.Toolbench.UI.Workbench.IViewService"/> when the view is 
            first created. This method will parse the XML configuration data
            and set the view's properties to reflect the parsed data.
            </summary>
            <param name="entry">The config data for this view.</param>
        </member>
        <member name="M:Emergent.Toolbench.UI.Workbench.AbstractView.OnActivated(System.EventArgs)">
            <summary>
            Called when the hosting adapter is activated.
            </summary>
            <param name="e">The event arguments</param>
        </member>
        <member name="M:Emergent.Toolbench.UI.Workbench.AbstractView.Dispose(System.Boolean)">
            <summary>
            Disconnects any content connected to the view and disposes the abstract view.
            </summary>
            <param name="disposing">Is the control being disposed.</param>
        </member>
        <member name="M:Emergent.Toolbench.UI.Workbench.AbstractView.ActivateAdapter">
            <summary>
            Exposes to the view a way in which it can activate its container
            so that the docked panel will move to the front and become visible.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.UI.Workbench.AbstractView.Reset">
            <summary>
            Resets the view, hiding it and making it invalid.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.UI.Workbench.AbstractView.Emergent#Toolbench#UI#Workbench#IView#get_IsDisposed">
            <summary>
            Base implementation of the view interface. This class also provides a 
            form for adding UI elements to a view. Custom views must extend this 
            class to be injected into the workbench.
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.UI.Workbench.AbstractView.Descriptor">
            <summary>
            Gets the view memento for this view.  A views memento is used to store information that
            the view needs to keep around.
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.UI.Workbench.AbstractView.ViewName">
            <summary>
            Gets or sets the name of the view.
            </summary>
            <value>The name of the view.</value>
        </member>
        <member name="P:Emergent.Toolbench.UI.Workbench.AbstractView.ViewText">
            <summary>
            Gets or sets the text in the view title.
            </summary>
            <value>The text of the view.</value>
        </member>
        <member name="P:Emergent.Toolbench.UI.Workbench.AbstractView.UniqueId">
            <summary>
            Gets the unique id for the view. All views must have a system wide
            unique identifier. This is usually the full name of the view class.
            </summary>
            <value>The unique id.</value>
        </member>
        <member name="P:Emergent.Toolbench.UI.Workbench.AbstractView.AllowFloating">
            <summary>
            Gets a value indicating whether the view can be floating. (e.g. Not
            docked in the workbench).
            </summary>
            <value><c>true</c> if [allow floating]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Emergent.Toolbench.UI.Workbench.AbstractView.AllowDocking">
            <summary>
            Gets a value indicating whether the view can be docked or undocked from its default
            docked position.
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.UI.Workbench.AbstractView.Content">
            <summary>
            Gets the content object currently bound to the view.
            </summary>
            <value>The content.</value>
        </member>
        <member name="P:Emergent.Toolbench.UI.Workbench.AbstractView.HasContent">
            <summary>
            Gets a value indicating if the view has any content.
            </summary>
            <value>A value indicating if the view has any content.</value>
        </member>
        <member name="P:Emergent.Toolbench.UI.Workbench.AbstractView.IsDocumentView">
            <summary>
            Determines whether the view is docked in the document section of
            the workbench. The document section of the workbench operates
            differently than other views such that it must track and report
            dirty states or report messages to the user when document's are
            closed.
            </summary>
            <returns>
            True if this is a document docked view, false otherwise.
            </returns>
        </member>
        <member name="P:Emergent.Toolbench.UI.Workbench.AbstractView.IsContentBound">
            <summary>
            Gets a value indicating if the view is content bound.  Content 
            bound views are special because they are instanced for each unique
            content instance, and while they are open do not ever switch their 
            content.
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.UI.Workbench.AbstractView.IsPrimaryView">
            <summary>
            Checks if the current abstract view is the primary view.  If the 
            abstract view has no content then it is not the primary view.  If
            the content does not possess a primary view then the primary view
            becomes dependent upon whether or not the view is a document view.
            </summary>;
            <value><c>true</c> if the view is the primary view; otherwise, 
            <c>false</c>.</value>
        </member>
        <member name="P:Emergent.Toolbench.UI.Workbench.AbstractView.IsValid">
            <summary>
            Gets a value indicating if the view is in a valid state.
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.UI.Workbench.AbstractView.DockAdapter">
            <summary>
            Internal method for getting or setting the dock adapter window. 
            This allows the view to refresh it's text or icon and have the tab
            or title bar redraw itself. Since those controls are actually on 
            the adapter, we need access to it.
            </summary>
            <value>The dock adapter.</value>
        </member>
        <member name="T:Emergent.Toolbench.UI.Workbench.ToolbarManager">
            <summary>
            Implements the IToolbarManager interface. The ToolbarManager manages toolbars defined 
            via plugin contributions.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.UI.Workbench.ToolbarManager.#ctor(System.Windows.Forms.ToolStripPanel)">
            <summary>
            Initializes a new instance of the <see cref="T:Emergent.Toolbench.UI.Workbench.ToolbarManager"/> 
            class.
            </summary>
            <param name="toolStripPanel">The tool strip panel for displaying toolbars.</param>
        </member>
        <member name="M:Emergent.Toolbench.UI.Workbench.ToolbarManager.Initialize">
            <summary>
            Allows a service to perform initialization code.
            </summary>
            <exception cref="T:Emergent.Toolbench.PlatformException">Thrown if a catastrophic error
            occurs during initialization.
            </exception>
        </member>
        <member name="M:Emergent.Toolbench.UI.Workbench.ToolbarManager.Dispose">
            <summary>
            Disposes the object
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.UI.Workbench.ToolbarManager.BuildToolbars(System.Collections.Generic.List{Emergent.Toolbench.UI.Workbench.IToolbar},System.Collections.Generic.List{Emergent.Toolbench.UI.Workbench.IToolbarItem})">
            <summary>
            Builds the toolbars.
            </summary>
            <param name="toolbarElements">The toolbar elements.</param>
            <param name="toolbarItemElements">The toolbar item elements.</param>
        </member>
        <member name="M:Emergent.Toolbench.UI.Workbench.ToolbarManager.SetToolbarVisibilty(System.String,System.Boolean)">
            <summary>
            Sets the visibility of the specified toolbar. Note, a new Windows
            Forms toolbar object will be created the first time the specified
            toolbar is made visible.
            </summary>
            <param name="toolbarName">Name of the toolbar to make visible.</param>
            <param name="visible">if set to <c>true</c> the toolbar will be displayed.</param>
        </member>
        <member name="M:Emergent.Toolbench.UI.Workbench.ToolbarManager.SetToolbarVisibilty(Emergent.Toolbench.UI.Workbench.IToolbar,System.Boolean)">
            <summary>
            Sets the visibility of the specified toolbar. Note, a new Windows Forms toolbar object 
            will be created the first time the specified toolbar is made visible.
            </summary>
            <param name="toolbar">A reference to the toolbar to make visible.</param>
            <param name="visible">if set to <c>true</c> the toolbar will be displayed.</param>
        </member>
        <member name="M:Emergent.Toolbench.UI.Workbench.ToolbarManager.GetNextToolStripPoint(System.Windows.Forms.ToolStrip)">
            <summary>
            Gets the next point to insert the new <see cref="T:System.Windows.Forms.ToolStrip"/> at.
            </summary>
            <param name="newStrip">The new <see cref="T:System.Windows.Forms.ToolStrip"/>.</param>
            <returns>The next point to insert the <see cref="T:System.Windows.Forms.ToolStrip"/> at.</returns>
        </member>
        <member name="M:Emergent.Toolbench.UI.Workbench.ToolbarManager.PopulateToolbars(System.Collections.Generic.List{Emergent.Toolbench.UI.Workbench.IToolbar})">
            <summary>
            Populates the internal toolbar dictionary with the list of 
            <see cref="T:Emergent.Toolbench.UI.Workbench.IToolbar"/> items passed in.  Toolbars with duplicate 
            names are ignored. (The first one found is used.)
            </summary>
            <param name="toolbarElements">The toolbar elements.</param>
        </member>
        <member name="M:Emergent.Toolbench.UI.Workbench.ToolbarManager.AddToolbarItems(System.Collections.Generic.List{Emergent.Toolbench.UI.Workbench.IToolbarItem})">
            <summary>
            Adds the toolbar items to their associated toolbars based on the
            toolbar item's path.
            </summary>
            <param name="toolbarItemElements">The toolbar item elements.</param>
        </member>
        <member name="P:Emergent.Toolbench.UI.Workbench.ToolbarManager.Name">
            <summary>
            Gets the name of this service. Services must have unique names.
            </summary>
            <value>Emergent.Workbench.ToolbarManager</value>
        </member>
        <member name="P:Emergent.Toolbench.UI.Workbench.ToolbarManager.Toolbars">
            <summary>
            Gets the toolbars.
            </summary>
            <value>The toolbars.</value>
        </member>
        <member name="T:Emergent.Toolbench.UI.Workbench.MenuManager">
            <summary>
            Implementation the menu manager interface. The MenuManager manages menu
            elements defined via plugin contributions.
            </summary>
        </member>
        <member name="T:Emergent.Toolbench.UI.Workbench.IMenuManager">
            <summary>
            Interface for the manager of menu contributions.
            IMenuManager implementations manage sets of IMenuElements for
            building menu bars.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.UI.Workbench.IMenuManager.BuildMenu(System.Collections.Generic.List{Emergent.Toolbench.UI.Workbench.IMenuElement})">
            <summary>
            Builds the menu from a list of IMenuElements.
            </summary>
            <param name="menuElements">The menu elements.</param>
        </member>
        <member name="P:Emergent.Toolbench.UI.Workbench.IMenuManager.MainMenu">
            <summary>
            Gets the main menu. The main menu is dynamically constructed when
            the service is initialized.
            </summary>
            <value>The main menu.</value>
        </member>
        <member name="M:Emergent.Toolbench.UI.Workbench.MenuManager.Initialize">
            <summary>
            Allows a service to perform initialization code.
            </summary>
            <exception cref="T:Emergent.Toolbench.PlatformException">Thrown is a catastrophic error
            occurs during initialization.
            </exception>
        </member>
        <member name="M:Emergent.Toolbench.UI.Workbench.MenuManager.Dispose">
            <summary>
            Disposes the object
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.UI.Workbench.MenuManager.BuildMenu(System.Collections.Generic.List{Emergent.Toolbench.UI.Workbench.IMenuElement})">
            <summary>
            Builds a new MenuStrip form control based on a list of menu 
            elements. The menus will be sorted into their correct order based 
            on the following rules. The newly built menu strip is set to the 
            MainMenu property.
            
             1. If a MenuItemElement is specified as the path target for a new 
                item, then it goes after the specified menu item. (overrides 
                priorities)
             2. Lower number "priorities" go towards the top. (no neg. numbers)
             3. All others are added to the end of the list in the order they 
                are processed.
            <seealso cref="M:Emergent.Toolbench.UI.Workbench.IMenuManager.BuildMenu(System.Collections.Generic.List{Emergent.Toolbench.UI.Workbench.IMenuElement})"/>
            </summary>
            <param name="menuElements">The menu elements used to build the 
                Windows Forms menu strip
            </param>
        </member>
        <member name="P:Emergent.Toolbench.UI.Workbench.MenuManager.Name">
            <summary>
            Gets the name of this service. Services must have unique names.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:Emergent.Toolbench.UI.Workbench.MenuManager.MainMenu">
            <summary>
            Gets the main menu. The main menu is dynamically constructed when
            the service is initialized.
            </summary>
            <value>The main menu.</value>
        </member>
        <member name="M:Emergent.Toolbench.UI.Workbench.IDragSourceAdvisor.FinishDrag(System.Windows.UIElement,System.Windows.DragDropEffects)">
            <summary>
            Finishes the drag operation.
            </summary>
            <param name="draggedElement">The dragged element.</param>
            <param name="effects">The drag and drop effects.</param>
        </member>
        <member name="M:Emergent.Toolbench.UI.Workbench.IDragSourceAdvisor.GetDataObject(System.Windows.UIElement)">
            <summary>
            Gets the data object to transfer during the drag and drop operation.
            </summary>
            <param name="draggedElement">The dragged element.</param>
            <returns></returns>
        </member>
        <member name="M:Emergent.Toolbench.UI.Workbench.IDragSourceAdvisor.IsDraggable(System.Windows.UIElement)">
            <summary>
            Determines whether the specified element is draggable.
            </summary>
            <param name="element">The element.</param>
            <returns>
                <c>true</c> if the specified element is draggable; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="P:Emergent.Toolbench.UI.Workbench.IDragSourceAdvisor.SourceUI">
            <summary>
            Gets or sets the source UI.
            </summary>
            <value>The source UI.</value>
        </member>
        <member name="P:Emergent.Toolbench.UI.Workbench.IDragSourceAdvisor.SupportedEffects">
            <summary>
            Gets the supported drag and drop effects.
            </summary>
            <value>The supported drag and drop effects.</value>
        </member>
        <member name="T:Emergent.Toolbench.UI.Workbench.DragDropManager">
            <summary>
            Provides support for drag and drop operation.
            The class exposes two attached properties to attach drag and drop advisor. Advisors are of
            type IDragSourceAdvisor or IDropTargetAdvisor and must provide the custom logic of the drag
            and drop operation. By using this class, you have no need to care about the drag and drop
            mechanism itself.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.UI.Workbench.DragDropManager.OnTargetDragEnter(System.Object,System.Windows.DragEventArgs)">
            <summary>
            Called when [target preview drag enter].
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.Windows.DragEventArgs"/> instance containing the 
            event data.</param>
        </member>
        <member name="M:Emergent.Toolbench.UI.Workbench.DragDropManager.OnTargetDragOver(System.Object,System.Windows.DragEventArgs)">
            <summary>
            Called when [target preview drag over].
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.Windows.DragEventArgs"/> instance containing the 
            event data.</param>
        </member>
        <member name="M:Emergent.Toolbench.UI.Workbench.DragDropManager.OnTargetDragLeave(System.Object,System.Windows.DragEventArgs)">
            <summary>
            Called when [target preview drag leave].
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.Windows.DragEventArgs"/> instance containing the
            event data.</param>
        </member>
        <member name="M:Emergent.Toolbench.UI.Workbench.DragDropManager.OnTargetDrop(System.Object,System.Windows.DragEventArgs)">
            <summary>
            Called when [target preview drop].
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.Windows.DragEventArgs"/> instance containing the 
            event data.</param>
        </member>
        <member name="M:Emergent.Toolbench.UI.Workbench.DragDropManager.IsDragOperation(System.Object,System.Windows.Point,System.Windows.Point)">
            <summary>
            Determines if the system must initiate a drag-and-drop operation.
            </summary>
            <param name="currentPoint">The current point.</param>
            <param name="startedPoint">The started point.</param>
            <returns>
                <c>true</c> if [is drag operation] [the specified started point]; otherwise,
            <c>false</c>.
            </returns>
        </member>
        <member name="T:Emergent.Toolbench.UI.Workbench.DynamicContextMenuEventArgs">
            <summary>
            Event arguments class for dynamic context menu events.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.UI.Workbench.DynamicContextMenuEventArgs.#ctor(System.Type,System.String,System.Collections.IEnumerable)">
            <summary>
            Initializes a new instance of the <see cref="T:Emergent.Toolbench.UI.Workbench.DynamicContextMenuEventArgs"/> class.
            </summary>
            <param name="type">The type.</param>
            <param name="key">The key.</param>
            <param name="items">The items.</param>
        </member>
        <member name="M:Emergent.Toolbench.UI.Workbench.DynamicContextMenuEventArgs.#ctor(System.Type,System.String,System.Collections.IEnumerable,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Emergent.Toolbench.UI.Workbench.DynamicContextMenuEventArgs"/> class.
            </summary>
            <param name="type">The type.</param>
            <param name="key">The key.</param>
            <param name="items">The items.</param>
            <param name="tag">The tag.</param>
        </member>
        <member name="P:Emergent.Toolbench.UI.Workbench.DynamicContextMenuEventArgs.Type">
            <summary>
            Gets the type.
            </summary>
            <value>The type.</value>
        </member>
        <member name="P:Emergent.Toolbench.UI.Workbench.DynamicContextMenuEventArgs.Key">
            <summary>
            Gets the key.
            </summary>
            <value>The key.</value>
        </member>
        <member name="P:Emergent.Toolbench.UI.Workbench.DynamicContextMenuEventArgs.Items">
            <summary>
            Gets the items.
            </summary>
            <value>The items.</value>
        </member>
        <member name="P:Emergent.Toolbench.UI.Workbench.DynamicContextMenuEventArgs.Tag">
            <summary>
            Gets the tag.
            </summary>
            <value>The tag.</value>
        </member>
        <member name="T:Emergent.Toolbench.UI.Workbench.ShortcutManager">
            <summary>
            Implements the IShortcutManager interface.  Responsible for holding
            preferred keyboard shortcuts for the user.
            </summary>
        </member>
        <member name="T:Emergent.Toolbench.UI.Workbench.IShortcutManager">
            <summary>
            Interface for managing keyboard shortcuts to actions.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.UI.Workbench.IShortcutManager.GetActiveAction(System.Windows.Forms.Keys)">
            <summary>
            Looks up the action associated with a given key combination.
            </summary>
            <param name="keys">Key combination to be evaluated.
            </param>
            <returns>IAction representing the action to be executed when the
                given key combination is pressed.
            </returns>
        </member>
        <member name="M:Emergent.Toolbench.UI.Workbench.IShortcutManager.BuildKeyString(System.Windows.Forms.Keys)">
            <summary>
            Constructs a text representation of a key combination suitable for
            display in a menu label or toolbar button tooltip.
            </summary>
            <param name="keys">Key combination to be translated to text.
            </param>
            <returns>A string describing the input key combination.
            </returns>
        </member>
        <member name="M:Emergent.Toolbench.UI.Workbench.IShortcutManager.ResetToDefaults">
            <summary>
            Removes any existing shortcuts and loads all default shortcuts
            found in the loaded plug-ins.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.UI.Workbench.IShortcutManager.LoadShortcuts">
            <summary>
            Removes any existing shortcuts and loads all user shortcuts.  If
            there is no custom shortcut settings file, default shortcuts will
            be used.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.UI.Workbench.IShortcutManager.SaveShortcuts">
            <summary>
            Writes a custom shortcut settings file with current state.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.UI.Workbench.ShortcutManager.#ctor">
            <summary>
            Constructs an instance of <see cref="T:Emergent.Toolbench.UI.Workbench.ShortcutManager"/>.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.UI.Workbench.ShortcutManager.HandleKeys(System.Windows.Forms.Keys)">
            <summary>
            Executes the action corresponding to a keyboard shortcut.
            </summary>
            <param name="keys">Key combination to be evaluated.
            </param>
            <returns>True if a shortcut exists for the input keys.
            </returns>
        </member>
        <member name="M:Emergent.Toolbench.UI.Workbench.ShortcutManager.Initialize">
            <summary>
            Loads initial shortcuts, either from personal settings or
            defaults.  This should happen before menus are constructed so they
            are built with the correct shortcut text.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.UI.Workbench.ShortcutManager.Dispose">
            <summary>
            Disposes the object
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.UI.Workbench.ShortcutManager.GetActiveAction(System.Windows.Forms.Keys)">
            <summary>
            Looks up the action associated with a given key combination.
            </summary>
            <param name="keys">Key combination to be evaluated.
            </param>
            <returns>IAction representing the action to be executed when the
                given key combination is pressed.
            </returns>
        </member>
        <member name="M:Emergent.Toolbench.UI.Workbench.ShortcutManager.BuildKeyString(System.Windows.Forms.Keys)">
            <summary>
            Constructs a text representation of a key combination suitable for
            display in a menu label or toolbar button tooltip.
            </summary>
            <param name="keys">Key combination to be translated to text.
            </param>
            <returns>A string describing the input key combination.
            </returns>
        </member>
        <member name="M:Emergent.Toolbench.UI.Workbench.ShortcutManager.ResetToDefaults">
            <summary>
            Removes any existing shortcuts and loads all default shortcuts
            found in the loaded plug-ins.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.UI.Workbench.ShortcutManager.LoadShortcuts">
            <summary>
            Removes any existing shortcuts and loads all user shortcuts.  If
            there is no custom shortcut settings file, default shortcuts will
            be used.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.UI.Workbench.ShortcutManager.SaveShortcuts">
            <summary>
            Writes a custom shortcut settings file with current state.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.UI.Workbench.ShortcutManager.GetStream(System.IO.FileMode,System.IO.FileAccess)">
            <summary>
            Opens a custom shortcut settings file stream.
            </summary>
            <param name="mode">Desired FileMode for the file stream.
            </param>
            <param name="access">Desired FileAccess for the file stream.
            </param>
            <returns>The shortcut file stream.
            </returns>
        </member>
        <member name="P:Emergent.Toolbench.UI.Workbench.ShortcutManager.Name">
            <summary>
            Gets the name of this service. Services must have unique names.
            </summary>
            <value>Emergent.Toolbench.UI.Workbench.ShortcutManager</value>
        </member>
        <member name="T:Emergent.Toolbench.UI.Workbench.IMenuFactory">
            <summary>
            Interface implemented by classes wishing to dynamically create menu 
            items. These classes can be registered as "factory" elements in an 
            action set.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.UI.Workbench.IMenuFactory.CreateMenu">
            <summary>
            Dynamically generates a menu control by populating it with items
            and returning the result.
            </summary>
            <returns>The generated menu.</returns>
        </member>
        <member name="T:Emergent.Toolbench.UI.Workbench.PerspectiveService">
            <summary>
            Defines an interface for a perspective management service. 
            Implementors handle tracking all known perspectives and managing 
            "switches" between perspectives where perspective switches entail 
            changing views, menus, toolbars, etc. depending on the perspective 
            mappings defined by plug-ins.
            </summary>
        </member>
        <member name="T:Emergent.Toolbench.UI.Workbench.IPerspectiveService">
            <summary>
            Defines an interface for a perspective management service. 
            Implementors handle tracking all known perspectives and managing 
            "switches" between perspectives where perspective switches entail 
            changing views, menus, toolbars, etc. depending on the perspective 
            mappings defined by plug-ins.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.UI.Workbench.IPerspectiveService.GetPerspective(System.String)">
            <summary>
            Looks up a perspective using its unique identifier as a key.
            </summary>
            <param name="perspId">The perspective id.</param>
            <returns>The perspective with the given identifier or 
            <value>null</value> if the perspective is not found.</returns>
        </member>
        <member name="M:Emergent.Toolbench.UI.Workbench.IPerspectiveService.GetPerspective(System.String,Emergent.Toolbench.UI.Workbench.PerspectiveType)">
            <summary>
            Looks up a perspective using its unique identifier as a key and
            the perspective type.
            </summary>
            <param name="perspId">The perspective id.</param>
            <param name="type">The perspective type.</param>
            <returns>The perspective with the given identifier or 
            <value>null</value> if the perspective is not found.</returns>
        </member>
        <member name="M:Emergent.Toolbench.UI.Workbench.IPerspectiveService.ShowDefaultPerspective">
            <summary>
            Shows the default perspective.  Which is all of the global 
            perspective items.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.UI.Workbench.IPerspectiveService.UpdateMenus">
            <summary>
            Forces the menus to refresh.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.UI.Workbench.IPerspectiveService.GetActiveLiveContentPerspectives">
            <summary>
            Gets a list of perspectives from the live content perspectives
            that are currently being used.
            </summary>
            <returns>A list of perspectives.</returns>
        </member>
        <member name="M:Emergent.Toolbench.UI.Workbench.IPerspectiveService.GetActiveContentPerspective">
            <summary>
            Gets the perspective that is being used for the active content.
            If the content is <value>null</value> or no perspective is 
            found, <value>null</value> is returned.
            </summary>
            <returns>The perspective for the active content.</returns>
        </member>
        <member name="M:Emergent.Toolbench.UI.Workbench.IPerspectiveService.GetActiveViewPerspective">
            <summary>
            Gets the perspective that is being used for the active view. If
            the view is <value>null</value> or no perspective is found, 
            <value>null</value> is returned.
            </summary>
            <returns>The perspective for the active view.</returns>
        </member>
        <member name="M:Emergent.Toolbench.UI.Workbench.IPerspectiveService.IsStateActive(System.String)">
            <summary>
            Determines whether the requested perspective state is active.
            </summary>
            <param name="state">A perspective state.</param>
            <returns>True if the perspective state is active.</returns>
        </member>
        <member name="P:Emergent.Toolbench.UI.Workbench.IPerspectiveService.GlobalPerspectives">
            <summary>
            Gets all of the global perspectives.
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.UI.Workbench.IPerspectiveService.LiveContentPerspectives">
            <summary>
            Gets all of the live content perspectives.
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.UI.Workbench.IPerspectiveService.ActiveContentPerspectives">
            <summary>
            Gets all of the active content perspectives.
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.UI.Workbench.IPerspectiveService.ActiveViewPerspectives">
            <summary>
            Gets all of the active view perspectives.
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.UI.Workbench.IPerspectiveService.IsUpdatingPerspective">
            <summary>
            Gets a value indicating if the perspective service is currently updating the views.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.UI.Workbench.PerspectiveService.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Emergent.Toolbench.UI.Workbench.PerspectiveService"/> class.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.UI.Workbench.PerspectiveService.Initialize">
            <summary>
            Scans the plug-in registry for any perspective, view, and actionset
            extensions. If any are found, the perspectives are constructed, and 
            the views and action sets are mapped to the perspective.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.UI.Workbench.PerspectiveService.VerifyViewPerspectiveMappings">
            <summary>
            Verifies that all views are mapped to at least one perspective via the extension system.
            This debug-only check catches a common problem when authoring new views.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.UI.Workbench.PerspectiveService.LoadPerspectives">
            <summary>
            Loads the perspectives from the extension registry.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.UI.Workbench.PerspectiveService.LoadPerspectiveMappings">
            <summary>
            Loads the perspective mappings from the extension registry.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.UI.Workbench.PerspectiveService.LoadPerspectiveMapping(Emergent.Toolbench.IElementData)">
            <summary>
            Loads the perspective mapping specified as an IElementData
            containing the mapping information. The mapped actionset, views, 
            etc. are added to the configured perspective instance.
            </summary>
            <param name="mappingElement">The perspective mapping extension 
                element
            </param>
        </member>
        <member name="M:Emergent.Toolbench.UI.Workbench.PerspectiveService.Dispose">
            <summary>
            Disposes the object
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.UI.Workbench.PerspectiveService.GetPerspective(System.String)">
            <summary>
            Looks up a perspective using its unique identifier as a key.
            </summary>
            <param name="perspId">The perspective id.</param>
            <returns>The perspective with the given identifier or 
            <value>null</value> if the perspective is not found.</returns>
        </member>
        <member name="M:Emergent.Toolbench.UI.Workbench.PerspectiveService.GetPerspective(System.String,Emergent.Toolbench.UI.Workbench.PerspectiveType)">
            <summary>
            Looks up a perspective using its unique identifier as a key and
            the perspective type.
            </summary>
            <param name="perspId">The perspective id.</param>
            <param name="type">The perspective type.</param>
            <returns>The perspective with the given identifier or 
            <value>null</value> if the perspective is not found.</returns>
        </member>
        <member name="M:Emergent.Toolbench.UI.Workbench.PerspectiveService.ShowDefaultPerspective">
            <summary>
            Shows the default perspective.  Which is all of the global 
            perspective items.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.UI.Workbench.PerspectiveService.GetActiveLiveContentPerspectives">
            <summary>
            Gets a list of perspectives from the live content perspectives
            that are currently being used.
            </summary>
            <returns>A list of perspectives.</returns>
        </member>
        <member name="M:Emergent.Toolbench.UI.Workbench.PerspectiveService.GetActiveContentPerspective">
            <summary>
            Gets the perspective that is being used for the active content.
            If the content is <value>null</value> or no perspective is 
            found, <value>null</value> is returned.
            </summary>
            <returns>The perspective for the active content.</returns>
        </member>
        <member name="M:Emergent.Toolbench.UI.Workbench.PerspectiveService.GetActiveViewPerspective">
            <summary>
            Gets the perspective that is being used for the active view. If
            the view is <value>null</value> or no perspective is found, 
            <value>null</value> is returned.
            </summary>
            <returns>The perspective for the active view.</returns>
        </member>
        <member name="M:Emergent.Toolbench.UI.Workbench.PerspectiveService.OnContentOpening(System.Object,Emergent.Toolbench.ContentService.ContentOpeningEventArgs)">
            <summary>
            Called when the content is opening.
            </summary>
            <param name="resourcePath">The resource path to the content.</param>
            <param name="context">The context the content is being opened in.</param>
            <param name="args">The cancel event arguments.</param>
        </member>
        <member name="M:Emergent.Toolbench.UI.Workbench.PerspectiveService.UpdateMenus">
            <summary>
            Forces the menus to refresh.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.UI.Workbench.PerspectiveService.IsStateActive(System.String)">
            <summary>
            Determines whether the requested perspective state is active.
            </summary>
            <param name="state">A perspective state.</param>
            <returns>True if the perspective state is active.</returns>
        </member>
        <member name="P:Emergent.Toolbench.UI.Workbench.PerspectiveService.IsUpdatingPerspective">
            <summary>
            Gets or sets a value indicating if the perspective service is 
            currently updating.  This used to prevent cyclic code.
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.UI.Workbench.PerspectiveService.Name">
            <summary>
            Gets the name of this service. Services must have unique names.
            </summary>
            <value>Emergent.Toolbench.Workbench.PerspectiveManager</value>
        </member>
        <member name="P:Emergent.Toolbench.UI.Workbench.PerspectiveService.GlobalPerspectives">
            <summary>
            Gets all of the global perspectives.
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.UI.Workbench.PerspectiveService.LiveContentPerspectives">
            <summary>
            Gets all of the live content perspectives.
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.UI.Workbench.PerspectiveService.ActiveContentPerspectives">
            <summary>
            Gets all of the active content perspectives.
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.UI.Workbench.PerspectiveService.ActiveViewPerspectives">
            <summary>
            Gets all of the active view perspectives.
            </summary>
        </member>
        <member name="T:Emergent.Toolbench.UI.Workbench.InteropDragDropExtensions">
            <summary>
            Provides extension for drag and drop between WPF and windows form controls.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.UI.Workbench.InteropDragDropExtensions.SafeGetData``1(System.Windows.Forms.IDataObject)">
            <summary>
            GetData method on System.Windows.Forms.IDataObject always return null when the data come
            from WPF drag-and-drop operation even if GetDataPresent return true. It is also 
            possible to see the data in the debugger view. 
            This extension try to get the data with System.Windows.Forms.IDataObject.GetData method 
            and use reflection to get a System.Windows.IDataObject if the first attempt has failed.
            </summary>
            <typeparam name="T">Format of the data to retrieve.</typeparam>
            <param name="data">A System.Windows.Forms.IDataObject object.</param>
            <returns>The data of format T.</returns>
        </member>
        <member name="T:Emergent.Toolbench.UI.Workbench.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.UI.Workbench.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.UI.Workbench.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.UI.Workbench.Properties.Resources.AskForMigrationMsg">
             <summary>
               Looks up a localized string similar to The content document &lt;{0}&gt; or some dependent documents need to be migrated. Make sure all the related files are writable on disk.
            Note: if the migration is refused, the document won&apos;t open.
            
            Do you want to proceed with the migration process?.
             </summary>
        </member>
        <member name="P:Emergent.Toolbench.UI.Workbench.Properties.Resources.AskForMigrationTitle">
            <summary>
              Looks up a localized string similar to Migration required.
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.UI.Workbench.Properties.Resources.CanNotFindPerspectivesForContent">
            <summary>
              Looks up a localized string similar to Can not find any perspectives for the content type &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.UI.Workbench.Properties.Resources.ContentOpenedByAnotherEditor">
            <summary>
              Looks up a localized string similar to This content has already been opened by another editor..
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.UI.Workbench.Properties.Resources.FileWriteProtectedErrorMessage">
            <summary>
              Looks up a localized string similar to The file {0} cannot saved because it is write-protected. Try saving the file to a different location instead..
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.UI.Workbench.Properties.Resources.OverwriteFileMessage">
             <summary>
               Looks up a localized string similar to The following file is write-protected. Do you want to overwrite it?
            
            {0}.
             </summary>
        </member>
        <member name="P:Emergent.Toolbench.UI.Workbench.Properties.Resources.OverwriteFileTitle">
            <summary>
              Looks up a localized string similar to File overwrite confirmation.
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.UI.Workbench.Properties.Resources.PerspectiveActionSetNotFound">
            <summary>
              Looks up a localized string similar to Attempting to load the perspective &quot;{0}&quot;; unable to locate the actionset &quot;{1}&quot;..
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.UI.Workbench.Properties.Resources.PerspectiveExtensionPointNotFound">
            <summary>
              Looks up a localized string similar to Could not locate the perspective extension point in the extension registry..
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.UI.Workbench.Properties.Resources.PerspectiveMappingExtensionPointNotFound">
            <summary>
              Looks up a localized string similar to Could not locate the perspective mapping extension point in the extension registry..
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.UI.Workbench.Properties.Resources.PerspectiveMappingUnknownPerspective">
            <summary>
              Looks up a localized string similar to Encountered perspective mapping for unknown perspective: &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.UI.Workbench.Properties.Resources.PerspectiveViewNotFound">
            <summary>
              Looks up a localized string similar to Attempting to load the perspective &quot;{0}&quot;; unable to locate the view &quot;{1}&quot;..
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.UI.Workbench.Properties.Resources.ReopenFileDialogText">
             <summary>
               Looks up a localized string similar to {0}
            
            This file has been modified outside of the source editor.  Do you want to reload it? (You can not undo this operation.).
             </summary>
        </member>
        <member name="P:Emergent.Toolbench.UI.Workbench.Properties.Resources.ReopenFileDialogTitle">
            <summary>
              Looks up a localized string similar to Toolbench.
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.UI.Workbench.Properties.Resources.ReorderList">
            <summary>
              Looks up a localized string similar to Reorder list.
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.UI.Workbench.Properties.Resources.SaveFileErrorMessage">
            <summary>
              Looks up a localized string similar to An error occured during the save operation. See the output view for details..
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.UI.Workbench.Properties.Resources.SaveFileErrorTitle">
            <summary>
              Looks up a localized string similar to Save file error.
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.UI.Workbench.Properties.Resources.UnmappedViewWarning">
            <summary>
              Looks up a localized string similar to View {0} is not mapped to any perspectives. Use the Emergent.Toolbench.Workbench.PerspectiveMapping extension point to enable the view..
            </summary>
        </member>
        <member name="T:Emergent.Toolbench.UI.Workbench.ExpandedInfoDialogResult">
            <summary>
            Enumeration for the results possible with the ExpandedInfoDialog
            </summary>
        </member>
        <member name="F:Emergent.Toolbench.UI.Workbench.ExpandedInfoDialogResult.Yes">
            <summary>
            Yes option.
            </summary>
        </member>
        <member name="F:Emergent.Toolbench.UI.Workbench.ExpandedInfoDialogResult.No">
            <summary>
            No option.
            </summary>
        </member>
        <member name="F:Emergent.Toolbench.UI.Workbench.ExpandedInfoDialogResult.YesToAll">
            <summary>
            Yes to All option.
            </summary>
        </member>
        <member name="F:Emergent.Toolbench.UI.Workbench.ExpandedInfoDialogResult.NoToAll">
            <summary>
            No to all option.
            </summary>
        </member>
        <member name="T:Emergent.Toolbench.UI.Workbench.ExpandedInfoDialog">
            <summary>
            Interaction logic for ExpandedInfoDialog.xaml
            The ExpandedInfoDialog provides more options than the standard message box - 
            specifically, Yes To All and No to All.
            </summary>
            <summary>
            ExpandedInfoDialog
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.UI.Workbench.ExpandedInfoDialog.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.UI.Workbench.ExpandedInfoDialog.#ctor(System.String,System.String)">
            <summary>
            Constructor which sets the dialog title and text.
            </summary>
            <param name="title">Title of the dialog</param>
            <param name="text">Text of the dialog</param>
        </member>
        <member name="M:Emergent.Toolbench.UI.Workbench.ExpandedInfoDialog.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.UI.Workbench.ExpandedInfoDialog.Result">
            <summary>
            Gets sets the expanded result.
            </summary>
        </member>
        <member name="T:Emergent.Toolbench.UI.Workbench.ActionSetService">
            <summary>
            Implements the IActionSetManager interface.
            </summary>
        </member>
        <member name="T:Emergent.Toolbench.UI.Workbench.IActionSetService">
            <summary>
            Interface to the manger class for IActionSets.
            
            An ActionSet groups together a set of Menus and Toolbars and links them 
            with Action handlers which service events from the Menu and Toolbar UI 
            elements.  ActionSets are attached to Perspectives to add ActionSets
            menu and toolbar elements to that perspective. The manager will create 
            and manage IActionSet instances. (with their associated Action, MenuItem, 
            ToolbarItem elements)
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.UI.Workbench.IActionSetService.GetActionSet(System.String)">
            <summary>
            Gets the action set based on the id.
            </summary>
            <param name="actionSetId">The action set id.</param>
            <returns>The action set or <value>null</value> if it can not be found.</returns>
        </member>
        <member name="M:Emergent.Toolbench.UI.Workbench.IActionSetService.GetAction(System.String)">
            <summary>
            Get the action based on the id.
            </summary>
            <param name="actionId">The action id.</param>
            <returns>The action or <value>null</value> if it can not be found.</returns>
        </member>
        <member name="P:Emergent.Toolbench.UI.Workbench.IActionSetService.ActionSets">
            <summary>
            Gets the all available action sets.
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.UI.Workbench.IActionSetService.Actions">
            <summary>
            Gets the all available action sets.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.UI.Workbench.ActionSetService.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Emergent.Toolbench.UI.Workbench.ActionSetService"/> 
            class.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.UI.Workbench.ActionSetService.Initialize">
            <summary>
            Initializes the ActionSetManager by reading in all the ActionsSet 
            extension contributions and creating ActionsSet instances for each.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.UI.Workbench.ActionSetService.Dispose">
            <summary>
            Disposes the object
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.UI.Workbench.ActionSetService.GetActionSet(System.String)">
            <summary>
            Gets the action set based on the id.
            </summary>
            <param name="actionSetId">The action set id.</param>
            <returns>The action set or <value>null</value> if it can not be found.</returns>
        </member>
        <member name="M:Emergent.Toolbench.UI.Workbench.ActionSetService.GetAction(System.String)">
            <summary>
            Get the action based on the id.
            </summary>
            <param name="actionId">The action id.</param>
            <returns>The action or <value>null</value> if it can not be found.</returns>
        </member>
        <member name="P:Emergent.Toolbench.UI.Workbench.ActionSetService.Name">
            <summary>
            Gets the name of this service. Services must have unique names.
            </summary>
            <value>"Workbench.ActionSetManager"</value>
        </member>
        <member name="P:Emergent.Toolbench.UI.Workbench.ActionSetService.ActionSets">
            <summary>
            Gets the all available action sets.
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.UI.Workbench.ActionSetService.Actions">
            <summary>
            Gets the all available action sets.
            </summary>
        </member>
        <member name="T:Emergent.Toolbench.UI.Workbench.CloseAction">
            <summary>
            The action to be taken when the view is closed.
            </summary>
        </member>
        <member name="T:Emergent.Toolbench.UI.Workbench.ViewDescriptor">
            <summary>
            A container class to hold parsed information about views.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.UI.Workbench.ViewDescriptor.#ctor(Emergent.Toolbench.IElementData)">
            <summary>
            Constructs a <see cref="T:Emergent.Toolbench.UI.Workbench.ViewDescriptor"/> with the configData found in
            the plug-in manifest.
            </summary>
            <param name="configData">The config data that was found in the
            plug-in manifest.</param>
        </member>
        <member name="M:Emergent.Toolbench.UI.Workbench.ViewDescriptor.CreateView">
            <summary>
            Creates a new instance of the view.
            </summary>
            <returns>The view that was created.</returns>
        </member>
        <member name="P:Emergent.Toolbench.UI.Workbench.ViewDescriptor.UniqueId">
            <summary>
            Gets the unique id for the view entry.
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.UI.Workbench.ViewDescriptor.Name">
            <summary>
            Gets the name of the view entry.
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.UI.Workbench.ViewDescriptor.Class">
            <summary>
            Gets the class that is used to construct an instance of the view.
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.UI.Workbench.ViewDescriptor.IsContentBound">
            <summary>
            Gets a value indicating if this view is content bound.  Content 
            bound views are special because once constructed they are only
            connected to a single piece of content, and the views are not
            shared between content.  An example would be a view you expect to 
            be used as a document.
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.UI.Workbench.ViewDescriptor.DefaultVisibility">
            <summary>
            Gets the default visibility for this view.
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.UI.Workbench.ViewDescriptor.DefaultDocking">
            <summary>
            Gets the default docking of the view.
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.UI.Workbench.ViewDescriptor.Image">
            <summary>
            Gets the image of the view if one exists, if no image was assigned
            <value>null</value> is returned.
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.UI.Workbench.ViewDescriptor.Icon">
            <summary>
            Gets the image of the view if one exists in an icon format, if no 
            image was assigned <value>null</value> is returned.
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.UI.Workbench.ViewDescriptor.AllowFloat">
            <summary>
            Gets a value indicating if the view is allowed to float.
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.UI.Workbench.ViewDescriptor.AllowDocking">
            <summary>
            Gets a value indicating whether the view can be docked or undocked from its default
            docked position.
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.UI.Workbench.ViewDescriptor.CloseAction">
            <summary>
            Gets a value indicating if the view should be closed when hidden.
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.UI.Workbench.ViewDescriptor.DefaultWidth">
            <summary>
            Gets a value indicating the default width of a view
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.UI.Workbench.ViewDescriptor.DefaultHeight">
            <summary>
            Gets a value indicating the default height of a view
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.UI.Workbench.ViewDescriptor.DefaultLocationX">
            <summary>
            Gets a value indicating the default position of the view according to the x axis
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.UI.Workbench.ViewDescriptor.DefaultLocationY">
            <summary>
            Gets a value indicating the default position of the view according to the y axis
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.UI.Workbench.ViewDescriptor.IsDocumentView">
            <summary>
            Gets a value indicating if the view is document docked.
            </summary>
        </member>
        <member name="T:Emergent.Toolbench.UI.Workbench.MenuSeparatorElement">
            <summary>
            MenuSeparator represents a menu item that displays a separator line
            in a menu hierarchy.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.UI.Workbench.MenuSeparatorElement.CreateControl">
            <summary>
            Creates a Windows.Forms.ToolStripSeparator.
            </summary>
            <returns>The menu UI control</returns>
        </member>
        <member name="P:Emergent.Toolbench.UI.Workbench.MenuSeparatorElement.Name">
            <summary>
            Gets the name of the menu element. In the case of a menu separator,
            we just need a unique placeholder name which we can generate.
            </summary>
            <value>The name.</value>
        </member>
        <member name="T:Emergent.Toolbench.UI.Workbench.SetActiveContentAction">
            <summary>
            This action gets the current active document and closes it along with
            it's view.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.UI.Workbench.SetActiveContentAction.Execute(Emergent.Toolbench.Actions.ExecutionContext,Emergent.Toolbench.Actions.ExecutionStyle)">
            <summary>
            Closes the active document prompting the user to save changes if
            the document is dirty.
            </summary>        
            <param name="context">The execution context of the action.</param>
            <param name="style">The execution style of the action.</param>
        </member>
        <member name="M:Emergent.Toolbench.UI.Workbench.SetActiveContentAction.ToXml">
            <summary>
            Converts the specified action's data into XML form.
            </summary>
            <returns>An XML node that describes the action.</returns>
        </member>
        <member name="M:Emergent.Toolbench.UI.Workbench.SetActiveContentAction.FromXml(System.Xml.Linq.XElement)">
            <summary>
            Extracts the necessary action data from the specified XML data.
            </summary>
            <param name="node">Top level XML node containing the action's 
            data.</param>
        </member>
        <member name="P:Emergent.Toolbench.UI.Workbench.SetActiveContentAction.Description">
            <summary>
            Gets a description used to display information about the serializable
            action to the user.
            </summary>
            <value>The label.</value>
        </member>
        <member name="P:Emergent.Toolbench.UI.Workbench.SetActiveContentAction.IsSerializable">
            <summary>
            Gets a value indicating if the action is serializable.  Use this
            if your action can potentially become non-serializable based on
            input conditions.
            </summary>
        </member>
        <member name="T:Emergent.Toolbench.UI.Workbench.AbstractViewAdapter">
            <summary>
            This classes serves as a wrapper to the internal docking system. This 
            allows views to act independently of the underlying docking system
            should it be changed in the future.
            </summary>
        </member>
        <member name="F:Emergent.Toolbench.UI.Workbench.AbstractViewAdapter.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.UI.Workbench.AbstractViewAdapter.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Emergent.Toolbench.UI.Workbench.AbstractViewAdapter.#ctor(Emergent.Toolbench.UI.Workbench.IView)">
            <summary>
            Initializes a new instance of the <see cref="T:Emergent.Toolbench.UI.Workbench.IViewAdapter"/> 
            class.
            </summary>
            <param name="view">The view wrapped by the adapter.</param>
        </member>
        <member name="M:Emergent.Toolbench.UI.Workbench.AbstractViewAdapter.OnFormClosing(System.Windows.Forms.FormClosingEventArgs)">
            <summary>
            Called when the form is about to close and if the underlying
            <see cref="T:Emergent.Toolbench.UI.Workbench.IView"/> does not veto the close operation, will
            raise the OnClosing event.
            </summary>        
        </member>
        <member name="M:Emergent.Toolbench.UI.Workbench.AbstractViewAdapter.GetPersistString">
            <summary>
            Gets the persistent string used when saving the current docking
            state to an external configuration file.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Emergent.Toolbench.UI.Workbench.AbstractViewAdapter.Configure(Emergent.Toolbench.UI.Workbench.IView)">
            <summary>
            Sets the default window dock mask.
            </summary>
            <param name="dockState">Default docking state.</param>
            <param name="allowFloat">True if the view can float or false if the
            view must be docked in the workbench.
            </param>
        </member>
        <member name="M:Emergent.Toolbench.UI.Workbench.AbstractViewAdapter.UpdateHideOrCloseStatus">
            <summary>
            Updates the hide or close indicator on the view.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.UI.Workbench.AbstractViewAdapter.OnActivityChange">
            <summary>
            Called when the application idles after the view has been (de)activated.
            </summary>
            <remarks>
            Using the dispatcher adds a small amount of latency to the OnActivated and OnDeactivate
            events, preventing them from being fired during a layout change until the view comes to
            a steady state.
            </remarks>
        </member>
        <member name="P:Emergent.Toolbench.UI.Workbench.AbstractViewAdapter.InternalView">
            <summary>
            Gets the internal view wrapped by the adapter.
            </summary>
            <value>The internal view.</value>
        </member>
        <member name="P:Emergent.Toolbench.UI.Workbench.AbstractViewAdapter.UniqueId">
            <summary>
            Gets the unique id of the adapter which maps to the unique id of 
            the internal view it contains.
            </summary>
            <value>The unique id.</value>
        </member>
        <member name="P:Emergent.Toolbench.UI.Workbench.AbstractViewAdapter.DefaultFloatingBounds">
            <summary>
            Gets a rectangle defining the adapter default size and position for a floating window
            This will be used to display any floating window that does not already have a float 
            pane assigned to it (as is the case when loading a saved layout)
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.UI.Workbench.AbstractViewAdapter.Title">
            <summary>
            Gets or sets the title for the window hosting the abstract view.
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.UI.Workbench.AbstractViewAdapter.Text">
            <summary>
            Gets or sets the text value of the adapter where the text value is
            propagated to and from the internal view.
            </summary>
            <value>The text.</value>
        </member>
        <member name="T:Emergent.Toolbench.UI.Workbench.Plugin">
            <summary>
            Handles startup and shutdown operations for the Workbench plug-in.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.UI.Workbench.Plugin.Start">
            <summary>
            Runs startup logic for the plug-in when it is activated.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.UI.Workbench.Plugin.Stop">
            <summary>
            Runs shutdown logic for the plug-in when the application is closing.
            </summary>
        </member>
        <member name="T:Emergent.Toolbench.UI.Workbench.ViewService">
            <summary>
            This class manages all of the views that were defined in the plug-in 
            registry. Views are create from the appropriate plug-in on demand or 
            when the view is first displayed. The view manager interacts with the
            perspective manager to filter views by perspective as well as persist 
            the state of views. The view manager is also responsible for 
            interacting with the underlying docking framework such that views may 
            be docked in a given perspective.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.UI.Workbench.ViewService.#ctor(WeifenLuo.WinFormsUI.Docking.DockPanel,System.Windows.Forms.Form)">
            <summary>
            Initializes the <see cref="T:Emergent.Toolbench.UI.Workbench.ViewService"/> class.
            <param name="dockParent">The root docking control. Depending on the
                active perspective, the views are docked according to the
                user's configuration.
            </param>
            <param name="mainForm">The application form.</param> 
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.UI.Workbench.ViewService.Initialize">
            <summary>
            Initializes the view manager by search the extension registry for
            any views that have been defined by the plug-ins.
            </summary>              
        </member>
        <member name="M:Emergent.Toolbench.UI.Workbench.ViewService.Dispose">
            <summary>
            Disposes the object
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.UI.Workbench.ViewService.CreateView(System.String)">
            <summary>
            Creates the specified view thus activating the plug-in in which the
            view is located if it is not already activated.
            </summary>
            <param name="viewUniqueId"></param>
            <returns></returns>
        </member>
        <member name="M:Emergent.Toolbench.UI.Workbench.ViewService.CreateView(Emergent.Toolbench.UI.Workbench.ViewDescriptor)">
            <summary>
            Creates the specified view thus activating the plug-in in which the
            view is located if it is not already activated.
            </summary>
            <param name="entry">The view entry to activate.</param>
        </member>
        <member name="M:Emergent.Toolbench.UI.Workbench.ViewService.CreateOrFindView(System.String)">
            <summary>
            Finds or creates the view if it can not be found.
            </summary>
            <param name="viewUniqueId">The unique view id.</param>
            <returns>The view found or created.</returns>
        </member>
        <member name="M:Emergent.Toolbench.UI.Workbench.ViewService.CreateOrFindView(Emergent.Toolbench.UI.Workbench.ViewDescriptor)">
            <summary>
            Finds or creates the view if it can not be found.
            </summary>
            <param name="descriptor">The view descriptor.</param>
            <returns>The view found or created.</returns>
        </member>
        <member name="M:Emergent.Toolbench.UI.Workbench.ViewService.FindViews(System.String)">
            <summary>
            Gets all the view instances created from the view class of the
            specified unique id. Note, if the plug-in containing the view's
            code needs loading, this method will invoke that process prior to
            creating the view.
            </summary>
            <param name="viewUniqueId">The view unique id.</param>
            <returns>A collection of view instances or null if none were found.
            </returns>
        </member>
        <member name="M:Emergent.Toolbench.UI.Workbench.ViewService.FindViews(Emergent.Toolbench.ContentService.AbstractContent)">
            <summary>
            Gets a collection of views that are currently viewing some portion
            of the specified content.
            </summary>
            <param name="content">The content.</param>
            <returns>
            A collection of views using the specified content.
            </returns>
        </member>
        <member name="M:Emergent.Toolbench.UI.Workbench.ViewService.ShowView(System.String)">
            <summary>
            Shows the view matching the specified unique id. If the view is
            not found an error is logged.
            </summary>
            <param name="viewUniqueId">The view unique identifier.</param>
        </member>
        <member name="M:Emergent.Toolbench.UI.Workbench.ViewService.ShowView(Emergent.Toolbench.UI.Workbench.IView)">
            <summary>
            Shows the specified view.
            </summary>
            <param name="toShow">View to open or make visible.</param>
        </member>
        <member name="M:Emergent.Toolbench.UI.Workbench.ViewService.HideView(System.String)">
            <summary>
            Hides all views matching the specified unique id. If the view is
            not found an error is logged.
            </summary>
            <param name="viewUniqueId">The view unique identifier.</param>
        </member>
        <member name="M:Emergent.Toolbench.UI.Workbench.ViewService.HideView(Emergent.Toolbench.UI.Workbench.IView)">
            <summary>
            Hides the specified view.
            </summary>
            <param name="toHide">View to hide.</param>
        </member>
        <member name="M:Emergent.Toolbench.UI.Workbench.ViewService.SetViewContentActive(Emergent.Toolbench.UI.Workbench.IView)">
            <summary>
            Sets the views content to be the active content in the content
            service if the view has content.
            </summary>
            <param name="view">The view.</param>
        </member>
        <member name="M:Emergent.Toolbench.UI.Workbench.ViewService.CloseView(Emergent.Toolbench.UI.Workbench.IView,System.Boolean,System.Boolean)">
            <summary>
            Closes the specified view. When closing the view, this method will
            call its OnClose method and destroy the window containing the 
            view.
            </summary>
            <param name="toClose">View to close.</param>
            <param name="closeContent">Should the content be closed.</param>
            <param name="checkDirty">Should dirty content be checked for 
            saving.</param>
        </member>
        <member name="M:Emergent.Toolbench.UI.Workbench.ViewService.MakeViewVisible(Emergent.Toolbench.UI.Workbench.IView)">
            <summary>
            Makes the view visible and have focus.
            </summary>
            <param name="view">The view.</param>
        </member>
        <member name="M:Emergent.Toolbench.UI.Workbench.ViewService.GetViewDescriptor(System.String)">
            <summary>
            Gets the view info for a unique if it exists.
            </summary>
            <param name="viewUniqueId">The unique view Id.</param>
            <returns>The view entry.</returns>
        </member>
        <member name="M:Emergent.Toolbench.UI.Workbench.ViewService.IsViewVisible(System.String)">
            <summary>
            Checks if all views with the given view unique id are visible.
            </summary>
            <param name="viewUniqueId">The unique view Id.</param>
            <returns><c>true</c> if the view is visible; otherwie, <c>false</c>.</returns>
        </member>
        <member name="M:Emergent.Toolbench.UI.Workbench.ViewService.IsViewVisible(Emergent.Toolbench.UI.Workbench.IView)">
            <summary>
            Checks if the view is visible.
            </summary>
            <param name="view">The view.</param>
            <returns><c>true</c> if the view is visible; otherwie, <c>false</c>.</returns>
        </member>
        <member name="M:Emergent.Toolbench.UI.Workbench.ViewService.IsDocumentView(System.String)">
            <summary>
            Determines whether or not the specified view is a document view 
            meaning its default dock property is set to Document.
            </summary>
            <param name="viewUniqueId">The views unique id.</param>
            <returns><c>true</c> if the view is document docked; otherwise, 
            <c>false</c>.</returns>
        </member>
        <member name="M:Emergent.Toolbench.UI.Workbench.ViewService.IsContentBoundView(System.String)">
            <summary>
            Checks if the view is content bound.
            </summary>
            <param name="viewUniqueId">The views unique id.</param>
            <returns><c>true</c> if the view is content bound; otherwise, 
            <c>false</c>.</returns>
        </member>
        <member name="M:Emergent.Toolbench.UI.Workbench.ViewService.IsViewInstanced(System.String)">
            <summary>
            Checks if a view matching the unique id has been instanced.
            </summary>
            <param name="viewUniqueId">The views unique id.</param>
            <returns><c>true</c> if the view has been instanced; otherwise, 
            <c>false</c>.</returns>
        </member>
        <member name="M:Emergent.Toolbench.UI.Workbench.ViewService.IsViewInstancedWithContent(System.String,Emergent.Toolbench.ContentService.AbstractContent)">
            <summary>
            Checks if a particular type of view contains the content.
            </summary>
            <param name="viewId">The view id.</param>
            <param name="content">The content to check.</param>
            <returns><c>true</c> if there exists a view matching the provided 
            id with the content; otherwise, <c>false</c>.</returns>
        </member>
        <member name="P:Emergent.Toolbench.UI.Workbench.ViewService.Name">
            <summary>
            Gets the name of this service. Services must have unique names.
            </summary>
            <value>"Workbench.IViewService"</value>
        </member>
        <member name="P:Emergent.Toolbench.UI.Workbench.ViewService.ActiveView">
            <summary>
            The active view is the view that currently has focus.
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.UI.Workbench.ViewService.ActiveDocumentView">
            <summary>
            Gets the currently active document view, if there is no active 
            document view <value>null</value> is returned.
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.UI.Workbench.ViewService.InstancedViews">
            <summary>
            Gets an array of all instanced views.
            </summary>
        </member>
        <member name="T:Emergent.Toolbench.UI.Workbench.ViewService.Persistor">
            <summary>
            
            </summary>
            <remarks>
            External Code
            
            This code originally came from the DockPanel persister used with WeifenLuo but we 
            needed a specialized version for Toolbench.  So instead of saving to just a file
            we load the current state of the UI into persistable structs that are used to restore
            state between content switches and when launching a new instance of Toolbench.
            </remarks>
        </member>
        <member name="T:Emergent.Toolbench.UI.Workbench.CustomToolbarItemFactory">
            <summary>
            This class creates a toolbar item that is a single button in the 
            toolbar.
            </summary>
        </member>
        <member name="T:Emergent.Toolbench.UI.Workbench.ContextMenuProviderDescriptor">
            <summary>
            Manages information about a context menu provider.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.UI.Workbench.ContextMenuProviderDescriptor.#ctor(Emergent.Toolbench.IElementData)">
            <summary>
            Constructor to create a provider description given the manifest information.
            </summary>
            <param name="data">The manifest XML data.</param>
        </member>
        <member name="M:Emergent.Toolbench.UI.Workbench.ContextMenuProviderDescriptor.Create">
            <summary>
            Creates a context menu provider based on this descriptor.
            </summary>
            <returns>The created provider.</returns>
        </member>
        <member name="M:Emergent.Toolbench.UI.Workbench.ContextMenuProviderDescriptor.ToString">
            <summary>
            Gets the string representation of the provider.
            </summary>
            <returns>The name of the provider.</returns>
        </member>
        <member name="P:Emergent.Toolbench.UI.Workbench.ContextMenuProviderDescriptor.Name">
            <summary>
            Gets the name of the provider.
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.UI.Workbench.ContextMenuProviderDescriptor.Type">
            <summary>
            Gets the type of item the provider will provide a menu for.
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.UI.Workbench.ContextMenuProviderDescriptor.Key">
            <summary>
            Gets the key of item the provider will provide a menu for.
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.UI.Workbench.ContextMenuProviderDescriptor.Class">
            <summary>
            Gets the name of the class implementing IDynamicContextMenuProvider that does
            the providing of the context menu based on the item type.
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.UI.Workbench.ContextMenuProviderDescriptor.Priority">
            <summary>
            Gets the priority of a dynamic context menu provider.  This affects how the menu item 
            group will sort compared to the other groups of dynamic context menu items.  Priority 
            can be positive or negative.  The more positive the priority the closer to the top it 
            will be, the more negative it is, the closer it will be to the bottom.
            </summary>
        </member>
        <member name="T:Emergent.Toolbench.UI.Workbench.CloseContentAction">
            <summary>
            This action gets the current active document and closes it along with
            it's view.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.UI.Workbench.CloseContentAction.Execute(Emergent.Toolbench.Actions.ExecutionContext,Emergent.Toolbench.Actions.ExecutionStyle)">
            <summary>
            Closes the active document prompting the user to save changes if
            the document is dirty.
            </summary>        
            <param name="context">The execution context of the action.</param>
            <param name="style">The execution style of the action.</param>
        </member>
        <member name="M:Emergent.Toolbench.UI.Workbench.CloseContentAction.ToXml">
            <summary>
            Converts the specified action's data into XML form.
            </summary>
            <returns>An XML node that describes the action.</returns>
        </member>
        <member name="M:Emergent.Toolbench.UI.Workbench.CloseContentAction.FromXml(System.Xml.Linq.XElement)">
            <summary>
            Extracts the necessary action data from the specified XML data.
            </summary>
            <param name="node">Top level XML node containing the action's 
            data.</param>
        </member>
        <member name="P:Emergent.Toolbench.UI.Workbench.CloseContentAction.IsSerializable">
            <summary>
            Gets a value indicating if the action is serializable.  Use this
            if your action can potentially become non-serializable based on
            input conditions.
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.UI.Workbench.CloseContentAction.Description">
            <summary>
            Gets a description used to display information about the serializable
            action to the user.
            </summary>
            <value>The label.</value>
        </member>
        <member name="T:Emergent.Toolbench.UI.Workbench.ActionSet">
            <summary>
            Implements the action set interface. Action sets are loaded from data 
            based on extensions located in plug-ins registered by the Platform.
            </summary>
        </member>
        <member name="T:Emergent.Toolbench.UI.Workbench.IActionSet">
            <summary>
            Interface to action sets which collect menus and toolbars
            into groups which can be added to perspectives.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.UI.Workbench.IActionSet.GetAction(System.String)">
            <summary>
            Gets an action proxy for the specified action.
            
            An action proxy can be registered as an event handler for an action.  The proxy
            object delays the loading of the actual event handling code until the first time
            action is actually run.
            </summary>
            <param name="actionId">The id of the action to get a proxy for</param>
            <returns>An proxy handler for the specified action</returns>
        </member>
        <member name="P:Emergent.Toolbench.UI.Workbench.IActionSet.Id">
            <summary>
            Gets the id of the action set.
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.UI.Workbench.IActionSet.Label">
            <summary>
            Gets the label of the action set.
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.UI.Workbench.IActionSet.IsVisible">
            <summary>
            Gets a value indicating if the action set should be visible to the user.
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.UI.Workbench.IActionSet.Menus">
            <summary>
            Gets the menus defined for this action set
            </summary>
            <value>The action set menus</value>
        </member>
        <member name="P:Emergent.Toolbench.UI.Workbench.IActionSet.Toolbars">
            <summary>
            Gets the toolbars defined for this action set
            </summary>
            <value>The action set toolbars</value>
        </member>
        <member name="P:Emergent.Toolbench.UI.Workbench.IActionSet.ToolbarItems">
            <summary>
            Gets the toolbar items defined for this action set
            </summary>
            <value>The action set toolbar items.</value>
        </member>
        <member name="P:Emergent.Toolbench.UI.Workbench.IActionSet.StatusbarItems">
            <summary>
            Gets the statusbar items defined for this action set
            </summary>
            <value>The action set statusbar items.</value>
        </member>
        <member name="P:Emergent.Toolbench.UI.Workbench.IActionSet.Actions">
            <summary>
            Gets the actions defined in this action set
            </summary>
            <value>The action set actions.</value>
        </member>
        <member name="P:Emergent.Toolbench.UI.Workbench.IActionSet.ElementData">
            <summary>
            Gets the configuration element data for this action.
            </summary>
            <value>The action configuration element data.</value>
        </member>
        <member name="F:Emergent.Toolbench.UI.Workbench.ActionSet.EXTENSION_ELEMENT_ATTR_ACTIONSET_ID">
            <summary>
            The name for the element data containing the ActionsSet ID.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.UI.Workbench.ActionSet.#ctor(Emergent.Toolbench.IElementData)">
            <summary>
            Constructs a new ActionSet from an extension IElementData instance.
            The constructor walks all the "action" and "menu" entries in the
            IElementData and generates lists from these child elements.
            </summary>
            <param name="data">The XML configuration data retrieved from the 
                action set extension.
            </param>
        </member>
        <member name="M:Emergent.Toolbench.UI.Workbench.ActionSet.GetAction(System.String)">
            <summary>
            Gets an action based on the action Id.
            </summary>
            <param name="actionId">The action Id</param>
            <returns></returns>
        </member>
        <member name="M:Emergent.Toolbench.UI.Workbench.ActionSet.ExtractMenus(Emergent.Toolbench.IElementData)">
            <summary>
            Inspects the configuration data for menu related definitions and 
            creates/registers the appropriate sub-classed menu elements.
            </summary>
            <param name="data">The data.</param>
        </member>
        <member name="M:Emergent.Toolbench.UI.Workbench.ActionSet.ExtractToolbars(Emergent.Toolbench.IElementData)">
            <summary>
            Inspects the configuration data for toolbar related definitions and 
            creates/registers the appropriate sub-classed toolbar elements.
            </summary>
            <param name="data">The data.</param>
        </member>
        <member name="M:Emergent.Toolbench.UI.Workbench.ActionSet.ExtractToolbarItems(Emergent.Toolbench.IElementData)">
            <summary>
            Inspects the configuration data for toolbar item related 
            definitions and crates/registers the appropriate sub-classed 
            toolbar item elements.
            </summary>
            <param name="data">The data.</param>
        </member>
        <member name="P:Emergent.Toolbench.UI.Workbench.ActionSet.Id">
            <summary>
            Gets the id of the action set.
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.UI.Workbench.ActionSet.Label">
            <summary>
            Gets the label of the action set.
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.UI.Workbench.ActionSet.IsVisible">
            <summary>
            Gets a value indicating if the action set should be visible to the user.
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.UI.Workbench.ActionSet.Menus">
            <summary>
            Gets the menus defined for this action set
            </summary>
            <value>The action set menus</value>
        </member>
        <member name="P:Emergent.Toolbench.UI.Workbench.ActionSet.Toolbars">
            <summary>
            Gets the toolbars defined for this action set
            </summary>
            <value>The action set toolbars</value>
        </member>
        <member name="P:Emergent.Toolbench.UI.Workbench.ActionSet.ToolbarItems">
            <summary>
            Gets the toolbar items defined for this action set
            </summary>
            <value>The action set toolbar items.</value>
        </member>
        <member name="P:Emergent.Toolbench.UI.Workbench.ActionSet.StatusbarItems">
            <summary>
            Gets the statusbar items defined for this action set
            </summary>
            <value>The action set statusbar items.</value>
        </member>
        <member name="P:Emergent.Toolbench.UI.Workbench.ActionSet.Actions">
            <summary>
            Gets the actions defined in this action set
            </summary>
            <value>The action set actions.</value>
        </member>
        <member name="P:Emergent.Toolbench.UI.Workbench.ActionSet.ElementData">
            <summary>
            Gets the element data.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.UI.Workbench.MenuItemElement.#ctor(Emergent.Toolbench.IElementData,Emergent.Toolbench.UI.Workbench.IMenuElement)">
            <summary>
            Initializes a new instance of the <see cref="T:Emergent.Toolbench.UI.Workbench.MenuItemElement"/> 
            class. The constructor extracts the action attribute from the XML 
            menu item definition.
            </summary>
            <param name="data">The configuration data.</param>
            <param name="parent">The parent menu element to this one.</param>
        </member>
        <member name="M:Emergent.Toolbench.UI.Workbench.MenuItemElement.CreateControl">
            <summary>
            Creates Windows.Forms.ToolStripItem control.
            </summary>
            <returns>The menu UI control.</returns>
        </member>
        <member name="M:Emergent.Toolbench.UI.Workbench.MenuItemElement.LoadActionProxy">
            <summary>
            Gets the action proxy and caches it on the menu item element. 
            </summary>
            <returns>An action interface for this menu item element or null if
                it could not be resolved.
            </returns>
        </member>
        <member name="P:Emergent.Toolbench.UI.Workbench.MenuItemElement.Name">
            <summary>
            Gets the name of the menu element where the name of a menu item is
            the label of the underlying action with any mnemonics stripped from
            it.
            </summary>
            <value>The name.</value>
        </member>
        <member name="T:Emergent.Toolbench.UI.Workbench.DynamicFormContextMenuItem">
            <summary>
            Contains context menu item information needed by the DynamicContextMenuService
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.UI.Workbench.DynamicFormContextMenuItem.#ctor(System.Windows.Forms.ToolStripItem)">
            <summary>
            Constructor which sets the WPF menu item
            </summary>
            <param name="menuItem">The menu item. If null, this is a separator.</param>
        </member>
        <member name="P:Emergent.Toolbench.UI.Workbench.DynamicFormContextMenuItem.MenuItem">
            <summary>
            Gets/sets the menu item. If the menuitem is null, this item should be a separator.
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.UI.Workbench.DynamicFormContextMenuItem.IsSeparator">
            <summary>
            Determine whether or not this menuitem is a seperator
            </summary>
        </member>
        <member name="T:Emergent.Toolbench.UI.Workbench.FormContextMenuProviderDescriptor">
            <summary>
            Manages information about a context menu provider.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.UI.Workbench.FormContextMenuProviderDescriptor.#ctor(Emergent.Toolbench.IElementData)">
            <summary>
            Constructor to create a provider description given the manifest information.
            </summary>
            <param name="data">The manifest XML data.</param>
        </member>
        <member name="M:Emergent.Toolbench.UI.Workbench.FormContextMenuProviderDescriptor.Create">
            <summary>
            Creates a context menu provider based on this descriptor.
            </summary>
            <returns>The created provider.</returns>
        </member>
        <member name="M:Emergent.Toolbench.UI.Workbench.FormContextMenuProviderDescriptor.ToString">
            <summary>
            Gets the string representation of the provider.
            </summary>
            <returns>The name of the provider.</returns>
        </member>
        <member name="P:Emergent.Toolbench.UI.Workbench.FormContextMenuProviderDescriptor.Name">
            <summary>
            Gets the name of the provider.
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.UI.Workbench.FormContextMenuProviderDescriptor.Type">
            <summary>
            Gets the type of item the provider will provide a menu for.
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.UI.Workbench.FormContextMenuProviderDescriptor.Key">
            <summary>
            Gets the key of item the provider will provide a menu for.
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.UI.Workbench.FormContextMenuProviderDescriptor.Class">
            <summary>
            Gets the name of the class implementing IDynamicContextMenuProvider that does
            the providing of the context menu based on the item type.
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.UI.Workbench.FormContextMenuProviderDescriptor.Priority">
            <summary>
            Gets the priority of a dynamic context menu provider.  This affects how the menu item 
            group will sort compared to the other groups of dynamic context menu items.  Priority 
            can be positive or negative.  The more positive the priority the closer to the top it 
            will be, the more negative it is, the closer it will be to the bottom.
            </summary>
        </member>
        <member name="T:Emergent.Toolbench.UI.Workbench.SplashController">
            <summary>
            Access class for starting up and shutting down a splash screen.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.UI.Workbench.SplashController.Open">
            <summary>
            Create and show the splash screen.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.UI.Workbench.SplashController.Close">
            <summary>
            Close the splash screen.
            </summary>
        </member>
        <member name="T:Emergent.Toolbench.UI.Workbench.UIApplication">
            <summary>
            This class is the main entry point for toolbench based applications
            which use the workbench UI. This class is registered as an 
            "application" extension contribution and is called soon after building 
            the plug-in and extension registry.
            </summary>   
        </member>
        <member name="M:Emergent.Toolbench.UI.Workbench.UIApplication.Run(Emergent.Toolbench.Arguments)">
            <summary>
            Initializes and runs the workbench UI
            
            Run(), will create and the Workbench instance and add it as a service.
            Then it obtains a reference to the window form and passes it to a
            standard Application.Run() message pump to open and run the form.
            
            The does not return as long as the application is running.
            </summary>
            <param name="args">The arguments.</param>
            <returns>0 on successful workbench creation, else 1.</returns>
        </member>
        <member name="M:Emergent.Toolbench.UI.Workbench.IStatusbarItem.CreateControl">
            <summary>
            Creates the Windows.Forms control for the status bar item. 
            </summary>
            <returns>The Windows.Forms control. Depending on the control 
                sub-class, this may be a regular toolbar button, or a 
                combo-box, drop down button, etc.
            </returns>
        </member>
        <member name="P:Emergent.Toolbench.UI.Workbench.IStatusbarItem.Id">
            <summary>
            Gets the unique id of the status bar item.
            </summary>
            <value>The unique id.</value>
        </member>
        <member name="P:Emergent.Toolbench.UI.Workbench.IStatusbarItem.ElementData">
            <summary>
            Gets the XML configuration data for the toolbar item.
            </summary>
            <value>The element data.</value>
        </member>
        <member name="P:Emergent.Toolbench.UI.Workbench.IStatusbarItem.ToolTip">
            <summary>
            Gets the tool tip for the status bar item.
            </summary>
            <value>The tool tip.</value>
        </member>
        <member name="T:Emergent.Toolbench.UI.Workbench.StatusbarManager">
            <summary>
            Implements the IStatusbarManager interface. The StatusbarManager 
            manages status bar items defined in plug-in manifests.
            </summary>
        </member>
        <member name="T:Emergent.Toolbench.UI.Workbench.PerspectiveElement">
            <summary>
            The perspective element provides information about the perspective item
            being mapped to a particular perspective.
            </summary>
        </member>
        <member name="T:Emergent.Toolbench.UI.Workbench.Workbench">
            <summary>
            Internal implementation of the IWorkbench interface. This class 
            implements the workbench functionality for the Toolbench framework and
            is not intended to be constructed or sub-classed by users.
            </summary>
        </member>
        <member name="T:Emergent.Toolbench.UI.Workbench.IWorkbench">
            <summary>
            This interface defines the contract with the main application UI
            workbench.
            
            The Toolbench workbench creates and manages the main UI framework.
            It creates the main window and connects it with various perspectives,
            menubars, toolbars, and other UI resources.  The toolbench also
            controls the startup/shutdown of the UI system including the 
            save/load of current window and view preferences.
            
            IWorkbench represents the interface for interacting with the workbench.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.UI.Workbench.IWorkbench.GetActiveWindow">
            <summary>
            Gets the current active workbench window. Once initialized, the 
            workbench will always have one (and only one) active window.
            </summary>
            <returns>A reference to the active workbench window instance
            </returns>
        </member>
        <member name="M:Emergent.Toolbench.UI.Workbench.IWorkbench.Refresh">
            <summary>
            Refreshes the workbench layout and display. Causes the workbench 
            window menu bar to be updated.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.UI.Workbench.IWorkbench.ShutDown">
            <summary>
            Shuts down the workbench. Before shutting down all extensions that
            have hooked to the shutdown extension point are executed. Note,
            the extensions could veto the shutdown operation.
            </summary>
            <returns>False of the shutdown process should be halted, true if 
                the workbench may continue shutting down.
            </returns>
        </member>
        <member name="P:Emergent.Toolbench.UI.Workbench.IWorkbench.RendererHandle">
            <summary>
            Gets the handle that should be used to start a renderer in Toolbench.  This
            handle will point to a 1x1 window that never changes that exists for the lifetime of
            Workbench.
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.UI.Workbench.IWorkbench.IsShuttingDown">
            <summary>
            Gets a value indicating whether the workbench is shutting down.
            </summary>
            <value>
                <c>true</c> if the workbench is shutting down; otherwise, 
                <c>false</c>.
            </value>
        </member>
        <member name="P:Emergent.Toolbench.UI.Workbench.IWorkbench.ActiveDocument">
            <summary>
            Gets or sets the current active top-level document to show on the
            active window's title bar. This is usually the game solution.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.UI.Workbench.Workbench.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Emergent.Toolbench.UI.Workbench.Workbench"/> class.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.UI.Workbench.Workbench.Initialize">
            <summary>
            Initialize the workbench to create all the required UI elements and 
            managers.  This creates the main window instance for the workbench 
            UI display.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.UI.Workbench.Workbench.Dispose">
            <summary>
            Disposes the object
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.UI.Workbench.Workbench.Refresh">
            <summary>
            Refreshes the workbench layout and display. Causes the workbench
            window menu bar to be updated.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.UI.Workbench.Workbench.BuildToolbars">
            <summary>
            Initializes the toolbar manager with the <see cref="T:Emergent.Toolbench.UI.Workbench.IToolbar"/> 
            and <see cref="T:Emergent.Toolbench.UI.Workbench.IToolbarItem"/> elements from all the action sets.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.UI.Workbench.Workbench.GetActiveWindow">
            <summary>
            Gets the current active workbench window. Once initialized, the 
            workbench will always have one (and only one) active window.
            </summary>
            <returns>
            A reference to the active workbench window instance.
            </returns>
        </member>
        <member name="M:Emergent.Toolbench.UI.Workbench.Workbench.ShutDown">
            <summary>
            Shuts down the workbench. Before shutting down all extensions that
            have hooked to the shutdown extension point are executed. Note,
            the extensions could veto the shutdown operation.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.UI.Workbench.Workbench.OnFileChanged(Emergent.Toolbench.FileSystemMonitor.PathChangedEventArgs)">
            <summary>
            Queues a list of changed code files so that when Toolbench comes back into focus,
            those files can be reloaded.
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Emergent.Toolbench.UI.Workbench.Workbench.OnMainFormActivated(System.Object,System.EventArgs)">
            <summary>
            When the main form comes back into focus, all files which were edited externally
            potentially need to be reopened.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Emergent.Toolbench.UI.Workbench.Workbench.OpenCodeDocumentInPlace(System.Object)">
            <summary>
            Opens a code document in place without breaking any links to that document
            and also while ensuring the doc is not marked as dirty.
            </summary>
            <param name="argsObj"></param>
        </member>
        <member name="P:Emergent.Toolbench.UI.Workbench.Workbench.Name">
            <summary>
            Gets the name of this service. Services must have unique names.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:Emergent.Toolbench.UI.Workbench.Workbench.RendererHandle">
            <summary>
            Gets the handle that should be used to start a renderer in Toolbench; this
            handle will point to a 1x1 window that never changes.
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.UI.Workbench.Workbench.IsShuttingDown">
            <summary>
            Gets a value indicating whether the workbench is shutting down.
            </summary>
            <value>
                <c>true</c> if the workbench is shutting down; otherwise, 
                <c>false</c>.
            </value>
        </member>
        <member name="P:Emergent.Toolbench.UI.Workbench.Workbench.ActiveDocument">
            <summary>
            Gets or sets the current active top-level document to show on the
            active window's title bar. This is usually the game solution.
            </summary>
        </member>
        <member name="T:Emergent.Toolbench.UI.Workbench.MenuFactoryElement">
            <summary>
            Menu element for generating custom menus via an IMenuFactory
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.UI.Workbench.MenuFactoryElement.#ctor(Emergent.Toolbench.IElementData,Emergent.Toolbench.UI.Workbench.IMenuElement)">
            <summary>
            Initializes a new instance of the <see cref="T:Emergent.Toolbench.UI.Workbench.MenuFactoryElement"/> class.
            </summary>
            <param name="data">The menu element data.</param>
            <param name="parent">The parent menu element.</param>
        </member>
        <member name="M:Emergent.Toolbench.UI.Workbench.MenuFactoryElement.CreateControl">
            <summary>
            Using the underlying menu factory, this method will ask the factory
            for its menu.
            </summary>
            <returns>The menu control generated by the menu factory.</returns>
        </member>
        <member name="P:Emergent.Toolbench.UI.Workbench.MenuFactoryElement.Name">
            <summary>
            Gets the name of the menu element. The name of the menu factory is
            its label that will appear in its parent menu.
            </summary>
            <value>The name.</value>
        </member>
        <member name="T:Emergent.Toolbench.UI.Workbench.MenuBuilder">
            <summary>
            The MenuBuilder class is a helper class that takes a list of 
            IMenuElements and renders them into a complete Windows Form MenuStrip 
            which can be attached to a main window.
            
            The MenuBuilder performs the following steps to create the MenuStrip.
              1. Sorts the IMenuElements into lists based on the elements "depth" 
                 in the menu hierarchy. (this eases ordering the elements as we can
                 do it from the top down)
              2. Uses the "depth" sort above to create a temporary menu tree (using
                 an internal helper class) that is properly sorted and ordered.
              3. Renders the temporary menu tree into the Windows Form MenuStrip 
                 object.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.UI.Workbench.MenuBuilder.ConstructMenuDepthSort(System.Collections.Generic.List{Emergent.Toolbench.UI.Workbench.IMenuElement})">
            <summary>
            Sorts menu elements by their menu path "depth". This method orders 
            the supplied IMenuElement objects into groups of menus at various 
            "depths" in the menu hierarchy.
            </summary>
            <param name="menuElements">List of menu elements to sort.</param>
            <returns>Sorted list of menu elements.</returns>
        </member>
        <member name="M:Emergent.Toolbench.UI.Workbench.MenuBuilder.AddMenuDepthElement(Emergent.Toolbench.UI.Workbench.IMenuElement,System.Collections.Generic.List{System.Collections.Generic.List{Emergent.Toolbench.UI.Workbench.IMenuElement}})">
            <summary>
            Adds a menuElement into the depth sort list based on its menu path.
            </summary>
            <param name="menuElement">The new element to add to the depth sort 
                list.</param>
            <param name="depthSort">Depth sort list with which to add the new 
                element.
            </param>
        </member>
        <member name="M:Emergent.Toolbench.UI.Workbench.MenuBuilder.ConstructMenuTree(System.Collections.Generic.List{System.Collections.Generic.List{Emergent.Toolbench.UI.Workbench.IMenuElement}})">
            <summary>
            Converts a "depth" sorted list of IMenuElements into a hierarchical
            tree of MenuBuilderHelper objects which mirrors the the menu 
            layout. Menu paths and priorities are used to determine the proper 
            locations for the depth sorted list of IMenuElement items.
            </summary>
            <param name="depthSort">A "depth" sorted list of IMenuElement 
                objects.
            </param>
        </member>
        <member name="M:Emergent.Toolbench.UI.Workbench.MenuBuilder.AddSortedMenuElement(Emergent.Toolbench.UI.Workbench.MenuBuilder.MenuBuilderHelper,System.Collections.Generic.List{Emergent.Toolbench.UI.Workbench.MenuBuilder.MenuBuilderHelper})">
            <summary>
            Adds an new MenuBuilderHelper element to a list based on the 
            priority.
            </summary>
            <param name="newMenuHelper">The new MenuBuilerHElper element to 
                add.
            </param>
            <param name="menuHelperList">The list with which to add the new 
                element.
            </param>
        </member>
        <member name="M:Emergent.Toolbench.UI.Workbench.MenuBuilder.ConstructMenuControls(System.Collections.Generic.List{Emergent.Toolbench.UI.Workbench.MenuBuilder.MenuBuilderHelper})">
            <summary>
            Renders a list of MenuBuilderHelper objects into MenuStrip form 
            control. The list is assumed to be sorted into the order in which 
            the menu items should appear on the menu bar.
            </summary>
            <param name="menuHelperList">List of MenuBuilerHelpers to convert 
                into menu controls.
            </param>
            <returns>MenuStrip based on the supplied MenuBuilderHelper list.
            </returns>
        </member>
        <member name="T:Emergent.Toolbench.UI.Workbench.MenuBuilder.MenuBuilderHelper">
            <summary>
            Internal helper class used to create the temporary sorted/ordered
            menu tree. The MenuBuilderHelper maintains the sorted/order list of 
            sub-children for each menu element. MenuBuilerHelper is able to 
            render itself (and any child elements it has) into a 
            ToolStripMenuItem when requested.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.UI.Workbench.MenuBuilder.MenuBuilderHelper.#ctor(Emergent.Toolbench.UI.Workbench.IMenuElement)">
            <summary>
            Construct a new MenuBuilderHelper based on a IMenuElement
            </summary>
            <param name="menuElement">Menu element with which to construct
                the builder.
            </param>
        </member>
        <member name="M:Emergent.Toolbench.UI.Workbench.MenuBuilder.MenuBuilderHelper.AddMenuElement(Emergent.Toolbench.UI.Workbench.IMenuElement)">
            <summary>
            Adds a child menu element to this MenuBuilderHelper. The 
            element is inserted into the list of child elements based on 
            its menu path and priority. This may mean that the new element 
            actually gets added one of the child elements by calling 
            AddMenuElement on the child.
            </summary>
            <param name="menuElement">The new child element to add.</param>
        </member>
        <member name="M:Emergent.Toolbench.UI.Workbench.MenuBuilder.MenuBuilderHelper.CreateMenuControl">
            <summary>
            Creates a Windows Forms menu control based the configuration 
            info for this MenuBuilderHelper. If this MenuBuilderHelper 
            represents a menu "group" (which may contain sub-menu items) 
            then all the child elements are created and attached to the new 
            menu control.
            </summary>
            <returns>Menu control based on this MenuBuilderHelper</returns>
        </member>
        <member name="P:Emergent.Toolbench.UI.Workbench.MenuBuilder.MenuBuilderHelper.Name">
            <summary>
            The name of the menu element for the MenuBuilderHelper
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.UI.Workbench.MenuBuilder.MenuBuilderHelper.MenuElement">
            <summary>
            The underlying MenuElement for this MenuBuilderHelper
            </summary>
        </member>
        <member name="T:Emergent.Toolbench.UI.Workbench.PerspectiveType">
            <summary>
            An enum of the supported perspective types.
            </summary>
        </member>
        <member name="F:Emergent.Toolbench.UI.Workbench.PerspectiveType.Unknown">
            <summary>
            The Unknown perspective type is used when the type is invalid.
            </summary>
        </member>
        <member name="F:Emergent.Toolbench.UI.Workbench.PerspectiveType.Global">
            <summary>
            The Global perspective type is used for perspectives that are
            always viewable.
            </summary>
        </member>
        <member name="F:Emergent.Toolbench.UI.Workbench.PerspectiveType.LiveContent">
            <summary>
            The Live Content perspective is for showing views and actions
            based on the condition that a type of content is open, but not 
            that it is necessarily actively being edited.
            </summary>
        </member>
        <member name="F:Emergent.Toolbench.UI.Workbench.PerspectiveType.ActiveContent">
            <summary>
            The Active Content perspective is for perspectives that need to be
            shown only when a piece of content is actively being edited.
            </summary>
        </member>
        <member name="F:Emergent.Toolbench.UI.Workbench.PerspectiveType.ActiveView">
            <summary>
            The Active View perspective is for perspectives that need to be
            shown only when a specific view is actively being used.
            </summary>
        </member>
        <member name="T:Emergent.Toolbench.UI.Workbench.RadioButtonToolbarItem">
            <summary>
            This class creates a toolbar item that is a radio button in the 
            toolbar. When it is checked (and the action fires), all other
            buttons in its group appear unchecked.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.UI.Workbench.RadioButtonToolbarItem.CreateControl">
            <summary>
            Creates and returns the ToolStripItem that represents this button.
            </summary>
            <returns>A ToolStripButton suitable for inclusion in ToolStrips.</returns>
        </member>
        <member name="M:Emergent.Toolbench.UI.Workbench.RadioButtonToolbarItem.HandleMouseEnter(System.Object,System.EventArgs)">
            <summary>
            Handles the MouseEnter event for the ToolStripButton control by
            updating tooltip text to reflect any assigned keyboard shortcut.
            </summary>        
        </member>
        <member name="P:Emergent.Toolbench.UI.Workbench.RadioButtonToolbarItem.ToolTip">
            <summary>
            Get the tooltip for the button.
            </summary>
        </member>
        <member name="T:Emergent.Toolbench.UI.Workbench.ComboBoxToolbarItem">
            <summary>
            This implementation a toolbar item adds support for combo boxes in 
            workbench toolbars.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.UI.Workbench.ComboBoxToolbarItem.#ctor(Emergent.Toolbench.IElementData)">
            <summary>
            Initializes a new instance of the <see cref="T:Emergent.Toolbench.UI.Workbench.ComboBoxToolbarItem"/> 
            class.
            </summary>
            <param name="data">The XML configuration data.</param>
            <param name="parent">The parent element.</param>
        </member>
        <member name="M:Emergent.Toolbench.UI.Workbench.ComboBoxToolbarItem.CreateControl">
            <summary>
            Creates a combo-box tool strip item with the actions defined in the 
            XML configuration data.
            </summary>
            <returns> The combo-box tool strip item.
            </returns>
        </member>
        <member name="M:Emergent.Toolbench.UI.Workbench.ComboBoxToolbarItem.OnComboSelectionChanged(System.Object,System.EventArgs)">
            <summary>
            Called when an entry in the combo box associated with this toolbar
            item has changed.
            </summary>        
        </member>
        <member name="T:Emergent.Toolbench.UI.Workbench.MenuElementType">
            <summary>
            Enumeration of the supported MenuElement types
            </summary>
        </member>
        <member name="T:Emergent.Toolbench.UI.Workbench.DynamicContextMenuItem">
            <summary>
            Contains context menu item information needed by the DynamicContextMenuService
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.UI.Workbench.DynamicContextMenuItem.#ctor(System.Windows.Controls.MenuItem)">
            <summary>
            Constructor which sets the WPF menu item
            </summary>
            <param name="menuItem">The menu item. If null, this is a separator.</param>
        </member>
        <member name="M:Emergent.Toolbench.UI.Workbench.DynamicContextMenuItem.#ctor(System.Windows.Controls.MenuItem,System.String)">
            <summary>
            Constructor which sets the WPF menu item along with the items path.  The path
            indicates the submenu in a context menu this item should appear using file path
            notation.  For instance, to make a menu item show up in Add->Items, the path
            should be Add/Items
            </summary>
            <param name="menuItem">The menu item.  If null, this is a separator.</param>
            <param name="path">The path.</param>
        </member>
        <member name="P:Emergent.Toolbench.UI.Workbench.DynamicContextMenuItem.MenuItem">
            <summary>
            Gets/sets the menu item. If the menuitem is null, this item should be a separator.
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.UI.Workbench.DynamicContextMenuItem.Path">
            <summary>
            Gets/sets the path.  The path indicates the submenu in a context menu this 
            item should appear using file path notation.  For instance, to make a menu item 
            show up in Add->Items, the path should be Add/Items
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.UI.Workbench.DynamicContextMenuItem.IsSeparator">
            <summary>
            Determine whether or not this menuitem is a seperator
            </summary>
        </member>
        <member name="T:Emergent.Toolbench.UI.Workbench.ReorderableListBoxDragDropAdvisor">
            <summary>
            Add drag and drop support to reorder elements inside a ListBox or a ListView.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.UI.Workbench.ReorderableListBoxDragDropAdvisor.ComputeItemsPanelRect">
            <summary>
            Computes the items panel rect.
            </summary>
            <returns>The Rect of the items panel.</returns>
            <remarks>In the case of a list view, using the render region of the control
            includes the header and the scrollbars, which is not what we want. This methods
            returns only the Rect of the region where the items are displayed, excluding every
            element that may appear around.</remarks>
        </member>
        <member name="T:Emergent.Toolbench.UI.Workbench.IDynamicContextMenuProvider">
            <summary>
            Interface for a class that contributes items to a dynamic context menu.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.UI.Workbench.IDynamicContextMenuProvider.CreateItems(Emergent.Toolbench.UI.Workbench.DynamicContextMenuEventArgs)">
            <summary>
            Creates the menu items.
            </summary>
            <param name="e">The event arguments.</param>
            <returns>The list of menu items.</returns>
        </member>
        <member name="T:Emergent.Toolbench.UI.Workbench.CloseAllContentAction">
            <summary>
            Closes all open content.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.UI.Workbench.CloseAllContentAction.Execute(Emergent.Toolbench.Actions.ExecutionContext,Emergent.Toolbench.Actions.ExecutionStyle)">
            <summary>
            Closes all content and their associated views prompting the user
            if any open content has been marked dirty.
            </summary>
            <param name="context">The execution context of the action.</param>
            <param name="style">The execution style of the action.</param>
        </member>
    </members>
</doc>
