<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Emergent.Toolbench.EntityModeling</name>
    </assembly>
    <members>
        <member name="T:Emergent.Toolbench.EntityModeling.EntityModelBehaviorProxy">
            <summary>
            This is the proxy for the behavior override.  It will enable the use to create behavior
            overrides by calling ToggleBehaviorOverride.  The target property will follow the 
            hierarchy to find the last overridden behavior.
            </summary>
        </member>
        <member name="T:Emergent.Toolbench.EntityModeling.EntityModelBehavior">
            <summary>
            Describes a behavior inside an entity model
            </summary>
        </member>
        <member name="T:Emergent.Toolbench.EntityModeling.ITraitsOwner">
            <summary>
            Exposes a property to access a read-only collection of traits.
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.EntityModeling.ITraitsOwner.Traits">
            <summary>
            Gets a read-only collection of traits.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.EntityModeling.EntityModelBehavior.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Emergent.Toolbench.EntityModeling.EntityModelBehavior"/> class.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.EntityModeling.EntityModelBehavior.InitNewInstance(System.String)">
            <summary>
            Called when a brand new instance of the behavior is created. Therefore, it is not
            called for a persisted instance.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.EntityModeling.EntityModelBehavior.ToXml">
            <summary>
            Implement to return the instance serialized as an XStreamingElement.
            </summary>
            <returns>The serialized instance.</returns>
        </member>
        <member name="M:Emergent.Toolbench.EntityModeling.EntityModelBehavior.FromXml(System.Xml.Linq.XElement)">
            <summary>
            Implement to initialize the instance from the date in the XElement.
            </summary>
            <param name="element">The XElement containing the data to load from.</param>
        </member>
        <member name="M:Emergent.Toolbench.EntityModeling.EntityModelBehavior.RaisePropertyChanging(System.String)">
            <summary>
            Raises the property changing.
            </summary>
            <param name="propertyName">Name of the property.</param>
        </member>
        <member name="M:Emergent.Toolbench.EntityModeling.EntityModelBehavior.RaisePropertyChangingEx(System.String,System.Object,System.Object)">
            <summary>
            Raises the property changing.
            </summary>
            <param name="propertyName">Name of the property.</param>
        </member>
        <member name="M:Emergent.Toolbench.EntityModeling.EntityModelBehavior.RaisePropertyChanged(System.String)">
            <summary>
            Raises the property changed.
            </summary>
            <param name="propertyName">Name of the property.</param>
        </member>
        <member name="P:Emergent.Toolbench.EntityModeling.EntityModelBehavior.Name">
            <summary>
            Gets or sets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:Emergent.Toolbench.EntityModeling.EntityModelBehavior.Description">
            <summary>
            Gets or sets the description.
            </summary>
            <value>The description.</value>
        </member>
        <member name="P:Emergent.Toolbench.EntityModeling.EntityModelBehavior.Target">
            <summary>
            Gets or sets the target.
            </summary>
            <value>The target.</value>
        </member>
        <member name="P:Emergent.Toolbench.EntityModeling.EntityModelBehavior.Traits">
            <summary>
            Gets a read-only collection of traits.
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.EntityModeling.EntityModelBehavior.XmlElementName">
            <summary>
            Gets the name of the XML element.
            </summary>
            <value>The name of the XML element.</value>
        </member>
        <member name="M:Emergent.Toolbench.EntityModeling.EntityModelBehaviorProxy.#ctor(System.Collections.Generic.List{Emergent.Toolbench.EntityModeling.EntityModel},Emergent.Toolbench.EntityModeling.EntityModelBehavior)">
            <summary>
            Initializes a new instance of the <see cref="T:Emergent.Toolbench.EntityModeling.EntityModelBehaviorProxy"/> class.
            </summary>
            <param name="hierarchy">The overridden models to follow.</param>
            <param name="property">The entity model property.</param>
        </member>
        <member name="M:Emergent.Toolbench.EntityModeling.EntityModelBehaviorProxy.BehaviorOverrides_CollectionChanged(System.Object,System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Handles the CollectionChanged event of the BehaviorOverrides for each model in the
            hierarchy.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The 
            <see cref="T:System.Collections.Specialized.NotifyCollectionChangedEventArgs"/> instance 
            containing the event data.</param>
        </member>
        <member name="M:Emergent.Toolbench.EntityModeling.EntityModelBehaviorProxy.behaviorOverride_PropertyChanged(System.Object,System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            Handles the PropertyChanged event of a BehaviorOverride.
            We are only interested in Target changes.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.ComponentModel.PropertyChangedEventArgs"/> 
            instance containing the event data.</param>
        </member>
        <member name="M:Emergent.Toolbench.EntityModeling.EntityModelBehaviorProxy.HasTrait(System.String)">
            <summary>
            Get whether or not this behavior has a given trait by name.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.EntityModeling.EntityModelBehaviorProxy.GetOverride">
            <summary>
            Gets the override.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Emergent.Toolbench.EntityModeling.EntityModelBehaviorProxy.OverrideBehavior">
            <summary>
            Overrides the behavior, use the default value, copy from nearest override
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.EntityModeling.EntityModelBehaviorProxy.OverrideBehavior(Emergent.Toolbench.EntityModeling.BehaviorTarget,System.Collections.ObjectModel.ObservableCollection{Emergent.Toolbench.EntityModeling.Trait})">
            <summary>
            Overrides the behavior.
            </summary>
            <param name="target">The target.</param>
            <param name="traits">The traits.</param>
        </member>
        <member name="M:Emergent.Toolbench.EntityModeling.EntityModelBehaviorProxy.GetBehaviorProviderModel">
            <summary>
            Gets the value provider model.
            </summary>
            <returns>The value provider</returns>
        </member>
        <member name="M:Emergent.Toolbench.EntityModeling.EntityModelBehaviorProxy.ToggleOverride">
            <summary>
            Toggles the override state.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.EntityModeling.EntityModelBehaviorProxy.NotifyOverrideBehaviorChanged">
            <summary>
            Notify of override target changes
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.EntityModeling.EntityModelBehaviorProxy.OnSourcePropertyChanging(System.Object,System.ComponentModel.PropertyChangingEventArgs)">
            <summary>
            Called when [source property changing].
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.ComponentModel.PropertyChangingEventArgs"/> 
            instance containing the event data.</param>
        </member>
        <member name="M:Emergent.Toolbench.EntityModeling.EntityModelBehaviorProxy.OnSourcePropertyChanged(System.Object,System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            Called when [source property changed].
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.ComponentModel.PropertyChangedEventArgs"/> 
            instance containing the event data.</param>
        </member>
        <member name="P:Emergent.Toolbench.EntityModeling.EntityModelBehaviorProxy.Name">
            <summary>
            Redirected
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.EntityModeling.EntityModelBehaviorProxy.Description">
            <summary>
            Redirected
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.EntityModeling.EntityModelBehaviorProxy.Target">
            <summary>
            Gets or sets the target.
            </summary>
            <value>The target.</value>
        </member>
        <member name="P:Emergent.Toolbench.EntityModeling.EntityModelBehaviorProxy.Traits">
            <summary>
            Get the overriden value, if any, or the source property value
            Set a new value override, directly in the model
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.EntityModeling.EntityModelBehaviorProxy.HasOverride">
            <summary>
            Tell if the model have a override value
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.EntityModeling.EntityModelBehaviorProxy.ID">
            <summary> 
            Get the ID for this behavior.
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.EntityModeling.EntityModelBehaviorProxy.NearestOverrideModel">
            <summary>
            Gets the nearest model that defines an override.
            </summary>
            <value>The nearest model to define an override.</value>
        </member>
        <member name="P:Emergent.Toolbench.EntityModeling.EntityModelBehaviorProxy.ModelHierarchy">
            <summary>
            Gets the model hierarchy.
            </summary>
            <value>The model hierarchy.</value>
        </member>
        <member name="T:Emergent.Toolbench.EntityModeling.BehaviorTarget">
            <summary>
            Describes the behavior logic used to respond to an event.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.EntityModeling.ReferenceGroupItem.HostPropertyChanged(System.Object,System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            Called when a property on the host item changes.  We're only interested in knowing when
            the content is valid.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.ComponentModel.PropertyChangedEventArgs"/> 
            instance containing the event data.</param>
        </member>
        <member name="M:Emergent.Toolbench.EntityModeling.ReferenceGroupItem.CreateAllRefItems">
            <summary>
            Creates all reference items, from the reference list in the associated project.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.EntityModeling.ReferenceGroupItem.AddReference(Emergent.Toolbench.EntityModeling.ModelingProjectDocument)">
            <summary>
            Adds a project reference item.
            </summary>
            <param name="project">The project.</param>
        </member>
        <member name="M:Emergent.Toolbench.EntityModeling.ReferenceGroupItem.OnOwnerReferenceChanged(System.Object,System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Handles the CollectionChanged event of the References in the project.  It will
            add or remove corresponding GameSolutionItems.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.Collections.Specialized.NotifyCollectionChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Emergent.Toolbench.EntityModeling.ReferenceGroupItem.RemoveAllRefItems">
            <summary>
            Removes all reference items.
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.EntityModeling.ReferenceGroupItem.ItemHost">
            <summary>
            Gets or sets the item host implementing basic functionality.  
            </summary>
        </member>
        <member name="T:Emergent.Toolbench.EntityModeling.ModelingProjectIntegrity">
            <summary>
            Integrity analyzer for the project data
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.EntityModeling.ModelingProjectIntegrity.Analyze(Emergent.Toolbench.EntityModeling.ModelingProjectDocument)">
            <summary>
            Analyzes the specified project.
            </summary>
            <param name="project">The project.</param>
        </member>
        <member name="M:Emergent.Toolbench.EntityModeling.ModelingProjectIntegrity.VerifyPropertyTypes(Emergent.Toolbench.EntityModeling.ModelingProjectDocument)">
            <summary>
            Verifies the types in all properties of the project.
            </summary>
            <param name="project">The project.</param>
        </member>
        <member name="M:Emergent.Toolbench.EntityModeling.ModelingProjectIntegrity.VerifyRestrictedValues(Emergent.Toolbench.EntityModeling.ModelingProjectDocument)">
            <summary>
            Verifies that the property values being exported pass verification with any restrictions
            that are on that property.
            </summary>
            <param name="project">The project to verify.</param>
        </member>
        <member name="M:Emergent.Toolbench.EntityModeling.ModelingProjectIntegrity.VerifyModelNamesAreUnique(Emergent.Toolbench.EntityModeling.ModelingProjectDocument)">
            <summary>
            Verifies that model names are unique in this project and any other project that this
            project references.
            </summary>
            <param name="project">The project to verify.</param>
        </member>
        <member name="T:Emergent.Toolbench.EntityModeling.ModelingProjectIntegrity.ModelProperty">
            <summary>
            Link a property and a model into one entity
            </summary>
        </member>
        <member name="T:Emergent.Toolbench.EntityModeling.EntityModelFlatView">
            <summary>
            The EntityModelFlatView represent a view over the properties and behavior that are
            inherited from the mixin models.  It actually represent what the game engine/scripts
            will be able to access for a specific model.
            
            Each EntityModel has its assciated flat view. 
            
            The flat view has the particularity of not being calculated until we need it.
            It is also being cached so we don't need to recalculate it all the time.
            
            The flat view is cached into a OnDemandCollection, which is invalidated when the
            following conditions occurs:
             - Mixin added/remove in the parent mixins
             - Properties added/removed in the parent mixins
             - Behavior added/removed in the parent mixins
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.EntityModeling.EntityModelFlatView.#ctor(Emergent.Toolbench.EntityModeling.EntityModel)">
            <summary>
            Construct the flat view associated with a specific model
            </summary>
            <param name="model">The entity model to build the flat view</param>
        </member>
        <member name="M:Emergent.Toolbench.EntityModeling.EntityModelFlatView.HasTrait(System.String)">
            <summary>
            Determine if this model has a particular trait
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.EntityModeling.EntityModelFlatView.Initialize">
            <summary>
            Call when persistence has finished loading all entity models to 
            register to parent models
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.EntityModeling.EntityModelFlatView.Synchronize">
            <summary>
            Updates any on demand collections and ensures that the flat model is in sync with any
            data that it needs to be written to XML.  This is done so that in a threaded 
            environment OnDemand collections are not being generated during critical sections where
            they are being used.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.EntityModeling.EntityModelFlatView.ToXml">
            <summary>
            Writes the entity model to disk in a flattened format.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.EntityModeling.EntityModelFlatView.MixinProperties_NeedPopulateCollection(System.Object,System.EventArgs)">
            <summary>
            Notification when the OnDemandCollection for the properties needs to be populated
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.EntityModeling.EntityModelFlatView.MixinBehaviors_NeedPopulateCollection(System.Object,System.EventArgs)">
            <summary>
            Notification when the OnDemandCollection for the behaviors needs to be populated
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.EntityModeling.EntityModelFlatView.RegisterToParentModels">
            <summary>
            Register all parent models, to know when they change
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.EntityModeling.EntityModelFlatView.ParentModelTraitsChanged(System.Object,System.EventArgs)">
            <summary>
            Responds to changes in model traits.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.
            </param>
        </member>
        <member name="M:Emergent.Toolbench.EntityModeling.EntityModelFlatView.ParentProperty_TraitsChanged(System.Object,System.EventArgs)">
            <summary>
            Handles the TraitsChanged event of the model.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.
            </param>
        </member>
        <member name="M:Emergent.Toolbench.EntityModeling.EntityModelFlatView.ParentBehavior_TraitsChanged(System.Object,System.EventArgs)">
            <summary>
            Handles the TraitsChanged event of the model.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.
            </param>
        </member>
        <member name="M:Emergent.Toolbench.EntityModeling.EntityModelFlatView.ObtainParentModels">
            <summary>
            Top level recursion function to get all parent models
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.EntityModeling.EntityModelFlatView.ObtainParentModels(Emergent.Toolbench.EntityModeling.EntityModel,System.Int32)">
            <summary>
            Recurse the mixins to find all parent models
            </summary>
            <param name="model"></param>
        </member>
        <member name="M:Emergent.Toolbench.EntityModeling.EntityModelFlatView.ParentProperties_CollectionChanged(System.Object,System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            One of the parent has its properties changed, invalidate the flat properties
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.EntityModeling.EntityModelFlatView.ParentBehaviors_CollectionChanged(System.Object,System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            One of the parent has its behaviors changed, invalidate the flat behaviors
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.EntityModeling.EntityModelFlatView.ParentMixins_CollectionChanged(System.Object,System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            One of the parent has its mixins changed, invalidate everything
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.EntityModeling.EntityModelFlatView.CollectProperties(Emergent.Toolbench.EntityModeling.EntityModel,System.Collections.Generic.List{Emergent.Toolbench.EntityModeling.EntityModel},System.Int32@)">
            <summary>
            Collect recursively all properties
            </summary>
            <param name="model">The current model to collect properties</param>
            <param name="recursion">The recursion stack of model</param>
            <param name="modelIndex">Index of the model, defined by the current recursive
            iteration.</param>
        </member>
        <member name="M:Emergent.Toolbench.EntityModeling.EntityModelFlatView.CollectBehaviors(Emergent.Toolbench.EntityModeling.EntityModel,System.Collections.Generic.List{Emergent.Toolbench.EntityModeling.EntityModel})">
            <summary>
            Collect recursively all behaviors
            </summary>
            <param name="model">The current model</param>
            <param name="recursionDepth">The recursion depth to ensure no loop cycling exist
            </param>
        </member>
        <member name="M:Emergent.Toolbench.EntityModeling.EntityModelFlatView.PropertyOverrides_CollectionChanged(System.Object,System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            The value override changed in the model
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.EntityModeling.EntityModelFlatView.HasDuplicatePropertyNames(Emergent.Toolbench.EntityModeling.MixinProperties,Emergent.Toolbench.EntityModeling.EntityModel,System.String@)">
            <summary>
            Determines whether there is a duplicate property name between properties.
            </summary>
            <param name="mixinProperties">The mixin properties.</param>
            <param name="entityModel">The entity model for recursion.</param>
            <returns><c>true</c> if the model has duplicate property names; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Emergent.Toolbench.EntityModeling.EntityModelFlatView.HasDuplicateBehaviorNames(Emergent.Toolbench.Collections.OnDemandCollection{Emergent.Toolbench.EntityModeling.MixinBehavior},Emergent.Toolbench.EntityModeling.EntityModel,System.String@)">
            <summary>
            Determines whether there is a duplicate behavior name between behaviors.
            </summary>
            <param name="mixinBehaviors">The mixin behaviors.</param>
            <param name="entityModel">The entity model for recursion.</param>
            <returns><c>true</c> if the model has duplicate behavior names; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Emergent.Toolbench.EntityModeling.EntityModelFlatView.GetPropertyNamesInParents(Emergent.Toolbench.EntityModeling.EntityModel)">
            <summary>
            Gets all property names in parents of this model (including himself)
            </summary>
            <param name="model">The model.</param>
            <returns></returns>
        </member>
        <member name="M:Emergent.Toolbench.EntityModeling.EntityModelFlatView.GetPropertyNamesInHierarchy(Emergent.Toolbench.EntityModeling.EntityModel)">
            <summary>
            Gets all property names in hierarchy of this model (mixins and reverse mixins)
            </summary>
            <param name="model">The model.</param>
            <returns></returns>
        </member>
        <member name="M:Emergent.Toolbench.EntityModeling.EntityModelFlatView.GetPropertyNamesInDescendants(Emergent.Toolbench.EntityModeling.EntityModel)">
            <summary>
            Gets all the property names in descendants (reverse mixins)
            </summary>
            <param name="model">The model.</param>
            <returns></returns>
        </member>
        <member name="M:Emergent.Toolbench.EntityModeling.EntityModelFlatView.Descendants(Emergent.Toolbench.EntityModeling.EntityModel)">
            <summary>
            Returns all Descendant starting by the specified model.
            </summary>
            <param name="model">The model.</param>
        </member>
        <member name="M:Emergent.Toolbench.EntityModeling.EntityModelFlatView.Parents(Emergent.Toolbench.EntityModeling.EntityModel)">
            <summary>
            Returns the parents, starting by the model.
            </summary>
            <param name="model">The model.</param>
        </member>
        <member name="M:Emergent.Toolbench.EntityModeling.EntityModelFlatView.Hierarchy(Emergent.Toolbench.EntityModeling.EntityModel)">
            <summary>
            Returns the complete hierarchy starting by the deepest parent.
            </summary>
            <param name="model">The model.</param>
        </member>
        <member name="M:Emergent.Toolbench.EntityModeling.EntityModelFlatView.GetBehaviorNamesInParents(Emergent.Toolbench.EntityModeling.EntityModel)">
            <summary>
            Gets all behavior names in parents of this model (including himself)
            </summary>
            <param name="model">The model.</param>
            <returns></returns>
        </member>
        <member name="M:Emergent.Toolbench.EntityModeling.EntityModelFlatView.GetBehaviorNamesInHierarchy(Emergent.Toolbench.EntityModeling.EntityModel)">
            <summary>
            Gets all behavior names in hierarchy of this model (mixins and reverse mixins)
            </summary>
            <param name="model">The model.</param>
            <returns></returns>
        </member>
        <member name="M:Emergent.Toolbench.EntityModeling.EntityModelFlatView.GetBehaviorNamesInDescendants(Emergent.Toolbench.EntityModeling.EntityModel)">
            <summary>
            Gets all the behavior names in the descendants (reverse mixins)
            </summary>
            <param name="model">The model.</param>
            <returns></returns>
        </member>
        <member name="P:Emergent.Toolbench.EntityModeling.EntityModelFlatView.MixinProperties">
            <summary>
            Acces the flat properties.  This includes the properties of the model itself
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.EntityModeling.EntityModelFlatView.MixinBehaviors">
            <summary>
            Access the flat properties.  This includes the properties of the model itself
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.EntityModeling.EntityModelFlatView.ParentModels">
            <summary>
            Get all parent models, including itself
            </summary>
        </member>
        <member name="T:Emergent.Toolbench.EntityModeling.MixinProperty">
            <summary>
            A mixin property is a class that encapsulates:
             - an EntityModelProperty
             - the value override proxy
             - it's owner model
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.EntityModeling.MixinProperty.#ctor(Emergent.Toolbench.EntityModeling.EntityModelProperty,System.Collections.Generic.List{Emergent.Toolbench.EntityModeling.EntityModel},System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Emergent.Toolbench.EntityModeling.MixinProperty"/> class.
            </summary>
            <param name="property">The property.</param>
            <param name="hierarchy">The hierarchy (stack)
            The first item is the entity model for which this mixin property is created
            The last item is the owner of the property (source).</param>
            <param name="modelIndex">Index of the model, as defined in the recursive traversal
            of the mixins.</param>
            <param name="index">The index of the property in its owner model.</param>
        </member>
        <member name="M:Emergent.Toolbench.EntityModeling.MixinProperty.FlagAsBuiltin(Emergent.Toolbench.EntityModeling.EntityModel)">
            <summary>
            Flags the property as sourced by a built-in model, even if a non-built-in model also
            supplies the property at a higher mixin priority.
            </summary>
            <param name="sourceModel">The built-in source model.</param>
            <returns><c>true</c> if the operation succeeds or <c>false</c> if a different built-in
            source model has already been established.</returns>
        </member>
        <member name="P:Emergent.Toolbench.EntityModeling.MixinProperty.SourceEntityModel">
            <summary>
            Gets or sets the source entity model.
            </summary>
            <value>The source entity model.</value>
        </member>
        <member name="P:Emergent.Toolbench.EntityModeling.MixinProperty.PropertyProxy">
            <summary>
            Gets or sets the property override.
            </summary>
            <value>The property override.</value>
        </member>
        <member name="P:Emergent.Toolbench.EntityModeling.MixinProperty.SourceEntityModelIndex">
            <summary>
            Gets or sets the index of the source entity model.  The index is defined by the 
            recursive traversal of the mixins.  All properties under a certain model are of the
            same index.
            </summary>
            <value>The index of the source entity model.</value>
        </member>
        <member name="P:Emergent.Toolbench.EntityModeling.MixinProperty.Index">
            <summary>
            Gets or sets the index of the property inside its owner Model.  
            </summary>
            <value>The index of the property.</value>
        </member>
        <member name="P:Emergent.Toolbench.EntityModeling.MixinProperty.IsBuiltin">
            <summary>
            Gets a value indicating whether this property is sourced by a built-in model.
            </summary>
            <value><c>true</c> if this property is built-in; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Emergent.Toolbench.EntityModeling.MixinProperty.BuiltinSource">
            <summary>
            Gets the built-in model that contributes this property.
            </summary>
            <value>The built-in source model.</value>
        </member>
        <member name="T:Emergent.Toolbench.EntityModeling.MixinBehavior">
            <summary>
            A mixin behavior a class that encapsulate:
             - a EntityModelBehavior
             - it's owner model
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.EntityModeling.MixinBehavior.#ctor(Emergent.Toolbench.EntityModeling.EntityModelBehavior,System.Collections.Generic.List{Emergent.Toolbench.EntityModeling.EntityModel})">
            <summary>
            Initializes a new instance of the <see cref="T:Emergent.Toolbench.EntityModeling.MixinProperty"/> class.
            </summary>
            <param name="property">The property.</param>
            <param name="hierarchy">The hierarchy (stack) 
            The first item is the entity model for which this mixin property is created
            The last item is the owner of the property (source).</param>
        </member>
        <member name="P:Emergent.Toolbench.EntityModeling.MixinBehavior.SourceEntityModel">
            <summary>
            Gets or sets the source entity model.
            </summary>
            <value>The source entity model.</value>
        </member>
        <member name="P:Emergent.Toolbench.EntityModeling.MixinBehavior.BehaviorProxy">
            <summary>
            Gets or sets the behavior.
            </summary>
            <value>The behavior.</value>
        </member>
        <member name="P:Emergent.Toolbench.EntityModeling.MixinBehavior.ImplementationList">
            <summary>
            Gets list of <see cref="T:Emergent.Toolbench.EntityModeling.EntityModel"/>s implementing this behavior.
            </summary>
            <value>The implementation list.</value>
            <remarks>
            Only the managed behavior targets are considered.
            </remarks>
        </member>
        <member name="T:Emergent.Toolbench.EntityModeling.MixinProperties">
            <summary>
            An OnDemandCollection of MixinProperties, with an accessor by property name for WPF
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.EntityModeling.MixinProperties.FindProperty(System.String)">
            <summary>
            Accessor by property name
            </summary>
            <param name="propertyName">Property Name</param>
            <returns>The associated mixin property</returns>
        </member>
        <member name="P:Emergent.Toolbench.EntityModeling.MixinProperties.Item(System.String)">
            <summary>
            Accessor by property name
            </summary>
            <param name="propertyName">Property Name</param>
            <returns>The associated mixin property</returns>
        </member>
        <member name="T:Emergent.Toolbench.EntityModeling.BehaviorInvocationListBuilder">
            <summary>
            Use this class to build the behavior invocation order list of a model behavior that has
            the Extends or ReverseExtends traits.
            </summary>
        </member>
        <member name="F:Emergent.Toolbench.EntityModeling.BehaviorInvocationListBuilder.DefaultTargetFilter">
            <summary>
            The default target filter includes all the behavior target except 'Abstract'.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.EntityModeling.BehaviorInvocationListBuilder.#ctor(Emergent.Toolbench.EntityModeling.EntityModel,Emergent.Toolbench.EntityModeling.MixinBehavior)">
            <summary>
            Initializes a new instance of the <see cref="T:Emergent.Toolbench.EntityModeling.BehaviorInvocationListBuilder"/> class.
            </summary>
            <param name="model">The model.</param>
            <param name="mixinBehavior">The mixin behavior.</param>
        </member>
        <member name="M:Emergent.Toolbench.EntityModeling.BehaviorInvocationListBuilder.Build">
            <summary>
            Builds the behavior invocation order.
            </summary>
            <remarks>
            Must be called before calling <see cref="P:Emergent.Toolbench.EntityModeling.BehaviorInvocationListBuilder.InvocationList"/>.
            Throws if called more than once.
            </remarks>
        </member>
        <member name="P:Emergent.Toolbench.EntityModeling.BehaviorInvocationListBuilder.TargetFilter">
            <summary>
            Gets or sets the target filter.
            </summary>
            <value>The target filter.</value>
            <remarks>
            If the behavior has a target that is in the collection, the owning model is included
            in the list.
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            The paramater is null. Use <see cref="F:Emergent.Toolbench.EntityModeling.BehaviorInvocationListBuilder.DefaultTargetFilter"/> or an empty sequence.
            </exception>
        </member>
        <member name="P:Emergent.Toolbench.EntityModeling.BehaviorInvocationListBuilder.HonorExtendsTraits">
            <summary>
            Gets or sets a value indicating whether to consider the Extends and ReverseExtends
            traits when returning the list.
            </summary>
            <value><c>true</c> if the Extends and ReverseExtends traits should be
            considered; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Emergent.Toolbench.EntityModeling.BehaviorInvocationListBuilder.InvocationList">
            <summary>
            Gets the invocation list ordered with respect to the Extends or ReverseExtends
            trait on the MixinBehavior passed to this BehaviorInvocationListBuilder instance.
            </summary>
            <value>The invocation list.</value>
            <remarks>
            Throws an InvalidOperationException if <see cref="M:Emergent.Toolbench.EntityModeling.BehaviorInvocationListBuilder.Build"/> wasn't
            called prior to calling this.
            </remarks>
        </member>
        <member name="T:Emergent.Toolbench.EntityModeling.ProjectItem">
            <summary>
            This extension class handles project references as grouped children of EMT projects.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.EntityModeling.ProjectItem.HostPropertyChanged(System.Object,System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            Called when a property on the GameSolutionItem changes. 
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.ComponentModel.PropertyChangedEventArgs"/> 
            instance containing the event data.</param>
        </member>
        <member name="M:Emergent.Toolbench.EntityModeling.ProjectItem.CanBeChild(Emergent.Toolbench.GameSolution.GameSolutionItem,System.Boolean,System.String@)">
            <summary>
            Tests if the item can be a child of this item. Some item types cannot be children of
            others.
            </summary>
            <param name="in_child">The potential child.</param>
            <param name="in_bDirectChild">True if the child is added to this item.
            False if it is a grand-child in the sub-hierarchy.</param>
            <param name="out_error">A string describing why the parent refused the operation.
            </param>
            <returns>True if the parent accepts.</returns>
        </member>
        <member name="P:Emergent.Toolbench.EntityModeling.ProjectItem.ItemHost">
            <summary>
            Gets or sets the item host implementing basic functionality. This override will ensure
            that the References group item is present and populate it with the references as loaded
            from the project.
            </summary>
            <value>The GameSolutionItem serving as host.</value>
        </member>
        <member name="T:Emergent.Toolbench.EntityModeling.ProjectContent">
            <summary>
            Objects that need to know in which modeling project they live can implement this
            interface.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.EntityModeling.ProjectContent.ValidateName(System.String)">
            <summary>
            Validates the name.
            </summary>
            <param name="newName">The new name.</param>
            <returns></returns>
        </member>
        <member name="M:Emergent.Toolbench.EntityModeling.ProjectContent.InitNewInstance">
            <summary>
            Called when a brand new instance of the content is created. Therefore, it is not
            called for a persisted instance.
            For brand new instances, a call to <see cref="M:Emergent.Toolbench.EntityModeling.ProjectContent.Initialize"/> also follows.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.EntityModeling.ProjectContent.Initialize">
            <summary>
            Initializes this instance.  This is called after loading and when a new instance is 
            created.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.EntityModeling.ProjectContent.OnClosed">
            <summary>
            Called when the project closes.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.EntityModeling.ProjectContent.ToXml">
            <summary>
            Implement to return the instance serialized as an XStreamingElement.
            </summary>
            <returns>The serialized instance.</returns>
        </member>
        <member name="M:Emergent.Toolbench.EntityModeling.ProjectContent.FromXml(System.Xml.Linq.XElement)">
            <summary>
            Implement to initialize the instance from the date in the XElement.
            </summary>
            <param name="element">The XElement containing the data to load from.</param>
        </member>
        <member name="P:Emergent.Toolbench.EntityModeling.ProjectContent.PersistentID">
            <summary>
            Get the unique identifier of the <see cref="T:Emergent.Toolbench.EntityModeling.ProjectContent"/>
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.EntityModeling.ProjectContent.IsVersionControlled">
            <summary>
            Gets or sets a value indicating if the <see cref="T:Emergent.Toolbench.EntityModeling.ProjectContent"/> is version 
            controlled by the <see cref="T:Emergent.Toolbench.RevisionControl.IRevisionService"/>.
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.EntityModeling.ProjectContent.Document">
            <summary>
            Gets or sets the project.
            </summary>
            <value>The project.</value>
        </member>
        <member name="P:Emergent.Toolbench.EntityModeling.ProjectContent.IsDirty">
            <summary>
            Gets or sets a value indicating whether this instance is dirty.
            </summary>
            <value><c>true</c> if this instance is dirty; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Emergent.Toolbench.EntityModeling.ProjectContent.Name">
            <summary>
            Gets or sets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:Emergent.Toolbench.EntityModeling.ProjectContent.Namespace">
            <summary>
            Gets or sets the namespace.
            </summary>
            <value>The namespace.</value>
        </member>
        <member name="P:Emergent.Toolbench.EntityModeling.ProjectContent.Extension">
            <summary>
            Gets the type of the object.
            </summary>
            <value>The type of the object.</value>
        </member>
        <member name="P:Emergent.Toolbench.EntityModeling.ProjectContent.XmlElementName">
            <summary>
            Gets the name of the XML element.
            </summary>
            <value>The name of the XML element.</value>
        </member>
        <member name="T:Emergent.Toolbench.EntityModeling.IVirtualFolderItem">
            <summary>
            Interface for objects that support organization via virtual folders.
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.EntityModeling.IVirtualFolderItem.ParentFolderId">
            <summary>
            Gets the parent folder id.
            </summary>
            <value>The parent folder id.</value>
        </member>
        <member name="P:Emergent.Toolbench.EntityModeling.IVirtualFolderItem.ParentFolder">
            <summary>
            Gets or sets the parent folder.
            </summary>
            <value>The parent folder.</value>
        </member>
        <member name="T:Emergent.Toolbench.EntityModeling.ModelMigrationStep4to5">
            <summary>
            This class migrates model and preset files from version 4 to 5.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.EntityModeling.ModelMigrationStep4to5.#ctor">
            <summary>
            Constructs an EMT model migration step to move from version 4 to 5.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.EntityModeling.ModelMigrationStep4to5.Migrate(Emergent.Toolbench.MigrationService.MigrationDocument)">
            <summary>
            Migrates the specified model or preset document from version 4 to version 5. This
            involves specifying the virtual folder based on the on-disk path from the EMT project to
            the document.
            </summary>
            <param name="document">The model or preset document to migrate.</param>
        </member>
        <member name="T:Emergent.Toolbench.EntityModeling.ModelMigrationStep4to5.FolderRecord">
            <summary>
            A helper class that stores information about a virtual folder.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.EntityModeling.ModelMigrationStep4to5.FolderRecord.#ctor(System.String,System.Guid)">
            <summary>
            Initializes a new instance of the <see cref="T:Emergent.Toolbench.EntityModeling.ModelMigrationStep4to5.FolderRecord"/> class.
            </summary>
            <param name="name">The folder name.</param>
            <param name="parent">The parent folder id.</param>
        </member>
        <member name="P:Emergent.Toolbench.EntityModeling.ModelMigrationStep4to5.FolderRecord.Name">
            <summary>
            Gets the folder name.
            </summary>
            <value>The folder name.</value>
        </member>
        <member name="P:Emergent.Toolbench.EntityModeling.ModelMigrationStep4to5.FolderRecord.Parent">
            <summary>
            Gets the parent folder id.
            </summary>
            <value>The parent folder id.</value>
        </member>
        <member name="P:Emergent.Toolbench.EntityModeling.ModelMigrationStep4to5.FolderRecord.Path">
            <summary>
            Gets or sets the path for the folder.
            </summary>
            <value>The path for the folder.</value>
        </member>
        <member name="T:Emergent.Toolbench.EntityModeling.ModelMigrationStep3to4">
            <summary>
            This class migrates model and preset files from version 3 to 4.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.EntityModeling.ModelMigrationStep3to4.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Emergent.Toolbench.EntityModeling.ModelMigrationStep3to4"/> class.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.EntityModeling.ModelMigrationStep3to4.Migrate(Emergent.Toolbench.MigrationService.MigrationDocument)">
            <summary>
            Migrates the specified document from version 3 to 4. This involves moving away from the
            XmlSerializer format and improving mergability by sorting additional sets of data.
            </summary>
            <param name="document">The document to migrate.</param>
        </member>
        <member name="T:Emergent.Toolbench.EntityModeling.ModelMigrationStep1to2">
             <summary>
             This class migrates the .emtproj from version 1 to version 2.  The Hierarchy block
             is changed into a Files block with file paths.
             <EntityModel xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
                          xmlns:xsd="http://www.w3.org/2001/XMLSchema"
                          version="1" ID="c9bf504e-32d7-4913-8753-3dc0bc0e0cfd" Description="">
                 <Mixins />
                 <Properties />
                 <Behaviors />
                 <PropertyOverrides />
                 <BehaviorOverrides>
                     <BehaviorOverride BehaviorName="OnCollide" Target="Lua">
                         <Traits />
                     </BehaviorOverride>
                 </BehaviorOverrides>
                 <Traits />
             </EntityModel>
            
             <EntityModel xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
                          xmlns:xsd="http://www.w3.org/2001/XMLSchema"
                          version="2" ID="c9bf504e-32d7-4913-8753-3dc0bc0e0cfd" Description="">
                 <Mixins />
                 <Properties />
                 <Behaviors />
                 <PropertyOverrides />
                 <BehaviorOverrides>
                     <BehaviorOverride Name="OnCollide" Target="Lua">
                         <Traits />
                     </BehaviorOverride>
                 </BehaviorOverrides>
                 <Traits />
             </EntityModel>
             </summary>
        </member>
        <member name="M:Emergent.Toolbench.EntityModeling.ModelMigrationStep1to2.#ctor">
            <summary>
            Constructs an EMT model migration step.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.EntityModeling.ModelMigrationStep1to2.Migrate(Emergent.Toolbench.MigrationService.MigrationDocument)">
            <summary>
            Migrates the specified document from version 1 to version 2
            </summary>
            <param name="document">The document.</param>
        </member>
        <member name="T:Emergent.Toolbench.EntityModeling.ModelMigrationStep2to3">
            <summary>
            This class migrates the .model and .preset from version 2 to version 3.
            
            This migration step will convert all references from component to BuiltinModel
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.EntityModeling.ModelMigrationStep2to3.#ctor">
            <summary>
            Constructs an EMT model migration step.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.EntityModeling.ModelMigrationStep2to3.Migrate(Emergent.Toolbench.MigrationService.MigrationDocument)">
            <summary>
            Migrates the specified document from version 2 to version 3
            </summary>
            <param name="document">The document.</param>
        </member>
        <member name="T:Emergent.Toolbench.EntityModeling.MigrationStep4to5">
            <summary>
            This class migrates the .emtproj file from version 4 to version 5, removing explicit
            references to on-disk folders.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.EntityModeling.MigrationStep4to5.#ctor">
            <summary>
            Constructs an EMT project migration step to move from version 4 to 5.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.EntityModeling.MigrationStep4to5.Migrate(Emergent.Toolbench.MigrationService.MigrationDocument)">
            <summary>
            Migrates the specified document from version 4 to version 5. This involves removing
            explicit references to on-disk folders.
            </summary>
            <param name="document">The EMT project document to migrate.</param>
        </member>
        <member name="M:Emergent.Toolbench.EntityModeling.MigrationStep4to5.GatherSubDocuments(Emergent.Toolbench.MigrationService.MigrationJob)">
            <summary>
            Gathers the sub documents for migration.
            </summary>
            <param name="job">The migration job.</param>
        </member>
        <member name="T:Emergent.Toolbench.EntityModeling.Plugin">
            <summary>
            Implements the plug-in interface for the Entity Modeling Tool plugin.
            </summary>
        </member>
        <member name="T:Emergent.Toolbench.EntityModeling.EntityModel">
            <summary>
            Describes an entity model
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.EntityModeling.EntityModel.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Emergent.Toolbench.EntityModeling.EntityModel"/> class.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.EntityModeling.EntityModel.InitNewInstance">
            <summary>
            Called when a brand new instance of the model is created. Therefore, it is not
            called for a persisted instance.
            For brand new instances, a call to <see cref="M:Emergent.Toolbench.EntityModeling.EntityModel.Initialize"/> follows.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.EntityModeling.EntityModel.Initialize">
            <summary>
            Called after the persistence is loaded
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.EntityModeling.EntityModel.InitializeReverseMixins">
            <summary>
            Add this model to the reverse mixin list of the derived from models.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.EntityModeling.EntityModel.AddMixinValidationRules">
            <summary>
            Adds the mixin validation rules.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.EntityModeling.EntityModel.OnNameChange(System.String,System.String)">
            <summary>
            Performs any work associated with a model name change, including keeping behavior
            scripts in sync.
            </summary>
            <param name="oldName">The old model name.</param>
            <param name="newName">The new model name.</param>
        </member>
        <member name="M:Emergent.Toolbench.EntityModeling.EntityModel.RenameScript(System.String,System.String,Emergent.Toolbench.EntityModeling.BehaviorTarget)">
            <summary>
            Renames the script for the given language.
            </summary>
            <param name="newName">The new name.</param>
            <param name="target">The target language.</param>
        </member>
        <member name="M:Emergent.Toolbench.EntityModeling.EntityModel.ValidateName(System.String)">
            <summary>
            Validates the name.
            </summary>
            <param name="newName">The new name.</param>
            <returns></returns>
        </member>
        <member name="M:Emergent.Toolbench.EntityModeling.EntityModel.HasTrait(System.String)">
            <summary>
            Checks if the entity has a particular trait by name.
            </summary>
            <param name="name">The name of the trait.</param>
            <returns><c>true</c> if the trait exists; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Emergent.Toolbench.EntityModeling.EntityModel.MakeScriptFilename(Emergent.Toolbench.EntityModeling.BehaviorTarget)">
            <summary>
            Makes the name of the script for behaviors.
            </summary>
            <param name="target">The target language.</param>
            <returns>The name of the script file</returns>
        </member>
        <member name="M:Emergent.Toolbench.EntityModeling.EntityModel.CreateScriptFile(Emergent.Toolbench.EntityModeling.BehaviorTarget)">
            <summary>
            Creates the script file.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.EntityModeling.EntityModel.Delete">
            <summary>
            Deletes this entity model.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.EntityModeling.EntityModel.CleanBrokenProperties">
            <summary>
            Removes any properties that appear to be broken because they failed to deserialize 
            correctly, which could have been due to changes in the codebase.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.EntityModeling.EntityModel.CleanDisconnectedPropertyOverrides">
            <summary>
            Cleans the disconnected overrides.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.EntityModeling.EntityModel.CleanDisconnectedBehaviorOverrides">
            <summary>
            Cleans the disconnected overrides.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.EntityModeling.EntityModel.CircularMixinValidationRule(Emergent.Toolbench.Collections.ValidationObservableCollection{Emergent.Toolbench.EntityModeling.EntityModelMixin}.ValidationRuleArgs)">
            <summary>
            Validation rule for detecting circular mixins.
            </summary>
            <param name="args">The item to accept.</param>
        </member>
        <member name="M:Emergent.Toolbench.EntityModeling.EntityModel.DuplicateMixinValidationRule(Emergent.Toolbench.Collections.ValidationObservableCollection{Emergent.Toolbench.EntityModeling.EntityModelMixin}.ValidationRuleArgs)">
            <summary>
            Validation rule for detecting duplicates mixins.
            </summary>
            <param name="args">The item to accept.</param>
        </member>
        <member name="M:Emergent.Toolbench.EntityModeling.EntityModel.NoPresetAsMixinValidationRule(Emergent.Toolbench.Collections.ValidationObservableCollection{Emergent.Toolbench.EntityModeling.EntityModelMixin}.ValidationRuleArgs)">
            <summary>
            Make sure the mixin source is not a preset when target is model.
            </summary>
            <param name="args">The args.</param>
        </member>
        <member name="M:Emergent.Toolbench.EntityModeling.EntityModel.ReferenceValidationRule(Emergent.Toolbench.Collections.ValidationObservableCollection{Emergent.Toolbench.EntityModeling.EntityModelMixin}.ValidationRuleArgs)">
            <summary>
            Check to see if the entity model is in the references
            </summary>
            <param name="args">The args.</param>
        </member>
        <member name="M:Emergent.Toolbench.EntityModeling.EntityModel.OnContentChanged(System.Object,System.EventArgs)">
            <summary>
            Called when the content changed
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.
            </param>
        </member>
        <member name="M:Emergent.Toolbench.EntityModeling.EntityModel.DocumentDirtyStatusChanged(Emergent.Toolbench.ContentService.AbstractDocument)">
            <summary>
            Called when the AbstractDocument Dirty property changes.  This is used to link
            the IsDirty property of IContentChangeTrackable with the Dirty property of the 
            AbstractDocument.
            </summary>
            <param name="sender">This document</param>
        </member>
        <member name="M:Emergent.Toolbench.EntityModeling.EntityModel.OnModelTraitsCollectionChanged(System.Object,System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Called when the model traits collection has changed.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The event object.</param>
        </member>
        <member name="M:Emergent.Toolbench.EntityModeling.EntityModel.OnPropertiesCollectionChanged(System.Object,System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Handles the CollectionChanged event of the Properties list.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The 
            <see cref="T:System.Collections.Specialized.NotifyCollectionChangedEventArgs"/> instance 
            containing the event data.</param>
        </member>
        <member name="M:Emergent.Toolbench.EntityModeling.EntityModel.CleanDisconnectedPropertyOverridesInDescendants">
            <summary>
            Cleans the disconnected property overrides in descendants.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.EntityModeling.EntityModel.CleanDisconnectedBehaviorOverridesInDescendants">
            <summary>
            Cleans the disconnected behavior overrides in descendants.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.EntityModeling.EntityModel.OnModelPropertyChanged(System.Object,System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            Handles the PropertyChanged event of the Property, to notify when Name changed.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.ComponentModel.PropertyChangedEventArgs"/> 
            instance containing the event data.</param>
        </member>
        <member name="M:Emergent.Toolbench.EntityModeling.EntityModel.OnModelPropertyChangingEx(System.Object,Emergent.Toolbench.Data.PropertyChangingEventArgs)">
            <summary>
            Called when [property property changing ex].
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:Emergent.Toolbench.Data.PropertyChangingEventArgs"/> instance 
            containing the event data.</param>
        </member>
        <member name="M:Emergent.Toolbench.EntityModeling.EntityModel.ConvertOrDeleteOverrides(Emergent.Toolbench.EntityModeling.IModelProperty,Emergent.Toolbench.TypeService.Types.DataValue)">
            <summary>
            Try to converts property overrides, if not successful, delete them
            </summary>
            <param name="property">The property.</param>
            <param name="dataValue">The data value.</param>
        </member>
        <member name="M:Emergent.Toolbench.EntityModeling.EntityModel.RenamePropertyOverrides(Emergent.Toolbench.EntityModeling.IModelProperty,System.String)">
            <summary>
            Renames the property overrides.
            </summary>
            <param name="property">The property.</param>
            <param name="newName">The new name.</param>
        </member>
        <member name="M:Emergent.Toolbench.EntityModeling.EntityModel.EnsureUniqueTypeForPropertyName(Emergent.Toolbench.EntityModeling.IModelProperty)">
            <summary>
            Ensures the type is unique for a specific property name.
            </summary>
            <param name="property">The property.</param>
        </member>
        <member name="M:Emergent.Toolbench.EntityModeling.EntityModel.OnBehaviorsCollectionChanged(System.Object,System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Handles the CollectionChanged event of the Behaviors list.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The 
            <see cref="T:System.Collections.Specialized.NotifyCollectionChangedEventArgs"/> instance 
            containing the event data.</param>
        </member>
        <member name="M:Emergent.Toolbench.EntityModeling.EntityModel.OnBehaviorOverridesCollectionChanged(System.Object,System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Called when [behaviors collection changed].
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The 
            <see cref="T:System.Collections.Specialized.NotifyCollectionChangedEventArgs"/> instance 
            containing the event data.</param>
        </member>
        <member name="M:Emergent.Toolbench.EntityModeling.EntityModel.OnBehaviorTraitsCollectionChanged(System.Object,System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Handles the CollectionChanged event of the BehaviorTraits control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The 
            <see cref="T:System.Collections.Specialized.NotifyCollectionChangedEventArgs"/> instance 
            containing the event data.</param>
        </member>
        <member name="M:Emergent.Toolbench.EntityModeling.EntityModel.OnBehaviorOverridePropertyChanged(System.Object,System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            Called when a behavior override property changed.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.ComponentModel.PropertyChangedEventArgs"/> 
            instance containing the event data.</param>
        </member>
        <member name="M:Emergent.Toolbench.EntityModeling.EntityModel.OnBehaviorPropertyChanged(System.Object,System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            Handles the PropertyChanged event of a Behavior, to notify when Name changed.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.ComponentModel.PropertyChangedEventArgs"/> 
            instance containing the event data.</param>
        </member>
        <member name="M:Emergent.Toolbench.EntityModeling.EntityModel.OnBehaviorPropertyChangingEx(System.Object,Emergent.Toolbench.Data.PropertyChangingEventArgs)">
            <summary>
            Called when behavior property changing.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:Emergent.Toolbench.Data.PropertyChangingEventArgs"/> instance 
            containing the event data.</param>
        </member>
        <member name="M:Emergent.Toolbench.EntityModeling.EntityModel.RenameBehaviorOverrides(Emergent.Toolbench.EntityModeling.EntityModelBehavior,System.String)">
            <summary>
            Renames the behavior overrides.
            </summary>
            <param name="behavior">The behavior.</param>
            <param name="newName">The new name.</param>
        </member>
        <member name="M:Emergent.Toolbench.EntityModeling.EntityModel.OnMixinsCollectionChanged(System.Object,System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Occurs when the Mixin Collection Changed.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The 
            <see cref="T:System.Collections.Specialized.NotifyCollectionChangedEventArgs"/> instance 
            containing the event data.</param>
        </member>
        <member name="M:Emergent.Toolbench.EntityModeling.EntityModel.CleanPropertyOverrides">
            <summary>
            Cleans the property overrides.
            This function finds all overrides that do not have a matching property.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.EntityModeling.EntityModel.CleanBehaviorOverrides">
            <summary>
            Cleans the behavior overrides.
            This function finds all overrides that do not have a matching behavior.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.EntityModeling.EntityModel.OverrideDuplicateProperties">
            <summary>
            Overrides the properties that are duplicated.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.EntityModeling.EntityModel.OverrideDuplicateProperties(System.Boolean)">
            <summary>
            Overrides the properties that are duplicated.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.EntityModeling.EntityModel.OverrideDuplicateBehaviors">
            <summary>
            Overrides the behaviors that are duplicated.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.EntityModeling.EntityModel.OverrideDuplicateBehaviors(System.Boolean)">
            <summary>
            Overrides the behaviors that are duplicated.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.EntityModeling.EntityModel.RegisterPropertyEvents(Emergent.Toolbench.EntityModeling.IModelProperty)">
            <summary>
            Registers the property events.
            </summary>
            <param name="property">The property.</param>
        </member>
        <member name="M:Emergent.Toolbench.EntityModeling.EntityModel.RegisterBehaviorOverrideEvents(Emergent.Toolbench.EntityModeling.BehaviorOverride)">
            <summary>
            Registers the overriden behavior events.
            </summary>
            <param name="behaviorOverride">The behavior override.</param>
        </member>
        <member name="M:Emergent.Toolbench.EntityModeling.EntityModel.RegisterBehaviorEvents(Emergent.Toolbench.EntityModeling.EntityModelBehavior)">
            <summary>
            Registers the behavior events.
            </summary>
            <param name="behavior">The behavior.</param>
        </member>
        <member name="P:Emergent.Toolbench.EntityModeling.EntityModel.Version">
            <summary>
            Gets or sets the version for persistence.
            </summary>
            <value>The version.</value>
        </member>
        <member name="P:Emergent.Toolbench.EntityModeling.EntityModel.Name">
            <summary>
            Gets or sets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:Emergent.Toolbench.EntityModeling.EntityModel.Tags">
            <summary>
            Gets or sets the tags that apply to this model.
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.EntityModeling.EntityModel.Description">
            <summary>
            Gets or sets the description.
            </summary>
            <value>The description.</value>
        </member>
        <member name="P:Emergent.Toolbench.EntityModeling.EntityModel.Mixins">
            <summary>
            Gets or sets the mixins.
            </summary>
            <value>The mixins.</value>
        </member>
        <member name="P:Emergent.Toolbench.EntityModeling.EntityModel.ImmediateParent">
            <summary>
            Gets the most immediate parent in the list of mixins for this entity model.
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.EntityModeling.EntityModel.ID">
            <summary>
            Gets the ID for the model name
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.EntityModeling.EntityModel.ReverseMixins">
            <summary>
            Gets or sets the reverse mixins.
            </summary>
            <value>The reverse mixins.</value>
        </member>
        <member name="P:Emergent.Toolbench.EntityModeling.EntityModel.ExtraData">
            <summary>
            Gets or sets the extra data.
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.EntityModeling.EntityModel.Properties">
            <summary>
            Gets or sets the properties.
            </summary>
            <value>The properties.</value>
        </member>
        <member name="P:Emergent.Toolbench.EntityModeling.EntityModel.Behaviors">
            <summary>
            Gets or sets the behaviors.
            </summary>
            <value>The behaviors.</value>
        </member>
        <member name="P:Emergent.Toolbench.EntityModeling.EntityModel.PropertyOverrides">
            <summary>
            Gets or sets the value overrides.
            </summary>
            <value>The value overrides.</value>
        </member>
        <member name="P:Emergent.Toolbench.EntityModeling.EntityModel.BehaviorOverrides">
            <summary>
            Gets or sets the behavior overrides.
            </summary>
            <value>The behavior overrides.</value>
        </member>
        <member name="P:Emergent.Toolbench.EntityModeling.EntityModel.MixinProperties">
            <summary>
            Gets the mixin properties.
            </summary>
            <value>The mixin properties.</value>
        </member>
        <member name="P:Emergent.Toolbench.EntityModeling.EntityModel.MixinBehaviors">
            <summary>
            Gets the mixin behaviors.
            </summary>
            <value>The mixin behaviors.</value>
        </member>
        <member name="P:Emergent.Toolbench.EntityModeling.EntityModel.ParentModels">
            <summary>
            Gets the parent models including itself (this)
            </summary>
            <value>The parent models.</value>
        </member>
        <member name="P:Emergent.Toolbench.EntityModeling.EntityModel.Traits">
            <summary>
            Gets a read-only collection of traits.
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.EntityModeling.EntityModel.ParentFolderId">
            <summary>
            The parent folder id.
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.EntityModeling.EntityModel.ParentFolder">
            <summary>
            The parent folder.
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.EntityModeling.EntityModel.XmlElementName">
            <summary>
            Gets the name of the XML element.
            </summary>
            <value>The name of the XML element.</value>
        </member>
        <member name="P:Emergent.Toolbench.EntityModeling.EntityModel.IsExecutingHistory">
            <summary>
            Gets a value indicating whether the document is executing history.
            </summary>
            <value>
                <c>true</c> if this instance is executing history; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:Emergent.Toolbench.EntityModeling.EntityModelPreset.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Emergent.Toolbench.EntityModeling.EntityModelPreset"/> class.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.EntityModeling.EntityModelPreset.OnMixinsCollectionChanged(System.Object,System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Handles the CollectionChanged event of the Mixins control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The 
            <see cref="T:System.Collections.Specialized.NotifyCollectionChangedEventArgs"/> instance 
            containing the event data.</param>
        </member>
        <member name="M:Emergent.Toolbench.EntityModeling.EntityModelPreset.AddMixinValidationRules">
            <summary>
            Adds the mixin validation rules.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.EntityModeling.EntityModelPreset.OnNameChange(System.String,System.String)">
            <summary>
            Performs any work associated with a preset name change.
            </summary>
            <param name="oldName">The old preset name.</param>
            <param name="newName">The new preset name.</param>
        </member>
        <member name="M:Emergent.Toolbench.EntityModeling.EntityModelPreset.SingleMixinValidationRule(Emergent.Toolbench.Collections.ValidationObservableCollection{Emergent.Toolbench.EntityModeling.EntityModelMixin}.ValidationRuleArgs)">
            <summary>
            Ensure a preset can only have zero or one mixin
            </summary>
            <param name="args">The args.</param>
        </member>
        <member name="P:Emergent.Toolbench.EntityModeling.EntityModelPreset.LayerName">
            <summary>
            Gets or sets the layer name.
            </summary>
            <value>The layer name.</value>
        </member>
        <member name="P:Emergent.Toolbench.EntityModeling.EntityModelPreset.Properties">
            <summary>
            Gets the properties.
            Setting the properties is not supported
            </summary>
            <value>The properties.</value>
        </member>
        <member name="P:Emergent.Toolbench.EntityModeling.EntityModelPreset.Behaviors">
            <summary>
            Gets the behaviors.
            Setting the behaviors is not supported
            </summary>
            <value>The behaviors.</value>
        </member>
        <member name="P:Emergent.Toolbench.EntityModeling.EntityModelPreset.Traits">
            <summary>
            Gets a read-only collection of traits.
            </summary>
            <value></value>
        </member>
        <member name="P:Emergent.Toolbench.EntityModeling.EntityModelPreset.Model">
            <summary>
            Gets or sets the entity model from which the preset is based on.
            </summary>
            <value>The entity model.</value>
        </member>
        <member name="P:Emergent.Toolbench.EntityModeling.EntityModelPreset.XmlElementName">
            <summary>
            Gets the name of the XML element.
            </summary>
            <value>The name of the XML element.</value>
        </member>
        <member name="T:Emergent.Toolbench.EntityModeling.MigrationStep1to2">
            <summary>
            This class migrates the .emtproj from version 1 to version 2.  The Hierarchy block
            is changed into a Files block with file paths.
            <Project version="1">
                <Hierarchy version="1">
                    <Item
                        content-type="Emergent.Toolbench.EntityModeling.EntityModel"
                        name=" Model.model "
                        id="2524ef37-a6a0-450f-817e-a9fb17aab0c7"
                        parent="e76b585a-52ca-4de5-96a6-a28acf148c9d"
                        filepath="Model.model" />
                    <Item
                        content-type="Emergent.Toolbench.EntityModeling.EntityModePresetl"
                        name=" Preset.preset"
                        id="3480ca8e-cfc1-4bdd-8998-14199b256fe0"
                        parent="2524ef37-a6a0-450f-817e-a9fb17aab0c7"
                        filepath=" Preset.preset" />
                    <Item
                        content-type="Emergent.Toolbench.EntityModeling.Diagram"
                        name=" Diagram1.diagram "
                        id="4dc4af1e-2c36-427b-a3ea-2e0a2af23155"
                        parent="2524ef37-a6a0-450f-817e-a9fb17aab0c7"
                        filepath=" Diagram1.diagram " />
                </Hierarchy>
            </Project>
            
            <Project version="2">
                <Files>
                    <File path="Model.model" />
                    <File path="Preset.preset" />
                    <File path="Diagram1.diagram" />
                </Files>
            </Project>
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.EntityModeling.MigrationStep1to2.Migrate(Emergent.Toolbench.MigrationService.MigrationDocument)">
            <summary>
            Migrates the specified document from version 1 to version 2
            </summary>
            <param name="document">The document.</param>
        </member>
        <member name="M:Emergent.Toolbench.EntityModeling.MigrationStep1to2.GatherSubDocuments(Emergent.Toolbench.MigrationService.MigrationJob)">
            <summary>
            Gathers the sub documents.
            </summary>
            <param name="job">The job.</param>
        </member>
        <member name="M:Emergent.Toolbench.EntityModeling.MigrationStep1to2.GetEntityModelingProjectFiles(Emergent.Toolbench.MigrationService.MigrationJob)">
            <summary>
            Gets the entity modeling project files.
            </summary>
            <param name="job">The job.</param>
        </member>
        <member name="T:Emergent.Toolbench.EntityModeling.MigrationStep3to4">
            <summary>
            This class migrates the .emtproj file from version 3 to version 4, adding EMT virtual
            folders for any on-disk EMT folders.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.EntityModeling.MigrationStep3to4.#ctor">
            <summary>
            Constructs an EMT project migration step to move from version 3 to 4.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.EntityModeling.MigrationStep3to4.Migrate(Emergent.Toolbench.MigrationService.MigrationDocument)">
            <summary>
            Migrates the specified document from version 3 to version 4. This involves adding EMT
            virtual folders to reflect any pre-existing on-disk EMT folders. A model/preset
            migration step will update models and presets to reference these new virtual folders.
            </summary>
            <param name="document">The EMT project document to migrate.</param>
        </member>
        <member name="M:Emergent.Toolbench.EntityModeling.MigrationStep3to4.GatherSubDocuments(Emergent.Toolbench.MigrationService.MigrationJob)">
            <summary>
            Gathers the sub documents for migration.
            </summary>
            <param name="job">The migration job.</param>
        </member>
        <member name="M:Emergent.Toolbench.EntityModeling.MigrationStep3to4.IsFolder(System.String)">
            <summary>
            Determines whether the specified path is a folder.
            </summary>
            <param name="path">The path to check.</param>
            <returns><c>true</c> if the specified path is a folder; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:Emergent.Toolbench.EntityModeling.MigrationStep3to4.FolderRecord">
            <summary>
            A helper class that stores information about a virtual folder.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.EntityModeling.MigrationStep3to4.FolderRecord.#ctor(System.String,System.Guid)">
            <summary>
            Initializes a new instance of the <see cref="T:Emergent.Toolbench.EntityModeling.MigrationStep3to4.FolderRecord"/> class.
            </summary>
            <param name="path">The path of the folder.</param>
            <param name="parent">The parent folder id.</param>
        </member>
        <member name="P:Emergent.Toolbench.EntityModeling.MigrationStep3to4.FolderRecord.Name">
            <summary>
            Gets the folder name.
            </summary>
            <value>The folder name.</value>
        </member>
        <member name="P:Emergent.Toolbench.EntityModeling.MigrationStep3to4.FolderRecord.Path">
            <summary>
            Gets the path of the folder.
            </summary>
            <value>The path of the folder.</value>
        </member>
        <member name="P:Emergent.Toolbench.EntityModeling.MigrationStep3to4.FolderRecord.Id">
            <summary>
            Gets the folder id.
            </summary>
            <value>The folder id.</value>
        </member>
        <member name="P:Emergent.Toolbench.EntityModeling.MigrationStep3to4.FolderRecord.Parent">
            <summary>
            Gets the parent folder id.
            </summary>
            <value>The parent folder id.</value>
        </member>
        <member name="T:Emergent.Toolbench.EntityModeling.MigrationStep2to3">
            <summary>
            This class migrates the .emtproj from version 2 to version 3.  Settings in the side-by-side
            .emtproj.settings file is embedded directly in the .emtproj XML.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.EntityModeling.MigrationStep2to3.#ctor">
            <summary>
            Constructs an EMT project migration step.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.EntityModeling.MigrationStep2to3.Migrate(Emergent.Toolbench.MigrationService.MigrationDocument)">
            <summary>
            Migrates the specified document from version 2 to version 3
            </summary>
            <param name="document">The document.</param>
        </member>
        <member name="M:Emergent.Toolbench.EntityModeling.MigrationStep2to3.GatherSubDocuments(Emergent.Toolbench.MigrationService.MigrationJob)">
            <summary>
            Gathers the sub documents.
            </summary>
            <param name="job">The job.</param>
        </member>
        <member name="T:Emergent.Toolbench.EntityModeling.EntityModelBaseDocumentFactory">
            <summary>
            The base factory for Entity Model and Presets
            </summary>
        </member>
        <member name="T:Emergent.Toolbench.EntityModeling.IProjectContentFactory">
            <summary>
            Common interface for the project objects : models, preset and diagram
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.EntityModeling.IProjectContentFactory.Create">
            <summary>
            Creates a new object
            </summary>
            <returns>The new object</returns>
        </member>
        <member name="M:Emergent.Toolbench.EntityModeling.IProjectContentFactory.Open(System.Uri)">
            <summary>
            Opens the file at the specified location.
            </summary>
            <param name="location">The location.</param>
            <returns>The loaded object</returns>
        </member>
        <member name="M:Emergent.Toolbench.EntityModeling.IProjectContentFactory.Save(Emergent.Toolbench.EntityModeling.ProjectContent,System.Uri)">
            <summary>
            Saves the specified document.
            </summary>
            <param name="document">The document.</param>
            <param name="location">The location.</param>
            <returns>false if there was an error, true if successful.</returns>
        </member>
        <member name="P:Emergent.Toolbench.EntityModeling.IProjectContentFactory.Extension">
            <summary>
            Gets the extension for the file.
            </summary>
            <value>The extension.</value>
        </member>
        <member name="P:Emergent.Toolbench.EntityModeling.IProjectContentFactory.DefaultName">
            <summary>
            Gets the default name of a new object.
            </summary>
            <value>The default name.</value>
        </member>
        <member name="P:Emergent.Toolbench.EntityModeling.IProjectContentFactory.DocumentType">
            <summary>
            Gets the type of the document this factory produces.
            </summary>
            <value>The type of the document.</value>
        </member>
        <member name="M:Emergent.Toolbench.EntityModeling.EntityModelBaseDocumentFactory.GetTypeOfDocument">
            <summary>
            Gets the type of document typeof(EntityModel or Preset)
            </summary>
            <returns></returns>
        </member>
        <member name="M:Emergent.Toolbench.EntityModeling.EntityModelBaseDocumentFactory.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Emergent.Toolbench.EntityModeling.EntityModelDocumentFactory"/> class.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.EntityModeling.EntityModelBaseDocumentFactory.Create">
            <summary>
            Creates a new instance of a document. This method is called when
            the content is created.
            </summary>
            <param name="args">Additional configuration data used to create
            the document.</param>
            <returns>A new document instance.</returns>
        </member>
        <member name="M:Emergent.Toolbench.EntityModeling.EntityModelBaseDocumentFactory.Open(System.Uri)">
            <summary>
            Opens content from the specified location and builds a new document
            from that content.
            </summary>
            <param name="location">The location.</param>
            <returns>A new document instance.</returns>
        </member>
        <member name="M:Emergent.Toolbench.EntityModeling.EntityModelBaseDocumentFactory.Save(Emergent.Toolbench.EntityModeling.ProjectContent,System.Uri)">
            <summary>
            Saves the specified document.
            </summary>
            <param name="document">The document to save.</param>
        </member>
        <member name="T:Emergent.Toolbench.EntityModeling.Documents.ModelingProjectHelpers">
            <summary>
            Helpers for ModelingProjectDocument.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.EntityModeling.Documents.ModelingProjectHelpers.GetReferencesAsFlat(Emergent.Toolbench.EntityModeling.IProjectReferenceOwner)">
            <summary>
            Gets the project references (recursively) as a flat view.
            </summary>
            <param name="referenceOwner">The reference owner.</param>
            <returns>The list of projects referenced.</returns>
        </member>
        <member name="T:Emergent.Toolbench.EntityModeling.Documents.ModelingProjectHelpers.ProjectComparer">
            <summary>
            Allows comparing ModelingProjectDocuments.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.EntityModeling.Documents.ModelingProjectHelpers.ProjectComparer.Equals(Emergent.Toolbench.EntityModeling.ModelingProjectDocument,Emergent.Toolbench.EntityModeling.ModelingProjectDocument)">
            <summary>
            Determines whether the specified objects are equal.
            </summary>
            <param name="x">The first object to compare.</param>
            <param name="y">The second object to compare.</param>
            <returns>true if the specified objects are equal; otherwise, false.</returns>
        </member>
        <member name="M:Emergent.Toolbench.EntityModeling.Documents.ModelingProjectHelpers.ProjectComparer.GetHashCode(Emergent.Toolbench.EntityModeling.ModelingProjectDocument)">
            <summary>
            Returns a hash code for the specified object.
            </summary>
            <param name="obj">The object for which a hash code is to be returned.</param>
            <returns>A hash code for the specified object.</returns>
        </member>
        <member name="M:Emergent.Toolbench.EntityModeling.Documents.ModelingProjectHelpers.ProjectComparer.Compare(Emergent.Toolbench.EntityModeling.ModelingProjectDocument,Emergent.Toolbench.EntityModeling.ModelingProjectDocument)">
            <summary>
            Compares two objects and returns a value indicating whether one is less than,
            equal to, or greater than the other.
            </summary>
            <param name="x">The first object to compare.</param>
            <param name="y">The second object to compare.</param>
            <returns>Value indicating whether one is less than, equal to, or greater than the
            other.</returns>
        </member>
        <member name="T:Emergent.Toolbench.EntityModeling.BehaviorOverride">
            <summary>
            Contains the actual override data, which is persisted and hold by the EntityModel.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.EntityModeling.BehaviorOverride.#ctor">
            <summary>
            Default contructor for serializer
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.EntityModeling.BehaviorOverride.#ctor(Emergent.Toolbench.EntityModeling.EntityModelBehavior,Emergent.Toolbench.EntityModeling.BehaviorTarget,System.Collections.ObjectModel.ObservableCollection{Emergent.Toolbench.EntityModeling.Trait},Emergent.Toolbench.EntityModeling.EntityModel)">
            <summary>
            Constructor for creating a value override manually
            </summary>
            <param name="property">The property to override</param>
            <param name="value">The override value</param>
        </member>
        <member name="M:Emergent.Toolbench.EntityModeling.BehaviorOverride.Initialize(Emergent.Toolbench.EntityModeling.EntityModel)">
            <summary>
            Called when persistence is finished loading, to resolve references
            </summary>
            <param name="model">The owner model</param>
        </member>
        <member name="M:Emergent.Toolbench.EntityModeling.BehaviorOverride.ToXml">
            <summary>
            Implement to return the instance serialized as an XStreamingElement.
            </summary>
            <returns>The serialized instance.</returns>
        </member>
        <member name="M:Emergent.Toolbench.EntityModeling.BehaviorOverride.FromXml(System.Xml.Linq.XElement)">
            <summary>
            Implement to initialize the instance from the date in the XElement.
            </summary>
            <param name="element">The XElement containing the data to load from.</param>
        </member>
        <member name="M:Emergent.Toolbench.EntityModeling.BehaviorOverride.RaisePropertyChanging(System.String)">
            <summary>
            Raises the property changing.
            </summary>
            <param name="propertyName">Name of the property.</param>
        </member>
        <member name="M:Emergent.Toolbench.EntityModeling.BehaviorOverride.RaisePropertyChanged(System.String)">
            <summary>
            Raises the property changed.
            </summary>
            <param name="propertyName">Name of the property.</param>
        </member>
        <member name="P:Emergent.Toolbench.EntityModeling.BehaviorOverride.Name">
            <summary>
            Gets or sets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:Emergent.Toolbench.EntityModeling.BehaviorOverride.Traits">
            <summary>
            Gets a read-only collection of traits.
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.EntityModeling.BehaviorOverride.TraitOverrides">
            <summary>
            Gets a collection of TraitOverride.
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.EntityModeling.BehaviorOverride.OwnerModel">
            <summary>
            Gets the owner model.
            </summary>
            <value>The model.</value>
        </member>
        <member name="P:Emergent.Toolbench.EntityModeling.BehaviorOverride.Target">
            <summary>
            Gets or sets the target.
            </summary>
            <value>The target.</value>
        </member>
        <member name="P:Emergent.Toolbench.EntityModeling.BehaviorOverride.XmlElementName">
            <summary>
            Gets the name of the XML element.
            </summary>
            <value>The name of the XML element.</value>
        </member>
        <member name="T:Emergent.Toolbench.EntityModeling.MultiEditProperty">
            <summary>
            This is class is the data object layer managing the multiple <see cref="T:Emergent.Toolbench.EntityModeling.EntityModelProperty"/>
            instances being multi-edited.
            </summary>
        </member>
        <member name="T:Emergent.Toolbench.EntityModeling.EntityModelProperty">
            <summary>
            Business object for an Entity Model Property
            </summary>
        </member>
        <member name="T:Emergent.Toolbench.EntityModeling.IModelProperty">
            <summary>
            The <see cref="T:Emergent.Toolbench.EntityModeling.IModelProperty"/> interface allows several property subclasses to all be 
            treated in a similar fashion.
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.EntityModeling.IModelProperty.Name">
            <summary>
            Gets or sets the name of the property.
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.EntityModeling.IModelProperty.Description">
            <summary>
            Gets or sets the description of the property.
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.EntityModeling.IModelProperty.Value">
            <summary>
            Gets or sets the value of the property.
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.EntityModeling.IModelProperty.Restriction">
            <summary>
            Gets or sets the restriction used by the property.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.EntityModeling.EntityModelProperty.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Emergent.Toolbench.EntityModeling.EntityModelProperty"/> class.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.EntityModeling.EntityModelProperty.InitNewInstance(System.String)">
            <summary>
            Called when a brand new instance of the property is created. Therefore, it is not
            called for a persisted instance.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.EntityModeling.EntityModelProperty.ValidateNew(Emergent.Toolbench.EntityModeling.ModelingProjectDocument,Emergent.Toolbench.EntityModeling.IModelProperty,Emergent.Toolbench.TypeService.DataType@)">
            <summary>
            Validates that a new property with the given information can be created without
            violating the business logic.
            </summary>
            <param name="project">The project.</param>
            <param name="property">The property.</param>
            <param name="inUseDataType">The data type of the properties with the same
            name if at least one exists. Otherwise, null.</param>
            <returns>
            True if it is legal to create a property with this name and type,
            False otherwise. The <paramref name="inUseDataType"/> contains the
            proper data type.
            </returns>
        </member>
        <member name="M:Emergent.Toolbench.EntityModeling.EntityModelProperty.ToXml">
            <summary>
            Implement to return the instance serialized as an XStreamingElement.
            </summary>
            <returns>The serialized instance.</returns>
        </member>
        <member name="M:Emergent.Toolbench.EntityModeling.EntityModelProperty.FromXml(System.Xml.Linq.XElement)">
            <summary>
            Implement to initialize the instance from the date in the XElement.
            </summary>
            <param name="element">The XElement containing the data to load from.</param>
        </member>
        <member name="P:Emergent.Toolbench.EntityModeling.EntityModelProperty.Name">
            <summary>
            Gets or sets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:Emergent.Toolbench.EntityModeling.EntityModelProperty.Description">
            <summary>
            Gets or sets the description.
            </summary>
            <value>The description.</value>
        </member>
        <member name="P:Emergent.Toolbench.EntityModeling.EntityModelProperty.Value">
            <summary>
            Gets or sets the value.
            note: Attributed at runtime with XmlAttributeOverrides
            </summary>
            <value>The value.</value>
        </member>
        <member name="P:Emergent.Toolbench.EntityModeling.EntityModelProperty.StringValue">
            <summary>
            Gets or sets the string value.
            </summary>
            <value>The string value.</value>
        </member>
        <member name="P:Emergent.Toolbench.EntityModeling.EntityModelProperty.IsValueValid">
            <summary>
            Tell if the value valid based on the restrictions
            </summary>
            <value>The is value valid.</value>
        </member>
        <member name="P:Emergent.Toolbench.EntityModeling.EntityModelProperty.HasRestriction">
            <summary>
            Gets a value indicating whether this property has a restriction.
            </summary>
            <value><c>true</c> if this property has a restriction; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Emergent.Toolbench.EntityModeling.EntityModelProperty.Restriction">
            <summary>
            Gets or sets the restriction.
            </summary>
            <value>The restriction.</value>
        </member>
        <member name="P:Emergent.Toolbench.EntityModeling.EntityModelProperty.Traits">
            <summary>
            Gets a read-only collection of traits.
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.EntityModeling.EntityModelProperty.XmlElementName">
            <summary>
            Gets the name of the XML element.
            </summary>
            <value>The name of the XML element.</value>
        </member>
        <member name="M:Emergent.Toolbench.EntityModeling.MultiEditProperty.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Emergent.Toolbench.EntityModeling.MultiEditProperty"/> class.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.EntityModeling.MultiEditProperty.GetTraits">
            <summary>
            Gets the union of the traits of the properties being edited.
            </summary>
            <returns>
            A collection copy of the unique traits of the properties being edited.
            </returns>
            <remarks>
            This is not meant to be an override of the base Traits property which is not used.
            </remarks>
        </member>
        <member name="M:Emergent.Toolbench.EntityModeling.MultiEditProperty.Add(Emergent.Toolbench.EntityModeling.MixinProperty)">
            <summary>
            Adds the specified mixin property for multi-edit.
            </summary>
            <param name="newMixinProperty">The new mixin property.</param>
        </member>
        <member name="M:Emergent.Toolbench.EntityModeling.MultiEditProperty.Add(System.Collections.Generic.List{Emergent.Toolbench.EntityModeling.MixinProperty})">
            <summary>
            Adds the specified mixin properties for multi-edit.
            </summary>
            <param name="newMixinProperties">The new mixin properties.</param>
        </member>
        <member name="M:Emergent.Toolbench.EntityModeling.MultiEditProperty.Remove(Emergent.Toolbench.EntityModeling.MixinProperty)">
            <summary>
            Removes the specified mixin property from multi-edit.
            </summary>
            <param name="oldMxinProperty">The old mxin property.</param>
        </member>
        <member name="M:Emergent.Toolbench.EntityModeling.MultiEditProperty.Remove(System.Collections.Generic.List{Emergent.Toolbench.EntityModeling.MixinProperty})">
            <summary>
            Removes the specified mixin properties from multi-edit.
            </summary>
            <param name="oldMixinProperties">The old mixin properties.</param>
        </member>
        <member name="M:Emergent.Toolbench.EntityModeling.MultiEditProperty.Clear">
            <summary>
            Remove all the current mixin properties from multi-edit.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.EntityModeling.MultiEditProperty.OnMixinPropertyValueChanged(System.Object,System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            Called when the value of a mixin property changes.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.ComponentModel.PropertyChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Emergent.Toolbench.EntityModeling.MultiEditProperty.OnMixinPropertyRestrictionConfigurationChanged(System.Object,System.EventArgs)">
            <summary>
            Called when the mixin property restriction configuration changed.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Emergent.Toolbench.EntityModeling.MultiEditProperty.OnMixinPropertyValueInvalidated(System.Object,System.EventArgs)">
            <summary>
            Called when one of our mixin properties value is being invalidated. When this happens,
            we also want to invalidate our own value.
            </summary>
            <param name="sender">The event sender.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:Emergent.Toolbench.EntityModeling.MultiEditProperty.OnValueChanged(System.Object,System.EventArgs)">
            <summary>
            Called when our value has changed.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Emergent.Toolbench.EntityModeling.MultiEditProperty.UpdateState">
            <summary>
            Updates the state.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.EntityModeling.MultiEditProperty.UpdateEffectiveValue">
            <summary>
            Updates the effective value of this property.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.EntityModeling.MultiEditProperty.UpdateHasMixedValue">
            <summary>
            Updates the HasMixedValue property.
            </summary>
            <remarks>Implement the critera for a value to be considered mixed, here.</remarks>
        </member>
        <member name="M:Emergent.Toolbench.EntityModeling.MultiEditProperty.UpdateIsEditable">
            <summary>
            Updates the IsEditable flag.
            </summary>
            <remarks>Implement the criteria for a value to be considered editable, here.</remarks>
        </member>
        <member name="P:Emergent.Toolbench.EntityModeling.MultiEditProperty.HasMixedValue">
            <summary>
            Gets or sets a value indicating whether this instance has mixed value.
            </summary>
            <value><c>true</c> if this instance has mixed value; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Emergent.Toolbench.EntityModeling.MultiEditProperty.IsEditable">
            <summary>
            Gets or sets a value indicating whether this instance is editable.
            </summary>
            <value><c>true</c> if this instance is editable; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Emergent.Toolbench.EntityModeling.MultiEditProperty.HasOverride">
            <summary>
            Gets or sets the override state of the property. The get value can be undetermined
            but the set value must be determined.
            
            </summary>
            <value>
            Null : Some properties have override and some don't
            True : If all the properties have override
            False : If all the properties don't have override
            </value>
        </member>
        <member name="P:Emergent.Toolbench.EntityModeling.MultiEditProperty.SourceModels">
            <summary>
            Gets the list of models of the mixin properties being multi-edited.
            If there is only one model, it means all the mixin properties have their
            originating value from this model.
            </summary>
            <value>The source models.</value>
            <remarks>Useful for grouping in GUI.</remarks>
        </member>
        <member name="P:Emergent.Toolbench.EntityModeling.MultiEditProperty.Properties">
            <summary>
            Gets the list of mixin properties being multi-edited.
            </summary>
            <value>The properties.</value>
        </member>
        <member name="T:Emergent.Toolbench.EntityModeling.MigrationStep0to1">
            <summary>
            This class migrates the .emtproj to version 1, which involves adding version tracking.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.EntityModeling.MigrationStep0to1.#ctor">
            <summary>
            Constructs an EMT project migration step.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.EntityModeling.MigrationStep0to1.Migrate(Emergent.Toolbench.MigrationService.MigrationDocument)">
            <summary>
            Migrates the specified document from version 0 to version 1
            </summary>
            <param name="document">The document.</param>
        </member>
        <member name="M:Emergent.Toolbench.EntityModeling.MigrationStep0to1.GatherSubDocuments(Emergent.Toolbench.MigrationService.MigrationJob)">
            <summary>
            Gathers the sub documents.
            </summary>
            <param name="job">The job.</param>
        </member>
        <member name="T:Emergent.Toolbench.EntityModeling.Diagram">
            <summary>
            This class persists all the information pertaining to an Entity Model diagram.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.EntityModeling.Diagram.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Emergent.Toolbench.EntityModeling.Diagram"/> class.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.EntityModeling.Diagram.GetLayoutInfo(Emergent.Toolbench.EntityModeling.EntityModel)">
            <summary>
            Gets the layout info attached to a given model.
            </summary>
            <param name="model">The model.</param>
            <returns></returns>
        </member>
        <member name="M:Emergent.Toolbench.EntityModeling.Diagram.SetLayoutInfo(Emergent.Toolbench.EntityModeling.EntityModel,Emergent.Toolbench.EntityModeling.DiagramItemInfo)">
            <summary>
            Sets the layout info attached to a given model.
            </summary>
            <param name="model">The model.</param>
            <param name="info">The info.</param>
        </member>
        <member name="M:Emergent.Toolbench.EntityModeling.Diagram.AddModel(Emergent.Toolbench.EntityModeling.EntityModel)">
            <summary>
            Adds the model.
            </summary>
            <param name="model">The model.</param>
            <returns>The position of the item</returns>
        </member>
        <member name="M:Emergent.Toolbench.EntityModeling.Diagram.RemoveModel(Emergent.Toolbench.EntityModeling.EntityModel)">
            <summary>
            Removes the model.
            </summary>
            <param name="model">The model.</param>
        </member>
        <member name="M:Emergent.Toolbench.EntityModeling.Diagram.ClearModels">
            <summary>
            Clears the diagram by removing all the models.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.EntityModeling.Diagram.FromXml(System.Xml.Linq.XElement)">
            <summary>
            Loads the diagram from the XMl doc.
            </summary>
            <param name="doc">The doc.</param>
        </member>
        <member name="M:Emergent.Toolbench.EntityModeling.Diagram.ToXml">
            <summary>
            Saves this instance into a Xml doc.
            </summary>
            <returns>A XDocument to write.</returns>
        </member>
        <member name="M:Emergent.Toolbench.EntityModeling.Diagram.OnModelDeleted(System.Object,System.EventArgs)">
            <summary>
            Called when a model is deleted.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="P:Emergent.Toolbench.EntityModeling.Diagram.Models">
            <summary>
            The collection of models included in the diagram.
            </summary>
            <value>The models.</value>
        </member>
        <member name="P:Emergent.Toolbench.EntityModeling.Diagram.ParentFolderId">
            <summary>
            The parent folder id.
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.EntityModeling.Diagram.ParentFolder">
            <summary>
            The parent folder.
            </summary>
        </member>
        <member name="T:Emergent.Toolbench.EntityModeling.Diagram.AddRemoveUndo">
            <summary>
            Handles the undo/redo action for adding/removing a model or preset in the diagram.
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.EntityModeling.Diagram.AddRemoveUndo.IsUndoable">
            <summary>
            Gets a value indicating if the action is undo-able.
            </summary>
            <remarks>
            Normally this value should be true but if the action can conditionally become 
            non-undo-able, this property should reflect that.
            </remarks>
        </member>
        <member name="T:Emergent.Toolbench.EntityModeling.DiagramItemInfo">
            <summary>
            Data class to hold information about the position of each item in the diagram.
            </summary>
        </member>
        <member name="T:Emergent.Toolbench.EntityModeling.LayoutInfoChangedEventArgs">
            <summary>
            Event arguments class indicating which model has moved inside the diagram.
            </summary>
        </member>
        <member name="T:Emergent.Toolbench.EntityModeling.EntityModelPropertyProxy">
            <summary>
            The EntityModelPropertyProxy class is a proxy for the value override
            The get_Value will actually return:
             - The first overridden value found while going up in hierarchy
             - The source property value if no override found
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.EntityModeling.EntityModelPropertyProxy.#ctor(System.Collections.Generic.List{Emergent.Toolbench.EntityModeling.EntityModel},Emergent.Toolbench.EntityModeling.EntityModelProperty)">
            <summary>
            Initializes a new instance of the <see cref="T:Emergent.Toolbench.EntityModeling.EntityModelPropertyProxy"/> class.
            </summary>
            <param name="hierarchy">The overridden models to follow.</param>
            <param name="property">The entity model property.</param>
        </member>
        <member name="M:Emergent.Toolbench.EntityModeling.EntityModelPropertyProxy.HasTrait(System.String)">
            <summary>
            Get whether or not this property has a given trait by name.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.EntityModeling.EntityModelPropertyProxy.GetOverride">
            <summary>
            Gets the override.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Emergent.Toolbench.EntityModeling.EntityModelPropertyProxy.GetValueProviderModel">
            <summary>
            Gets the value provider model.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Emergent.Toolbench.EntityModeling.EntityModelPropertyProxy.ToggleOverride">
            <summary>
            Toggles the override state.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.EntityModeling.EntityModelPropertyProxy.RemoveOverride">
            <summary>
            Removes the override.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.EntityModeling.EntityModelPropertyProxy.OverrideProperty">
            <summary>
            Overrides the value.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.EntityModeling.EntityModelPropertyProxy.OverrideProperty(Emergent.Toolbench.TypeService.Types.DataValue,System.Collections.ObjectModel.ObservableCollection{Emergent.Toolbench.EntityModeling.Trait},System.Boolean)">
            <summary>
            Overrides the value.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.EntityModeling.EntityModelPropertyProxy.NotifyOverridePropertyChanged">
            <summary>
            Notify of override value changes
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.EntityModeling.EntityModelPropertyProxy.OnSourcePropertyChanging(System.Object,System.ComponentModel.PropertyChangingEventArgs)">
            <summary>
            Called when [source property changing].
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.ComponentModel.PropertyChangingEventArgs"/> 
            instance containing the event data.</param>
        </member>
        <member name="M:Emergent.Toolbench.EntityModeling.EntityModelPropertyProxy.OnSourcePropertyChanged(System.Object,System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            Called when [source property changed].
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.ComponentModel.PropertyChangedEventArgs"/> 
            instance containing the event data.</param>
        </member>
        <member name="P:Emergent.Toolbench.EntityModeling.EntityModelPropertyProxy.Name">
            <summary>
            Redirected
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.EntityModeling.EntityModelPropertyProxy.Description">
            <summary>
            Redirected
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.EntityModeling.EntityModelPropertyProxy.Value">
            <summary>
            Gets or sets the overridden value, if any, or the source property value
            Set a new value override, directly in the model
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.EntityModeling.EntityModelPropertyProxy.StringValue">
            <summary>
            Gets or sets the string value.
            The setter will automatically override the property
            </summary>
            <value>The string value.</value>
        </member>
        <member name="P:Emergent.Toolbench.EntityModeling.EntityModelPropertyProxy.ID">
            <summary> 
            Get the ID for this property.
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.EntityModeling.EntityModelPropertyProxy.Traits">
            <summary>
            Get the overridden value, if any, or the source property value
            Set a new value override, directly in the model
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.EntityModeling.EntityModelPropertyProxy.HasOverride">
            <summary>
            Gets or sets a value indicating if the property is overridden.
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.EntityModeling.EntityModelPropertyProxy.ModelHierarchy">
            <summary>
            Gets the model hierarchy.
            </summary>
            <value>The model hierarchy.</value>
        </member>
        <member name="T:Emergent.Toolbench.EntityModeling.EntityModelingProjectContextMenuProvider">
            <summary>
            Generates the context menus for EMT projects in the game solution.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.EntityModeling.EntityModelingProjectContextMenuProvider.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.EntityModeling.EntityModelingProjectContextMenuProvider.CreateItems(Emergent.Toolbench.UI.Workbench.DynamicContextMenuEventArgs)">
            <summary>
            Creates the menu items.
            </summary>
            <param name="e">The event arguments.</param>
            <returns>The list of menu items.</returns>
        </member>
        <member name="T:Emergent.Toolbench.EntityModeling.DiagramMigrationStep1to2">
            <summary>
            This step adds an 'ID' attribute to the Diagram element, to support the move of the
            'PersistentID' class property from the EntityModel class to the base ProjectContent class.
            This refactoring was necessary to be able to restore the last session when an emtproj
            is opened.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.EntityModeling.DiagramMigrationStep1to2.#ctor">
            <summary>
            Constructs an EMT diagram migration step.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.EntityModeling.DiagramMigrationStep1to2.Migrate(Emergent.Toolbench.MigrationService.MigrationDocument)">
            <summary>
            Migrates the specified document from version 1 to version 2
            </summary>
            <param name="document">The document.</param>
        </member>
        <member name="M:Emergent.Toolbench.EntityModeling.EntityModelDataValueExporter.Convert(Emergent.Toolbench.TypeService.Types.DataValue)">
            <summary>
            Gets the exported string value for data values.
            </summary>
            <param name="value">The <see cref="T:Emergent.Toolbench.TypeService.Types.DataValue"/> to convert.</param>
            <returns>The string representation of the <see cref="T:Emergent.Toolbench.TypeService.Types.DataValue"/>.</returns>
        </member>
        <member name="T:Emergent.Toolbench.EntityModeling.DiagramDocumentFactory">
            <summary>
            Factory for the diagram document
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.EntityModeling.DiagramDocumentFactory.Create">
            <summary>
            Creates a new instance of a document. This method is called when
            the content is created.
            </summary>
            <param name="args">Additional configuration data used to create
            the document.</param>
            <returns>A new document instance.</returns>
        </member>
        <member name="M:Emergent.Toolbench.EntityModeling.DiagramDocumentFactory.Open(System.Uri)">
            <summary>
            Opens content from the specified location and builds a new document
            from that content.
            </summary>
            <param name="location">The location.</param>
            <returns>A new document instance.</returns>
        </member>
        <member name="M:Emergent.Toolbench.EntityModeling.DiagramDocumentFactory.Save(Emergent.Toolbench.EntityModeling.ProjectContent,System.Uri)">
            <summary>
            Saves the specified document.
            </summary>
            <param name="document">The document to save.</param>
        </member>
        <member name="P:Emergent.Toolbench.EntityModeling.DiagramDocumentFactory.Extension">
            <summary>
            Gets the extension for the file.
            </summary>
            <value>The extension.</value>
        </member>
        <member name="P:Emergent.Toolbench.EntityModeling.DiagramDocumentFactory.DefaultName">
            <summary>
            Gets the default name of a new object.
            </summary>
            <value>The default name.</value>
        </member>
        <member name="P:Emergent.Toolbench.EntityModeling.DiagramDocumentFactory.DocumentType">
            <summary>
            Gets the type of the document this factory produces.
            </summary>
            <value>The type of the document.</value>
        </member>
        <member name="T:Emergent.Toolbench.EntityModeling.MultiEditStatus">
            <summary>
            Represent a <see cref="T:Emergent.Toolbench.EntityModeling.MultiEdit"/> instance class status
            </summary>
        </member>
        <member name="F:Emergent.Toolbench.EntityModeling.MultiEditStatus.Ready">
            <summary>
            The <see cref="T:Emergent.Toolbench.EntityModeling.MultiEdit"/> is up and running.
            </summary>
        </member>
        <member name="F:Emergent.Toolbench.EntityModeling.MultiEditStatus.GeneratingMultiEditProperties">
            <summary>
            The <see cref="T:Emergent.Toolbench.EntityModeling.MultiEdit"/> is generating its <see cref="T:Emergent.Toolbench.EntityModeling.MultiEditProperty"/>s.
            A client object should expect many notifications from the <see cref="T:Emergent.Toolbench.EntityModeling.MultiEditProperty"/>
            instances while the <see cref="T:Emergent.Toolbench.EntityModeling.MultiEdit"/> is in this state.
            </summary>
        </member>
        <member name="T:Emergent.Toolbench.EntityModeling.MultiEdit">
            <summary>
            This class is the data object layer managing all the <see cref="T:Emergent.Toolbench.EntityModeling.EntityModelPreset"/>s
            inherited instances for a multi-edit operation.
            One <see cref="T:Emergent.Toolbench.EntityModeling.MultiEditProperty"/> is created for every property name in the set
            made of the union of all the <see cref="T:Emergent.Toolbench.EntityModeling.EntityModelPreset"/>s <see cref="T:Emergent.Toolbench.EntityModeling.EntityModelProperty"/>s.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.EntityModeling.MultiEdit.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Emergent.Toolbench.EntityModeling.MultiEdit"/> class.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.EntityModeling.MultiEdit.Add(Emergent.Toolbench.EntityModeling.EntityModelPreset)">
            <summary>
            Adds the specified preset to the list of preset to multi-edit.
            </summary>
            <param name="newPreset">The new preset.</param>
        </member>
        <member name="M:Emergent.Toolbench.EntityModeling.MultiEdit.Add(System.Collections.Generic.List{Emergent.Toolbench.EntityModeling.EntityModelPreset})">
            <summary>
            Adds the specified presets to the list of preset to multi-edit.
            </summary>
            <param name="newPresets">The new presets.</param>
            <remarks>The method takes a list as a parameter to kind of force the
            caller to make a copy of its IEnumerable of presets, in case the source
            is a part (or all) of this instance preset collection. Modifying the collection
            while iterating over it throws an exception.</remarks>
        </member>
        <member name="M:Emergent.Toolbench.EntityModeling.MultiEdit.Remove(Emergent.Toolbench.EntityModeling.EntityModelPreset)">
            <summary>
            Removes the specified preset from the of preset to multi-edit.
            </summary>
            <param name="oldPreset">The old preset.</param>
        </member>
        <member name="M:Emergent.Toolbench.EntityModeling.MultiEdit.Remove(System.Collections.Generic.List{Emergent.Toolbench.EntityModeling.EntityModelPreset})">
            <summary>
            Removes the specified presets from the of preset to multi-edit.
            </summary>
            <param name="oldPresets">The old presets.</param>
            <remarks>The method takes a list as a parameter to kind of force the
            caller to make a copy of its IEnumerable of presets, in case the source
            is a part (or all) of this instance preset collection. Modifying the collection
            while iterating over it throws an exception.</remarks>
        </member>
        <member name="M:Emergent.Toolbench.EntityModeling.MultiEdit.Clear">
            <summary>
            Remove all the presets to multi-edit.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.EntityModeling.MultiEdit.OnMixinPropertiesValidating(System.Object,System.EventArgs)">
            <summary>
            Event handler for OnDemandCollection.Validating.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
            <remarks>The OnDemandCollection, when cleared, asks for a repopulation the next
            time it is iterated. That causes a lot of notifications in an unpredictable order
            (may get "add" before "reset". 
            When a validation is about to begin (which causes a repopulation), we unregister from 
            the event to avoid being spammed.</remarks>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Emergent.Toolbench.EntityModeling.MultiEdit.OnMixinPropertiesValidated(System.Object,System.EventArgs)" -->
        <member name="M:Emergent.Toolbench.EntityModeling.MultiEdit.RebuildFromMixinProperties">
            <summary>
            Rebuilds from mixin properties using the current set of multi-edit presets.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.EntityModeling.MultiEdit.OnMixinPropertiesCollectionChanged(System.Object,System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Called when the mixin properties collection changed.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.Collections.Specialized.NotifyCollectionChangedEventArgs"/> 
            instance containing the event data.</param>
        </member>
        <member name="M:Emergent.Toolbench.EntityModeling.MultiEdit.AddMixinProperties(System.Collections.Generic.IEnumerable{Emergent.Toolbench.EntityModeling.EntityModelPreset})">
            <summary>
            Adds the mixin properties for the specified set of presets.
            </summary>
            <param name="presets">The presets.</param>
        </member>
        <member name="M:Emergent.Toolbench.EntityModeling.MultiEdit.RemoveMixinProperties(System.Collections.Generic.IEnumerable{Emergent.Toolbench.EntityModeling.EntityModelPreset})">
            <summary>
            Removes the mixin properties for the specified set of presets.
            </summary>
            <param name="presets">The presets.</param>
        </member>
        <member name="M:Emergent.Toolbench.EntityModeling.MultiEdit.CleanEmptyMultiEditProperties">
            <summary>
            Forget the <see cref="T:Emergent.Toolbench.EntityModeling.MultiEditProperty"/> instances that contain no more
            mixin properties.
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.EntityModeling.MultiEdit.Presets">
            <summary>
            Gets the presets currently being multi-edited.
            </summary>
            <value>The presets.</value>
        </member>
        <member name="P:Emergent.Toolbench.EntityModeling.MultiEdit.MultiEditProperties">
            <summary>
            Gets the multi edit properties resulting from the <see cref="P:Emergent.Toolbench.EntityModeling.MultiEdit.Presets"/>.
            </summary>
            <value>The multi edit properties.</value>
        </member>
        <member name="M:Emergent.Toolbench.EntityModeling.ModelRestriction.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Emergent.Toolbench.EntityModeling.ModelRestriction"/> class.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.EntityModeling.ModelRestriction.IsValid(Emergent.Toolbench.TypeService.Types.DataValue)">
            <summary>
            Determines whether the specified value is valid.
            </summary>
            <param name="value">The value.</param>
            <returns>
            A collection of error message or empty collection if valid.
            </returns>
        </member>
        <member name="M:Emergent.Toolbench.EntityModeling.ModelRestriction.ToXml">
            <summary>
            Implement to return the instance serialized as an XStreamingElement.
            </summary>
            <returns>The serialized instance.</returns>
        </member>
        <member name="M:Emergent.Toolbench.EntityModeling.ModelRestriction.FromXml(System.Xml.Linq.XElement)">
            <summary>
            Implement to initialize the instance from the date in the XElement.
            </summary>
            <param name="element">The XElement containing the data to load from.</param>
        </member>
        <member name="P:Emergent.Toolbench.EntityModeling.ModelRestriction.XmlElementName">
            <summary>
            Gets the name of the XML element.
            </summary>
            <value>The name of the XML element.</value>
        </member>
        <member name="M:Emergent.Toolbench.EntityModeling.TraitManager.#cctor">
            <summary>
            Initializes the manager the first time the class is used.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.EntityModeling.TraitManager.FindBehaviorTrait(System.String)">
            <summary>
            Looks for a behavior trait descriptor matching the name.
            </summary>
            <param name="name">Name of the trait.</param>
            <returns>A trait descriptor representing the trait.</returns>
            <remarks>This method will create a temporary trait descriptor if the one searched for 
            is not found.  This is to ensure that traits that are deprecated or removed from the 
            system do not cause files to crash or other nasty things to occur.</remarks>
        </member>
        <member name="M:Emergent.Toolbench.EntityModeling.TraitManager.FindModelTrait(System.String)">
            <summary>
            Looks for a model trait descriptor matching the name.
            </summary>
            <param name="name">Name of the trait.</param>
            <returns>A trait descriptor representing the trait.</returns>
            <remarks>This method will create a temporary trait descriptor if the one searched for 
            is not found.  This is to ensure that traits that are deprecated or removed from the 
            system do not cause files to crash or other nasty things to occur.</remarks>
        </member>
        <member name="M:Emergent.Toolbench.EntityModeling.TraitManager.FindPropertyTrait(System.String)">
            <summary>
            Looks for a property trait descriptor matching the name.
            </summary>
            <param name="name">Name of the trait.</param>
            <returns>A trait descriptor representing the trait.</returns>
            <remarks>This method will create a temporary trait descriptor if the one searched for 
            is not found.  This is to ensure that traits that are deprecated or removed from the 
            system do not cause files to crash or other nasty things to occur.</remarks>
        </member>
        <member name="M:Emergent.Toolbench.EntityModeling.TraitManager.GetTraits(Emergent.Toolbench.IExtensionPoint)">
            <summary>
            Gets all traits defined in the specified extension point.
            </summary>
            <param name="extensionPoint">The target extension point.</param>
            <returns>Traits defined by the extension point.</returns>
        </member>
        <member name="M:Emergent.Toolbench.EntityModeling.TraitManager.CreateTraitDescriptor(Emergent.Toolbench.IElementData,Emergent.Toolbench.IExtensionPoint)">
            <summary>
            Helper method to create a trait descriptor and reconcile its data with
            the friendly name registry
            </summary>
            <param name="data">Trait element description</param>
            <param name="extensionPoint">Source extension point type</param>
            <returns>Fully constructed TraitDescriptor</returns>
        </member>
        <member name="M:Emergent.Toolbench.EntityModeling.TraitManager.Initialize">
            <summary>
            Initializes traits as defined via the extension point system.
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.EntityModeling.TraitManager.BehaviorTraits">
            <summary>
            Gets EMT behavior traits.
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.EntityModeling.TraitManager.ModelTraits">
            <summary>
            Gets EMT model traits.
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.EntityModeling.TraitManager.PropertyTraits">
            <summary>
            Gets EMT property traits.
            </summary>
        </member>
        <member name="T:Emergent.Toolbench.EntityModeling.EntityModelFolderAspect">
            <summary>
            Manages a set of virtual folders to organize entity models.
            </summary>
        </member>
        <member name="T:Emergent.Toolbench.EntityModeling.VirtualFolderAspect">
            <summary>
            Manages a set of virtual folders.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.EntityModeling.VirtualFolderAspect.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Emergent.Toolbench.EntityModeling.VirtualFolderAspect"/> class.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.EntityModeling.VirtualFolderAspect.ToXml">
            <summary>
            Gets an XML representation of the data stored on the aspect.
            </summary>
            <returns>The serialized aspect data.</returns>
        </member>
        <member name="M:Emergent.Toolbench.EntityModeling.VirtualFolderAspect.FromXml(System.Xml.Linq.XElement)">
            <summary>
            Reads in folder information from XML.
            </summary>
            <param name="xml">An XML tree, starting at the virtual folders root element.</param>
        </member>
        <member name="M:Emergent.Toolbench.EntityModeling.VirtualFolderAspect.LoadItem(Emergent.Toolbench.EntityModeling.IVirtualFolderItem)">
            <summary>
            Adds an item to the virtual folder already specified by the item.
            </summary>
            <param name="leaf">The item to add.</param>
        </member>
        <member name="M:Emergent.Toolbench.EntityModeling.VirtualFolderAspect.AddLeaf(Emergent.Toolbench.EntityModeling.IVirtualFolderItem)">
            <summary>
            Adds a leaf item to the selected virtual folder, if available.
            </summary>
            <param name="leaf">The leaf item to add.</param>
        </member>
        <member name="M:Emergent.Toolbench.EntityModeling.VirtualFolderAspect.RemoveLeaf(Emergent.Toolbench.EntityModeling.IVirtualFolderItem)">
            <summary>
            Removes a leaf item from a virtual folder.
            </summary>
            <param name="leaf">The leaf item to remove.</param>
        </member>
        <member name="M:Emergent.Toolbench.EntityModeling.VirtualFolderAspect.AddCachedFolder(Emergent.Toolbench.EntityModeling.VirtualFolder)">
            <summary>
            Adds a folder to the cache and starts monitoring events.
            </summary>
            <param name="folder">The folder to add.</param>
        </member>
        <member name="M:Emergent.Toolbench.EntityModeling.VirtualFolderAspect.RemoveCachedFolder(Emergent.Toolbench.EntityModeling.VirtualFolder)">
            <summary>
            Removes a folder from the cache and stops monitoring events.
            </summary>
            <param name="folder">The folder to remove.</param>
        </member>
        <member name="M:Emergent.Toolbench.EntityModeling.VirtualFolderAspect.OnItemAddedToFolder(System.Object,Emergent.Toolbench.EntityModeling.VirtualFolderItemEventArgs)">
            <summary>
            Called when an item is added to a folder.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The event object.</param>
        </member>
        <member name="M:Emergent.Toolbench.EntityModeling.VirtualFolderAspect.OnItemRemovedFromFolder(System.Object,Emergent.Toolbench.EntityModeling.VirtualFolderItemEventArgs)">
            <summary>
            Called when an item is removed from a folder.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The event object.</param>
        </member>
        <member name="P:Emergent.Toolbench.EntityModeling.VirtualFolderAspect.Folders">
            <summary>
            Gets the virtual folder hierarchy.
            </summary>
            <value>The virtual folder hierarchy.</value>
        </member>
        <member name="P:Emergent.Toolbench.EntityModeling.VirtualFolderAspect.FolderCache">
            <summary>
            Gets the folder cache, a mapping of Guids to virtual folders.
            </summary>
            <value>The folder cache.</value>
        </member>
        <member name="P:Emergent.Toolbench.EntityModeling.VirtualFolderAspect.RootFolder">
            <summary>
            Gets the root folder.
            </summary>
            <value>The root folder.</value>
        </member>
        <member name="P:Emergent.Toolbench.EntityModeling.VirtualFolderAspect.SelectedFolder">
            <summary>
            Gets or sets the selected folder.
            </summary>
            <value>The selected folder.</value>
        </member>
        <member name="P:Emergent.Toolbench.EntityModeling.VirtualFolderAspect.XmlRootName">
            <summary>
            Gets the XML root element name for the aspect.
            </summary>
            <value>The XML root element name for the aspect.</value>
        </member>
        <member name="T:Emergent.Toolbench.EntityModeling.VirtualFolderAspect.RootVirtualFolder">
            <summary>
            Specialized virtual folder to serve as the root of a virtual folder hierarchy.
            </summary>
        </member>
        <member name="T:Emergent.Toolbench.EntityModeling.VirtualFolder">
            <summary>
            Represents a virtual folder that can contain items implementing the
            <see cref="T:Emergent.Toolbench.EntityModeling.IVirtualFolderItem"/> interface, including other virtual folders.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.EntityModeling.VirtualFolder.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Emergent.Toolbench.EntityModeling.VirtualFolder"/> class.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.EntityModeling.VirtualFolder.#ctor(System.Guid,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Emergent.Toolbench.EntityModeling.VirtualFolder"/> class.
            </summary>
            <param name="id">The folder id.</param>
            <param name="name">The folder name.</param>
        </member>
        <member name="M:Emergent.Toolbench.EntityModeling.VirtualFolder.AddItem(Emergent.Toolbench.EntityModeling.IVirtualFolderItem)">
            <summary>
            Adds an item to the folder.
            </summary>
            <param name="item">The item to add.</param>
        </member>
        <member name="M:Emergent.Toolbench.EntityModeling.VirtualFolder.RemoveItem(Emergent.Toolbench.EntityModeling.IVirtualFolderItem)">
            <summary>
            Removes the item from the folder.
            </summary>
            <param name="item">The item to remove.</param>
        </member>
        <member name="M:Emergent.Toolbench.EntityModeling.VirtualFolder.RemoveItem(Emergent.Toolbench.EntityModeling.IVirtualFolderItem,System.Boolean)">
            <summary>
            Removes the item from the folder.
            </summary>
            <param name="item">The item to remove.</param>
            <param name="clearParent">If set to <c>true</c>, the parent folder reference is removed
            from the item itself.</param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Emergent.Toolbench.EntityModeling.VirtualFolder.OnItemPropertyChanged(System.Object,System.ComponentModel.PropertyChangedEventArgs)" -->
        <member name="M:Emergent.Toolbench.EntityModeling.VirtualFolder.OnItemCollectionChanged(System.Object,System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Handles the CollectionChanged event for the leaves and folders.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The event arguments.</param>
        </member>
        <member name="M:Emergent.Toolbench.EntityModeling.VirtualFolder.CanMoveTo(Emergent.Toolbench.EntityModeling.VirtualFolder,System.String@)">
            <summary>
            Determines whether the folder can move to the specified destination.
            </summary>
            <param name="destination">The destination folder.</param>
            <param name="error">A descriptive error message on failure.</param>
            <returns><c>true</c> if the folder can move to the specified destination; otherwise,
            <c>false</c>.</returns>
        </member>
        <member name="M:Emergent.Toolbench.EntityModeling.VirtualFolder.BuildPath">
            <summary>
            Constructs a list of folders leading from the root of the hierarchy to this folder.
            </summary>
            <returns>A list of folders representing the virtual path to this folder.</returns>
        </member>
        <member name="M:Emergent.Toolbench.EntityModeling.VirtualFolder.ValidateName(System.String)">
            <summary>
            Validates the name of the folder using the names of the parent folder.
            </summary>
            <param name="newName">The new name.</param>
            <returns>The validation result.</returns>
        </member>
        <member name="M:Emergent.Toolbench.EntityModeling.VirtualFolder.ToXml">
            <summary>
            Generates XML describing the folder.
            </summary>
            <returns>XML describing the folder.</returns>
        </member>
        <member name="M:Emergent.Toolbench.EntityModeling.VirtualFolder.FromXml(System.Xml.Linq.XElement)">
            <summary>
            Loads folder information from XML.
            </summary>
            <param name="xml">XML describing the folder.</param>
        </member>
        <member name="M:Emergent.Toolbench.EntityModeling.VirtualFolder.RaisePropertyChanged(System.String)">
            <summary>
            Raises the property changed.
            </summary>
            <param name="propertyName">Name of the property.</param>
        </member>
        <member name="M:Emergent.Toolbench.EntityModeling.VirtualFolder.RaisePropertyChanging(System.String)">
            <summary>
            Raises the property changing.
            </summary>
            <param name="propertyName">Name of the property.</param>
        </member>
        <member name="E:Emergent.Toolbench.EntityModeling.VirtualFolder.PropertyChanged">
            <summary>
            Occurs when a property value changes.
            </summary>
        </member>
        <member name="E:Emergent.Toolbench.EntityModeling.VirtualFolder.PropertyChanging">
            <summary>
            Occurs when a property value is changing.
            </summary>
        </member>
        <member name="E:Emergent.Toolbench.EntityModeling.VirtualFolder.ItemAdded">
            <summary>
            Occurs when an item is added to the folder.
            </summary>
        </member>
        <member name="E:Emergent.Toolbench.EntityModeling.VirtualFolder.ItemRemoved">
            <summary>
            Occurs when an item is removed from the folder.
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.EntityModeling.VirtualFolder.Id">
            <summary>
            Gets the folder id.
            </summary>
            <value>The folder id.</value>
        </member>
        <member name="P:Emergent.Toolbench.EntityModeling.VirtualFolder.Name">
            <summary>
            Gets or sets the folder name.
            </summary>
            <value>The folder name.</value>
        </member>
        <member name="P:Emergent.Toolbench.EntityModeling.VirtualFolder.ParentFolderId">
            <summary>
            Gets the parent folder id.
            </summary>
            <value>The parent folder id.</value>
        </member>
        <member name="P:Emergent.Toolbench.EntityModeling.VirtualFolder.ParentFolder">
            <summary>
            Gets or sets the parent folder.
            </summary>
            <value>The parent folder.</value>
        </member>
        <member name="P:Emergent.Toolbench.EntityModeling.VirtualFolder.IsSelected">
            <summary>
            Gets or sets a value indicating whether the folder is selected.
            </summary>
            <value><c>true</c> if the folder is selected; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Emergent.Toolbench.EntityModeling.VirtualFolder.IsFiltered">
            <summary>
            Gets a value indicating whether the folder is filtered.
            </summary>
            <value><c>true</c> if the folder is filtered; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Emergent.Toolbench.EntityModeling.VirtualFolder.RecursiveLeafCount">
            <summary>
            Gets the recursive count of items in this folder that are not folders.
            </summary>
            <value>The recursive leaf count.</value>
        </member>
        <member name="P:Emergent.Toolbench.EntityModeling.VirtualFolder.RecursiveLeaves">
            <summary>
            Gets the all the leaves recursively.
            </summary>
            <value>The recursive leaves.</value>
            <remarks>This method is implemented by using deferred execution. The immediate return 
            value is an object that stores all the information that is required to perform the 
            action. The query represented by this method is not executed until the object is 
            enumerated either by calling its GetEnumerator method directly or by using foreach
            </remarks>
        </member>
        <member name="P:Emergent.Toolbench.EntityModeling.VirtualFolder.FilterCount">
            <summary>
            Gets or sets the filter count.
            </summary>
            <value>The filter count.</value>
        </member>
        <member name="P:Emergent.Toolbench.EntityModeling.VirtualFolder.Folders">
            <summary>
            Gets a collection of the subfolders contained in the folder.
            </summary>
            <value>The subfolders contained in the folder.</value>
        </member>
        <member name="P:Emergent.Toolbench.EntityModeling.VirtualFolder.Leaves">
            <summary>
            Gets a collection of items in the folder that are not subfolders.
            </summary>
            <value>The items in the folder that are not subfolders.</value>
        </member>
        <member name="P:Emergent.Toolbench.EntityModeling.VirtualFolder.Items">
            <summary>
            Gets the virtual folder hierarchy.
            </summary>
            <value>The virtual folder hierarchy.</value>
        </member>
        <member name="M:Emergent.Toolbench.EntityModeling.VirtualFolderAspect.RootVirtualFolder.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Emergent.Toolbench.EntityModeling.VirtualFolderAspect.RootVirtualFolder"/> class.
            </summary>
            <param name="name">The name for the root folder.</param>
        </member>
        <member name="M:Emergent.Toolbench.EntityModeling.VirtualFolderAspect.RootVirtualFolder.CanMoveTo(Emergent.Toolbench.EntityModeling.VirtualFolder,System.String@)">
            <summary>
            Determines whether the folder can move to the specified destination.
            </summary>
            <param name="destination">The destination folder.</param>
            <param name="error">A descriptive error message on failure.</param>
            <returns><c>true</c> if the folder can move to the specified destination; otherwise,
            <c>false</c>.</returns>
        </member>
        <member name="M:Emergent.Toolbench.EntityModeling.EntityModelFolderAspect.CanConnectContent(Emergent.Toolbench.ContentService.AbstractContent)">
            <summary>
            Determines whether this aspect can connect with the specified content.
            </summary>
            <param name="content">The content to connect.</param>
            <returns><c>true</c> if this aspect can connect with the specified content; otherwise,
            <c>false</c>.</returns>
        </member>
        <member name="M:Emergent.Toolbench.EntityModeling.EntityModelFolderAspect.OnContentConnected">
            <summary>
            Connects the aspect to the specified content.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.EntityModeling.EntityModelFolderAspect.OnContentDisconnected">
            <summary>
            Called just before the aspect is removed from the content it is currently attached to.
            </summary>        
        </member>
        <member name="M:Emergent.Toolbench.EntityModeling.EntityModelFolderAspect.OnEntityModelsChanged(System.Object,System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Called when entity models are added or removed from the project.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The event object.</param>
        </member>
        <member name="T:Emergent.Toolbench.EntityModeling.EntityModelPresetDocumentFactory">
            <summary>
            Factory for the presets of entity models.  This class manages the persistance of 
            the EntityModelPreset class.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.EntityModeling.EntityModelPresetDocumentFactory.GetTypeOfDocument">
            <summary>
            Gets the type of document typeof(EntityModelPreset)
            </summary>
            <returns></returns>
        </member>
        <member name="M:Emergent.Toolbench.EntityModeling.EntityModelPresetDocumentFactory.Create">
            <summary>
            Creates a new instance of a document. This method is called when
            the content is created.
            </summary>
            <param name="args">Additional configuration data used to create
            the document.</param>
            <returns>A new document instance.</returns>
        </member>
        <member name="P:Emergent.Toolbench.EntityModeling.EntityModelPresetDocumentFactory.Extension">
            <summary>
            Gets the extension for the file.
            </summary>
            <value>The extension.</value>
        </member>
        <member name="P:Emergent.Toolbench.EntityModeling.EntityModelPresetDocumentFactory.DefaultName">
            <summary>
            Gets the default name of a new object.
            </summary>
            <value>The default name.</value>
        </member>
        <member name="P:Emergent.Toolbench.EntityModeling.EntityModelPresetDocumentFactory.DocumentType">
            <summary>
            Gets the type of the document this factory produces.
            </summary>
            <value>The type of the document.</value>
        </member>
        <member name="T:Emergent.Toolbench.EntityModeling.ProjectContentChangedReason">
            <summary>
            Enumerates possible reasons that can raise a content changed.
            </summary>
        </member>
        <member name="F:Emergent.Toolbench.EntityModeling.ProjectContentChangedReason.Added">
            <summary>
            The active content has been added.
            </summary>
        </member>
        <member name="F:Emergent.Toolbench.EntityModeling.ProjectContentChangedReason.Inspected">
            <summary>
            A new project content has been inspected.
            </summary>
        </member>
        <member name="F:Emergent.Toolbench.EntityModeling.ProjectContentChangedReason.Navigated">
            <summary>
            The navigation system has navigated to a new project content.
            </summary>
        </member>
        <member name="F:Emergent.Toolbench.EntityModeling.ProjectContentChangedReason.Removed">
            <summary>
            The active content has been removed.
            </summary>
        </member>
        <member name="T:Emergent.Toolbench.EntityModeling.ProjectContentChangedEventArgs">
            <summary>
            Provides project content event data.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.EntityModeling.ProjectContentChangedEventArgs.#ctor(Emergent.Toolbench.EntityModeling.ProjectContent,Emergent.Toolbench.EntityModeling.ProjectContentChangedReason)">
            <summary>
            Initializes a new instance of the <see cref="T:Emergent.Toolbench.EntityModeling.ProjectContentChangedEventArgs"/> class.
            </summary>
            <param name="activeProjectContent">Content of the active project.</param>
        </member>
        <member name="P:Emergent.Toolbench.EntityModeling.ProjectContentChangedEventArgs.ProjectContent">
            <summary>
            Gets or sets the content of the active project.
            </summary>
            <value>The content of the active project.</value>
        </member>
        <member name="P:Emergent.Toolbench.EntityModeling.ProjectContentChangedEventArgs.Reason">
            <summary>
            Gets or sets the reason of the change.
            </summary>
            <value>The reason.</value>
        </member>
        <member name="T:Emergent.Toolbench.EntityModeling.ModelingProjectDocument">
            <summary>
            Entity Modeling project document.  This class provides a scope for the relationships 
            between entity models.  Models can only have mixins from the same project.  Diagrams
            can only have models from the projects they're in.  The ModelingProjectDocument relies on
            the GameSolutionItem hierarchy to manage its internal files.
            </summary>
        </member>
        <member name="T:Emergent.Toolbench.EntityModeling.IProjectReferenceOwner">
            <summary>
            Interface for the objects supporting modeling project references.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.EntityModeling.IProjectReferenceOwner.AddReference(Emergent.Toolbench.EntityModeling.ModelingProjectDocument)">
            <summary>
            Adds a project reference.
            </summary>
            <param name="project">The project.</param>
            <param name="context">The opening context. See ContentContext</param>
            <returns>
            true if added successfully, false if the reference exists already.
            </returns>
        </member>
        <member name="M:Emergent.Toolbench.EntityModeling.IProjectReferenceOwner.AddReference(System.Uri)">
            <summary>
            Adds a reference to the given project from disk.
            </summary>
            <param name="path">The path.</param>
            <returns>true if successful</returns>
        </member>
        <member name="M:Emergent.Toolbench.EntityModeling.IProjectReferenceOwner.RemoveReference(Emergent.Toolbench.EntityModeling.ModelingProjectDocument)">
            <summary>
            Removes the project reference.
            </summary>
            <param name="project">The project.</param>
        </member>
        <member name="M:Emergent.Toolbench.EntityModeling.IProjectReferenceOwner.RemoveReference(System.Uri)">
            <summary>
            Removes the project reference.
            </summary>
            <param name="path">The path.</param>
            <returns></returns>
        </member>
        <member name="M:Emergent.Toolbench.EntityModeling.IProjectReferenceOwner.GetDependentObjects(Emergent.Toolbench.EntityModeling.ModelingProjectDocument)">
            <summary>
            Gets the objects that use models in the given project.
            </summary>
            <param name="project">The project.</param>
            <returns></returns>
        </member>
        <member name="P:Emergent.Toolbench.EntityModeling.IProjectReferenceOwner.References">
            <summary>
            Gets the project reference list.
            </summary>
            <value>The list of project paths.</value>
        </member>
        <member name="P:Emergent.Toolbench.EntityModeling.IProjectReferenceOwner.Models">
            <summary>
            Gets all the models included in all the references as a single flat collection.
            </summary>
            <value>The models.</value>
        </member>
        <member name="E:Emergent.Toolbench.EntityModeling.IProjectReferenceOwner.ReferencesChanged">
            <summary>
            Occurs when the reference collection changed.
            </summary>
        </member>
        <member name="F:Emergent.Toolbench.EntityModeling.ModelingProjectDocument.DocumentType">
            <summary>
            This constant is the content id known by the ContentService for this type of document.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.EntityModeling.ModelingProjectDocument.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Emergent.Toolbench.EntityModeling.ModelingProjectDocument"/> class.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.EntityModeling.ModelingProjectDocument.OnCreated">
            <summary>
            Called when the game solution is created for the first time.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.EntityModeling.ModelingProjectDocument.GetDirectory(System.String)">
            <summary>
            Gets the directory specified by a setting on this document.
            </summary>
            <param name="settingName">Name of the setting.</param>
            <returns>The full path to the requested directory, which we attempted to create
            if it did not already exist (no guarantee it succeeded).</returns>
        </member>
        <member name="M:Emergent.Toolbench.EntityModeling.ModelingProjectDocument.SetActiveProjectContent(Emergent.Toolbench.EntityModeling.ProjectContent,Emergent.Toolbench.EntityModeling.ProjectContentChangedReason)">
            <summary>
            Sets the active project content.
            </summary>
            <param name="projectContent">Project content.</param>
            <param name="reason">The reason of the change.</param>
        </member>
        <member name="M:Emergent.Toolbench.EntityModeling.ModelingProjectDocument.CreateContent(Emergent.Toolbench.EntityModeling.ModelingProjectDocument.ObjectType,System.String,System.String)">
            <summary>
            Creates a project object of the specified type in the given path.
            </summary>
            <param name="objType">Type of the object.</param>
            <param name="name">The name.  Can be null, the default name will be used.</param>
            <param name="path">The relative path (namespace).  Can be null, in which case the
            default path for new objects of the specified type will be used.</param>
            <returns></returns>
        </member>
        <member name="M:Emergent.Toolbench.EntityModeling.ModelingProjectDocument.CreateFromFile(System.Uri,System.String@)">
            <summary>
            Loads the file from the given location.
            </summary>
            <param name="context">The context.</param>
            <param name="item">The item.</param>
        </member>
        <member name="M:Emergent.Toolbench.EntityModeling.ModelingProjectDocument.AddContent(Emergent.Toolbench.EntityModeling.ProjectContent,System.Boolean)">
            <summary>
            Adds an existing object to the project.
            </summary>
            <param name="content">The content.</param>
        </member>
        <member name="M:Emergent.Toolbench.EntityModeling.ModelingProjectDocument.RemoveContent(Emergent.Toolbench.EntityModeling.ProjectContent,System.Boolean)">
            <summary>
            Removes the given content from the project.
            </summary>
            <param name="content">The content.</param>
            <param name="deleteFile">if set to <c>true</c> delete the file.</param>
        </member>
        <member name="M:Emergent.Toolbench.EntityModeling.ModelingProjectDocument.GetContentPath(Emergent.Toolbench.EntityModeling.ProjectContent)">
            <summary>
            Gets the file path for this content object.
            </summary>
            <param name="content">The content.</param>
            <returns></returns>
        </member>
        <member name="M:Emergent.Toolbench.EntityModeling.ModelingProjectDocument.GetContentPath(System.String,System.String,System.String)">
            <summary>
            Gets the file path for this content object.
            </summary>
            <param name="path">The object's path (aka Namespace).</param>
            <param name="name">The object's name.</param>
            <param name="extension">The file extension.</param>
            <returns></returns>
        </member>
        <member name="M:Emergent.Toolbench.EntityModeling.ModelingProjectDocument.NamespaceFromPath(System.Uri)">
            <summary>
            Makes a path relative to the project from the full path.
            </summary>
            <param name="path">The path.</param>
            <returns></returns>
        </member>
        <member name="M:Emergent.Toolbench.EntityModeling.ModelingProjectDocument.Register(Emergent.Toolbench.EntityModeling.EntityModel)">
            <summary>
            Registers a new model.
            </summary>
            <param name="model">The model to register in this document</param>
            <returns>
            Returns true if successfully registered, false if the model is already known.
            </returns>
        </member>
        <member name="M:Emergent.Toolbench.EntityModeling.ModelingProjectDocument.Unregister(Emergent.Toolbench.EntityModeling.EntityModel)">
            <summary>
            Unregisters the specified model.
            </summary>
            <param name="model">The model.</param>
        </member>
        <member name="M:Emergent.Toolbench.EntityModeling.ModelingProjectDocument.AddReference(Emergent.Toolbench.EntityModeling.ModelingProjectDocument)">
            <summary>
            Adds a project reference.
            </summary>
            <param name="path">The path of the project file</param>
            <returns></returns>
        </member>
        <member name="M:Emergent.Toolbench.EntityModeling.ModelingProjectDocument.RemoveReference(Emergent.Toolbench.EntityModeling.ModelingProjectDocument)">
            <summary>
            Removes the project and its models from the reference list
            </summary>
            <param name="path">The path of the project.</param>
        </member>
        <member name="M:Emergent.Toolbench.EntityModeling.ModelingProjectDocument.RemoveReference(System.Uri)">
            <summary>
            Removes the project reference.
            </summary>
            <param name="path">The path.</param>
            <returns></returns>
        </member>
        <member name="M:Emergent.Toolbench.EntityModeling.ModelingProjectDocument.GetDependentObjects(Emergent.Toolbench.EntityModeling.ModelingProjectDocument)">
            <summary>
            Gets the objects that use models in the given project.
            </summary>
            <param name="project">The project.</param>
            <returns></returns>
        </member>
        <member name="M:Emergent.Toolbench.EntityModeling.ModelingProjectDocument.ReferenceCycleCheck(Emergent.Toolbench.EntityModeling.ModelingProjectDocument)">
            <summary>
            Checks for cycles in the references.
            </summary>
            <param name="toFind">The project to look for.</param>
            <returns>True if found, false otherwise.</returns>
        </member>
        <member name="M:Emergent.Toolbench.EntityModeling.ModelingProjectDocument.RemoveReferenceModels(Emergent.Toolbench.EntityModeling.ModelingProjectDocument)">
            <summary>
            Removes the referenced models.
            </summary>
            <param name="path">The path.</param>
        </member>
        <member name="M:Emergent.Toolbench.EntityModeling.ModelingProjectDocument.OnReferencedModelsCollectionChanged(System.Object,System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Handles the CollectionChanged event of the EntityModels collection of referenced 
            projects.  The parent project will be modified to include the subproject's models.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.Collections.Specialized.NotifyCollectionChangedEventArgs"/> instance containing 
            the event data.</param>
        </member>
        <member name="M:Emergent.Toolbench.EntityModeling.ModelingProjectDocument.OnProjectObjectDirtyChanged(System.Object,System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            Link the Dirty status of all project objects (models, diagrams, presets) with
            the project.
            </summary>
            <param name="sender">The sender.</param>
        </member>
        <member name="M:Emergent.Toolbench.EntityModeling.ModelingProjectDocument.New">
            <summary>
            Called when a new document is created
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.EntityModeling.ModelingProjectDocument.Load(Emergent.Toolbench.ContentService.ContentCreationSettings)">
            <summary>
            Loads this instance from file
            </summary>
            <returns><c>true</c> if the load succeeded, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Emergent.Toolbench.EntityModeling.ModelingProjectDocument.LoadFile(System.Uri)">
            <summary>
            Loads the file associated to the GameSolution item.
            </summary>
            <param name="context">The context.</param>
            <param name="item">The item.</param>
        </member>
        <member name="M:Emergent.Toolbench.EntityModeling.ModelingProjectDocument.ResolveMixins(Emergent.Toolbench.EntityModeling.EntityModel,System.String@)">
            <summary>
            Resolves the mixins.
            </summary>
            <param name="model">The model.</param>
            <param name="error">The error.</param>
            <returns>True if success, false if error. </returns>
        </member>
        <member name="M:Emergent.Toolbench.EntityModeling.ModelingProjectDocument.Save">
            <summary>
            Saves this instance in a file.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.EntityModeling.ModelingProjectDocument.ExportFlatModels">
            <summary>
            Exports the flat models if necessary.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.EntityModeling.ModelingProjectDocument.OnClosing">
            <summary>
            Called when the content is closing.  
            Release all project documents we kept alive by reference.
            Save the PerContent settings.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.EntityModeling.ModelingProjectDocument.FindFileName(System.String,System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            Finds the default name of the file.  
            It will ensure that no other file exist in the directory.
            </summary>
            <param name="startDir">The start directory.</param>
            <param name="defaultName">The default name.</param>
            <param name="extension">The extension.</param>
            <param name="bCheckModels">if set to <c>true</c> to check for duplicate models.</param>
            <returns></returns>
        </member>
        <member name="M:Emergent.Toolbench.EntityModeling.ModelingProjectDocument.InitProjectContent(Emergent.Toolbench.EntityModeling.ProjectContent,System.Boolean,System.Uri)">
            <summary>
            Initializes an object (model/preset/diagram) in the project.  This is common code
            for the 3 objects.
            </summary>
            <param name="content">The object to initialize</param>
            <param name="location">The location of the file</param>
        </member>
        <member name="M:Emergent.Toolbench.EntityModeling.ModelingProjectDocument.OnContentCollectionChanged(System.Object,System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Called when the Contents collection changed.  It will do additional work to initialize
            or cleanup the modified objects.  This is usefull because it allows us to use the 
            Databound.ActionManager for the undos.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The 
            <see cref="T:System.Collections.Specialized.NotifyCollectionChangedEventArgs"/> 
            instance containing the event data.</param>
        </member>
        <member name="M:Emergent.Toolbench.EntityModeling.ModelingProjectDocument.OnContentDeleted(System.Object,Emergent.Toolbench.ContentService.ContentEventArgs)">
            <summary>
            Called when content was deleted. Removed the content from the collection
            </summary>
            <param name="sender">The sender.</param>
        </member>
        <member name="M:Emergent.Toolbench.EntityModeling.ModelingProjectDocument.TypeToExtension(Emergent.Toolbench.EntityModeling.ModelingProjectDocument.ObjectType)">
            <summary>
            Converts the object type to the corresponding file extension.
            </summary>
            <param name="objType">Type of the object.</param>
            <returns>The extension.</returns>
        </member>
        <member name="M:Emergent.Toolbench.EntityModeling.ModelingProjectDocument.TypeToDefaultPath(Emergent.Toolbench.EntityModeling.ModelingProjectDocument.ObjectType)">
            <summary>
            Get the default path for a new object of the specified type.
            </summary>
            <param name="objType">Type of the object.</param>
            <returns>Default path for a new object of the specified type.</returns>
        </member>
        <member name="E:Emergent.Toolbench.EntityModeling.ModelingProjectDocument.ActiveProjectContentChanged">
            <summary>
            Occurs when the active project content changed.
            </summary>
        </member>
        <member name="E:Emergent.Toolbench.EntityModeling.ModelingProjectDocument.ReferencesChanged">
            <summary>
            Occurs when the reference collection changed.
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.EntityModeling.ModelingProjectDocument.Definition">
            <summary>
            Gets the XML definition of the project that was loaded.
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.EntityModeling.ModelingProjectDocument.EntityModels">
            <summary>
            Gets the entity models collection. 
            </summary>
            <value>The entity models.</value>
        </member>
        <member name="P:Emergent.Toolbench.EntityModeling.ModelingProjectDocument.Contents">
            <summary>
            Gets the collection of objects in the project.
            </summary>
            <value>The contents.</value>
        </member>
        <member name="P:Emergent.Toolbench.EntityModeling.ModelingProjectDocument.LoadErrors">
            <summary>
            Gets the object files that didn't load properly.
            </summary>
            <value>The load errors.</value>
        </member>
        <member name="P:Emergent.Toolbench.EntityModeling.ModelingProjectDocument.FlatModelsOutputDirectory">
            <summary>
            Gets the flat models output directory.
            </summary>
            <value>The flat models output directory.</value>
        </member>
        <member name="P:Emergent.Toolbench.EntityModeling.ModelingProjectDocument.BehaviorScriptsOutputDirectory">
            <summary>
            Gets the behavior scripts output directory.
            </summary>
            <value>The behavior scripts output directory.</value>
        </member>
        <member name="P:Emergent.Toolbench.EntityModeling.ModelingProjectDocument.ModelsAndPresetsOutputDirectory">
            <summary>
            Gets the models and presets output directory.
            </summary>
            <value>The models and presets output directory.</value>
        </member>
        <member name="P:Emergent.Toolbench.EntityModeling.ModelingProjectDocument.DiagramsOutputDirectory">
            <summary>
            Gets the diagrams output directory.
            </summary>
            <value>The diagrams output directory.</value>
        </member>
        <member name="P:Emergent.Toolbench.EntityModeling.ModelingProjectDocument.ActiveContent">
            <summary>
            Gets the active content object.
            </summary>
            <value>The active content object.</value>
        </member>
        <member name="P:Emergent.Toolbench.EntityModeling.ModelingProjectDocument.References">
            <summary>
            Gets the project reference list.
            </summary>
            <value>The list of project paths.</value>
        </member>
        <member name="P:Emergent.Toolbench.EntityModeling.ModelingProjectDocument.AllReferences">
            <summary>
            Gets all the project references list by tracing over all references of all projects
            referenced.
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.EntityModeling.ModelingProjectDocument.Models">
            <summary>
            Gets all the models included in all the references as a single flat collection.
            </summary>
            <value>The models.</value>
        </member>
        <member name="T:Emergent.Toolbench.EntityModeling.ExtraDataEntry">
            <summary>
            An ExtraDataEntry is the building block of the ExtraData class.
            ExtraData is composed of a series of ExtraDataEntry's, where
            the ExtraDataEntry consists of a type, key, and value (all strings).
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.EntityModeling.ExtraDataEntry.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.EntityModeling.ExtraDataEntry.#ctor(System.String,System.String,System.String)">
            <summary>
            Constructs an entry given its type, key, and value.
            </summary>
            <param name="type">Type of the entry.</param>
            <param name="key">Key (name) of the entry.</param>
            <param name="value">Value of the entry.</param>
        </member>
        <member name="P:Emergent.Toolbench.EntityModeling.ExtraDataEntry.Type">
            <summary>
            Gets or sets the entry's type.
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.EntityModeling.ExtraDataEntry.Key">
            <summary>
            Gets or sets the entry's key.
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.EntityModeling.ExtraDataEntry.Value">
            <summary>
            Gets or sets the entry's value.
            </summary>
        </member>
        <member name="T:Emergent.Toolbench.EntityModeling.ExtraData">
            <summary>
            ExtraData stores a series of ExtraDataEntry's, which are key-value
            paired data items that can be used to annotate a flat model with
            further information beyond what is normally provided by the tools.
            This data is typically used for debugging or tools-only related purposes.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.EntityModeling.ExtraData.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.EntityModeling.ExtraData.Entries_CollectionChanged(System.Object,System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Called when the Entries collection changes.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Emergent.Toolbench.EntityModeling.ExtraData.GetEntriesOfType(System.String)">
            <summary>
            Gets all the entries of a certain type.
            </summary>
            <param name="type">Type of entry to get.</param>
            <returns>The ObservableCollection which has the entries of the given type.</returns>
        </member>
        <member name="M:Emergent.Toolbench.EntityModeling.ExtraData.AddNewEntry(System.String,System.String,System.String)">
            <summary>
            Adds a new entry.  If the entry already exists, its value will not be changed.
            </summary>
            <param name="type">Type of the entry to add.</param>
            <param name="key">Key of the entry to add.</param>
            <param name="value">Value of the entry to add.</param>
        </member>
        <member name="M:Emergent.Toolbench.EntityModeling.ExtraData.GetEntry(System.String)">
            <summary>
            Gets an entry with a given key.
            </summary>
            <param name="key">Key of the entry to get.</param>
            <returns>The ExtraDataEntry object for the entry.</returns>
        </member>
        <member name="M:Emergent.Toolbench.EntityModeling.ExtraData.GetEntryValue(System.String)">
            <summary>
            Gets an entry's value with a given key.
            </summary>
            <param name="key">Key of the entry to get.</param>
            <returns>The value of the entry, or an empty string if the entry didn't exist.</returns>
        </member>
        <member name="M:Emergent.Toolbench.EntityModeling.ExtraData.ToXml">
            <summary>
            Serializes the ExtraData to an XStreamingElement, which can then be
            used while saving the EntityModel this ExtraData is bound to.
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.EntityModeling.ExtraData.Name">
            <summary>
            Gets or sets the name of the ExtraData.
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.EntityModeling.ExtraData.Type">
            <summary>
            Gets or sets the type.
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.EntityModeling.ExtraData.Entries">
            <summary>
            Gets or sets the Entries.
            </summary>
        </member>
        <member name="T:Emergent.Toolbench.EntityModeling.VirtualFolderItemEventArgs">
            <summary>
            A class for holding arguments for events involving virtual folder items.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.EntityModeling.VirtualFolderItemEventArgs.#ctor(Emergent.Toolbench.EntityModeling.IVirtualFolderItem)">
            <summary>
            Initializes a new instance of the <see cref="T:Emergent.Toolbench.EntityModeling.VirtualFolderItemEventArgs"/> class.
            </summary>
            <param name="item">The item.</param>
        </member>
        <member name="P:Emergent.Toolbench.EntityModeling.VirtualFolderItemEventArgs.Item">
            <summary>
            Gets or sets the item.
            </summary>
            <value>The item.</value>
        </member>
        <member name="M:Emergent.Toolbench.EntityModeling.EntityModelMixin.#ctor">
            <summary>
            Default constructor.
            This is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.EntityModeling.EntityModelMixin.#ctor(Emergent.Toolbench.EntityModeling.EntityModel,Emergent.Toolbench.EntityModeling.EntityModel)">
            <summary>
            Constructor.
            </summary>
            <param name="source">The source or parent of the mixin.</param>
            <param name="target">The target or destination of the mixin.</param>
        </member>
        <member name="M:Emergent.Toolbench.EntityModeling.EntityModelMixin.ToXml">
            <summary>
            Implement to return the instance serialized as an XStreamingElement.
            </summary>
            <returns>The serialized instance.</returns>
        </member>
        <member name="M:Emergent.Toolbench.EntityModeling.EntityModelMixin.FromXml(System.Xml.Linq.XElement)">
            <summary>
            Implement to initialize the instance from the date in the XElement.
            </summary>
            <param name="element">The XElement containing the data to load from.</param>
        </member>
        <member name="M:Emergent.Toolbench.EntityModeling.EntityModelMixin.Resolve(Emergent.Toolbench.EntityModeling.ModelingProjectDocument,Emergent.Toolbench.EntityModeling.EntityModel)">
            <summary>
            Resolves the specified model mixin.
            </summary>
            <param name="context">The project to search the mixin source in.</param>
            <param name="model">The target model.</param>
            <returns></returns>
        </member>
        <member name="M:Emergent.Toolbench.EntityModeling.EntityModelMixin.Connect(Emergent.Toolbench.EntityModeling.EntityModel,Emergent.Toolbench.EntityModeling.EntityModel)">
            <summary>
            Connects the specified source and target together.
            </summary>
            <param name="source">The source.</param>
            <param name="target">The target.</param>
        </member>
        <member name="M:Emergent.Toolbench.EntityModeling.EntityModelMixin.OnSourceEntityDeleted(System.Object,System.EventArgs)">
            <summary>
            Called when the source of the mixin is deleted
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="P:Emergent.Toolbench.EntityModeling.EntityModelMixin.Source">
            <summary>
            Get the Source/parent of the mixin.
            The set is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.EntityModeling.EntityModelMixin.Target">
            Get the Target/destination of the mixin.
            The set is not intended to be used directly from your code.
        </member>
        <member name="P:Emergent.Toolbench.EntityModeling.EntityModelMixin.SourceID">
            <summary>
            Gets or sets the source ID.
            </summary>
            <value>The source ID.</value>
        </member>
        <member name="P:Emergent.Toolbench.EntityModeling.EntityModelMixin.SourceName">
            <summary>
            Gets or sets the name of the source.  This is used by the persistence only.  It 
            makes resolving errors easier for the user.
            </summary>
            <value>The name of the source.</value>
        </member>
        <member name="P:Emergent.Toolbench.EntityModeling.EntityModelMixin.XmlElementName">
            <summary>
            Gets the name of the XML element.
            </summary>
            <value>The name of the XML element.</value>
        </member>
        <member name="T:Emergent.Toolbench.EntityModeling.VirtualFolderComparer">
            <summary>
            Utility class for sorting virtual folders.
            </summary>
        </member>
        <member name="F:Emergent.Toolbench.EntityModeling.VirtualFolderComparer.Default">
            <summary>
            Singleton instance of <see cref="T:Emergent.Toolbench.EntityModeling.VirtualFolderComparer"/>.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.EntityModeling.VirtualFolderComparer.Compare(System.Object,System.Object)">
            <summary>
            Compares two objects and returns a value indicating whether one is less than, equal to,
            or greater than the other.
            </summary>
            <param name="x">The first object to compare.</param>
            <param name="y">The second object to compare.</param>
            <returns>Value indicating result of comparison, 0 if equal.</returns>
        </member>
        <member name="M:Emergent.Toolbench.EntityModeling.VirtualFolderComparer.Compare(Emergent.Toolbench.EntityModeling.VirtualFolder,Emergent.Toolbench.EntityModeling.VirtualFolder)">
            <summary>
            Compares two objects and returns a value indicating whether one is less than, equal to,
            or greater than the other.
            </summary>
            <param name="x">The first object to compare.</param>
            <param name="y">The second object to compare.</param>
            <returns>Value indicating result of comparison, 0 if equal.</returns>
        </member>
        <member name="T:Emergent.Toolbench.EntityModeling.QueryEngine">
            <summary>
            This class is used to search models in projects.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.EntityModeling.QueryEngine.#ctor(Emergent.Toolbench.EntityModeling.QueryEngineData,System.Collections.Generic.IEnumerable{Emergent.Toolbench.EntityModeling.ModelingProjectDocument})">
            <summary>
            Initializes a new instance of the <see cref="T:Emergent.Toolbench.EntityModeling.QueryEngine"/> class.
            </summary>
            <param name="data">The data.</param>
            <param name="projects">The projects.</param>
        </member>
        <member name="M:Emergent.Toolbench.EntityModeling.QueryEngine.ExecuteSearch">
            <summary>
            Executes the search.
            </summary>
            <returns>A collection of EntityModels.</returns>
        </member>
        <member name="T:Emergent.Toolbench.EntityModeling.PropertyOverride">
            <summary>
            The value override class take care of keeping the entity model property
            value overrides and stores the association:
             - PropertyName (key)
             - DataValue (value)
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.EntityModeling.PropertyOverride.#ctor">
            <summary>
            Default constructor for serializer
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.EntityModeling.PropertyOverride.#ctor(Emergent.Toolbench.EntityModeling.EntityModelProperty,Emergent.Toolbench.TypeService.Types.DataValue,System.Collections.ObjectModel.ObservableCollection{Emergent.Toolbench.EntityModeling.Trait},Emergent.Toolbench.EntityModeling.EntityModel,System.Boolean)">
            <summary>
            Constructor for creating a value override manually
            </summary>
            <param name="property">The property to override</param>
            <param name="value">The override value</param>
        </member>
        <member name="M:Emergent.Toolbench.EntityModeling.PropertyOverride.Initialize(Emergent.Toolbench.EntityModeling.EntityModel)">
            <summary>
            Called when persistence is finished loading, to resolve references
            </summary>
            <param name="model">The owner model</param>
        </member>
        <member name="M:Emergent.Toolbench.EntityModeling.PropertyOverride.ToXml">
            <summary>
            Implement to return the instance serialized as an XStreamingElement.
            </summary>
            <returns>The serialized instance.</returns>
        </member>
        <member name="M:Emergent.Toolbench.EntityModeling.PropertyOverride.FromXml(System.Xml.Linq.XElement)">
            <summary>
            Implement to initialize the instance from the date in the XElement.
            </summary>
            <param name="element">The XElement containing the data to load from.</param>
        </member>
        <member name="P:Emergent.Toolbench.EntityModeling.PropertyOverride.Name">
            <summary>
            The property name
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.EntityModeling.PropertyOverride.Description">
            <summary>
            Gets or sets the description.
            </summary>
            <value>The description.</value>
        </member>
        <member name="P:Emergent.Toolbench.EntityModeling.PropertyOverride.Value">
            <summary>
            The value override
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.EntityModeling.PropertyOverride.Restriction">
            <summary>
            Gets or sets the restriction.
            </summary>
            <value>The restriction.</value>
        </member>
        <member name="P:Emergent.Toolbench.EntityModeling.PropertyOverride.TraitOverrides">
            <summary>
            Gets a collection of TraitOverride.
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.EntityModeling.PropertyOverride.Traits">
            <summary>
            Gets a read-only collection of traits.
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.EntityModeling.PropertyOverride.OwnerModel">
            <summary>
            Gets the owner model.
            </summary>
            <value>The model.</value>
        </member>
        <member name="P:Emergent.Toolbench.EntityModeling.PropertyOverride.BaseProperty">
            <summary>
            Gets the base property.
            </summary>
            <value>The base property.</value>
        </member>
        <member name="P:Emergent.Toolbench.EntityModeling.PropertyOverride.XmlElementName">
            <summary>
            Gets the name of the XML element.
            </summary>
            <value>The name of the XML element.</value>
        </member>
        <member name="M:Emergent.Toolbench.EntityModeling.TraitOverride.ToXml">
            <summary>
            Implement to return the instance serialized as an XStreamingElement.
            </summary>
            <returns>The serialized instance.</returns>
        </member>
        <member name="M:Emergent.Toolbench.EntityModeling.TraitOverride.FromXml(System.Xml.Linq.XElement)">
            <summary>
            Implement to initialize the instance from the date in the XElement.
            </summary>
            <param name="element">The XElement containing the data to load from.</param>
        </member>
        <member name="P:Emergent.Toolbench.EntityModeling.TraitOverride.XmlElementName">
            <summary>
            Gets the name of the XML element.
            </summary>
            <value>The name of the XML element.</value>
        </member>
        <member name="T:Emergent.Toolbench.EntityModeling.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.EntityModeling.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.EntityModeling.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.EntityModeling.Properties.Resources.AlreadyIncluded">
            <summary>
              Looks up a localized string similar to {0} is already included in project {1}..
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.EntityModeling.Properties.Resources.CircularMixin">
            <summary>
              Looks up a localized string similar to Circular mixin: This mixin already exists in the existing mixins for this target..
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.EntityModeling.Properties.Resources.ClearDiagramUndo">
            <summary>
              Looks up a localized string similar to Clear diagram.
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.EntityModeling.Properties.Resources.ConflictingBuiltinProperties">
            <summary>
              Looks up a localized string similar to Conflicting mixin: Built-in property &apos;{0}&apos; has multiple sources..
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.EntityModeling.Properties.Resources.CouldNotLocateBehaviorTraits">
            <summary>
              Looks up a localized string similar to Could not locate behavior traits in extension: {0}.
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.EntityModeling.Properties.Resources.CouldNotLocateModelTraits">
            <summary>
              Looks up a localized string similar to Could not locate model traits in extension: {0}.
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.EntityModeling.Properties.Resources.CouldNotLocatePropertyTraits">
            <summary>
              Looks up a localized string similar to Could not locate property traits in extension: {0}.
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.EntityModeling.Properties.Resources.DefaultDiagramName">
            <summary>
              Looks up a localized string similar to Diagram.
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.EntityModeling.Properties.Resources.DefaultEntityModelName">
            <summary>
              Looks up a localized string similar to Model.
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.EntityModeling.Properties.Resources.DefaultPresetName">
            <summary>
              Looks up a localized string similar to Preset.
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.EntityModeling.Properties.Resources.DeleteEntityUndo">
            <summary>
              Looks up a localized string similar to Delete Entity Model.
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.EntityModeling.Properties.Resources.DiagramDisplayName">
            <summary>
              Looks up a localized string similar to Diagram.
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.EntityModeling.Properties.Resources.DuplicateBehaviorNames">
            <summary>
              Looks up a localized string similar to The behavior &apos;{0}&apos; is present on both source and target..
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.EntityModeling.Properties.Resources.DuplicateDiagramName">
            <summary>
              Looks up a localized string similar to A diagram with name &apos;{0}&apos; already exists in this project..
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.EntityModeling.Properties.Resources.DuplicateMixin">
            <summary>
              Looks up a localized string similar to Duplicate mixin: This mixin is already in this target..
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.EntityModeling.Properties.Resources.DuplicateModelName">
            <summary>
              Looks up a localized string similar to A model with the name &apos;{0}&apos; already exists in this project..
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.EntityModeling.Properties.Resources.DuplicatePropertyNames">
            <summary>
              Looks up a localized string similar to The property &apos;{0}&apos; is present on both source and target..
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.EntityModeling.Properties.Resources.EntityModelDisplayName">
            <summary>
              Looks up a localized string similar to Entity Model.
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.EntityModeling.Properties.Resources.EntityModelPresetDisplayName">
            <summary>
              Looks up a localized string similar to Entity Model Preset.
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.EntityModeling.Properties.Resources.FileAccessError">
            <summary>
              Looks up a localized string similar to Access to file &apos;{0}&apos; is denied..
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.EntityModeling.Properties.Resources.FileFormatError">
            <summary>
              Looks up a localized string similar to File &apos;{0}&apos; is badly formated..
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.EntityModeling.Properties.Resources.FileNotFoundError">
            <summary>
              Looks up a localized string similar to File &apos;{0}&apos; is not found..
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.EntityModeling.Properties.Resources.FileSaveError">
            <summary>
              Looks up a localized string similar to Error saving file &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.EntityModeling.Properties.Resources.FileUnknowError">
            <summary>
              Looks up a localized string similar to Unknown error while loading file &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.EntityModeling.Properties.Resources.FileUriError">
            <summary>
              Looks up a localized string similar to The Uri &apos;{0}&apos; is invalid..
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.EntityModeling.Properties.Resources.FixedDuplicateBehavior">
            <summary>
              Looks up a localized string similar to Behavior &apos;{1}&apos; of model &apos;{0}&apos; was changed to a mixin behavior because a parent model already defines it..
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.EntityModeling.Properties.Resources.FixedDuplicateProperties">
            <summary>
              Looks up a localized string similar to Property &apos;{1}&apos; of model &apos;{0}&apos; was changed to a mixin property because a parent model already defines it..
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.EntityModeling.Properties.Resources.MissingMixins">
            <summary>
              Looks up a localized string similar to Can&apos;t find all mixins for model &apos;{0}&apos; in project &apos;{1}&apos;.  The missing models were last known by these names: &apos;{2}&apos;.  Missing mixins were removed..
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.EntityModeling.Properties.Resources.MissingModelDetails">
            <summary>
              Looks up a localized string similar to Model ID=&apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.EntityModeling.Properties.Resources.MissingModelError">
            <summary>
              Looks up a localized string similar to Diagram &apos;{0}&apos; contains an unknown model. It will be removed from the diagram..
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.EntityModeling.Properties.Resources.MixinReferenceError">
            <summary>
              Looks up a localized string similar to The source model &apos;{0}&apos; is not in a project referenced by the project containing the target model &apos;{1}&apos;..
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.EntityModeling.Properties.Resources.ModelDesignIssue">
            <summary>
              Looks up a localized string similar to Design issue detected in &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.EntityModeling.Properties.Resources.ModelFailedToLoadProperty">
            <summary>
              Looks up a localized string similar to Model &apos;{0}&apos; failed to load property &apos;{1}&apos; and was removed from the model..
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.EntityModeling.Properties.Resources.OverrideBehavior">
            <summary>
              Looks up a localized string similar to Override Behavior.
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.EntityModeling.Properties.Resources.OverrideProperty">
            <summary>
              Looks up a localized string similar to Override Property &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.EntityModeling.Properties.Resources.PluginName">
            <summary>
              Looks up a localized string similar to Entity Modeling.
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.EntityModeling.Properties.Resources.PresetAsSourceMixin">
            <summary>
              Looks up a localized string similar to Presets can&apos;t be at the source of a mixin..
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.EntityModeling.Properties.Resources.ProjectLoadError">
            <summary>
              Looks up a localized string similar to Project load error.
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.EntityModeling.Properties.Resources.ProjectLoadErrorParam">
            <summary>
              Looks up a localized string similar to Error loading project {0}..
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.EntityModeling.Properties.Resources.ProjectLoadErrorRequestMessage">
             <summary>
               Looks up a localized string similar to An error occurred while loading project file
            {0}
            
            The following files were not found or contained errors.
            
            {1}
            
            Continuing the load may result in a loss of data.
            Do you want to continue?.
             </summary>
        </member>
        <member name="P:Emergent.Toolbench.EntityModeling.Properties.Resources.ProjectReferenceLoadError">
            <summary>
              Looks up a localized string similar to Project reference load error.
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.EntityModeling.Properties.Resources.ProjectReferenceLoadErrorRequestMessage">
             <summary>
               Looks up a localized string similar to An error occurred while loading project file
            {0}
            
            The following referenced project was not found or contained errors:
            {1}
            
            Continuing may result in a loss of data.
            Do you want to continue?.
             </summary>
        </member>
        <member name="P:Emergent.Toolbench.EntityModeling.Properties.Resources.PromotingBehavior">
            <summary>
              Looks up a localized string similar to Promoting behavior &apos;{0}&apos; in model &apos;{1}&apos; because a suitable override could not be found..
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.EntityModeling.Properties.Resources.PropertyOverrideRemoved">
            <summary>
              Looks up a localized string similar to Property override &apos;{1}&apos; in model &apos;{0}&apos; was removed because it is no longer defined in a parent model..
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.EntityModeling.Properties.Resources.PropertyTypesAreNotAllEqual">
            <summary>
              Looks up a localized string similar to All properties named &apos;{0}&apos; do not have the same type..
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.EntityModeling.Properties.Resources.PropertyTypesAreNotAllEqualDetails">
            <summary>
              Looks up a localized string similar to The models with this property are: &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.EntityModeling.Properties.Resources.RemoveOverride">
            <summary>
              Looks up a localized string similar to Remove Override.
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.EntityModeling.Properties.Resources.RenameBehavior">
            <summary>
              Looks up a localized string similar to Rename Behavior.
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.EntityModeling.Properties.Resources.RenameFileError">
            <summary>
              Looks up a localized string similar to Could not rename file &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.EntityModeling.Properties.Resources.RenameProperty">
            <summary>
              Looks up a localized string similar to Rename Property.
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.EntityModeling.Properties.Resources.RestrictionIntegrityReportDetails">
             <summary>
               Looks up a localized string similar to The value of the property &apos;{0}&apos; for the model &apos;{1}&apos; is not valid.
            {2}.
             </summary>
        </member>
        <member name="P:Emergent.Toolbench.EntityModeling.Properties.Resources.RestrictionIntegrityReportMessage">
            <summary>
              Looks up a localized string similar to Restriction error in modeling project &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.EntityModeling.Properties.Resources.SaveBeforeRenameMessage">
            <summary>
              Looks up a localized string similar to Script file &apos;{0}&apos; will be renamed to &apos;{1}&apos;. Do you want to save the file before it is renamed? If you say no, changes will be lost..
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.EntityModeling.Properties.Resources.SaveBeforeRenameTitle">
            <summary>
              Looks up a localized string similar to Save Before Rename.
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.EntityModeling.Properties.Resources.ScriptFileMissing">
            <summary>
              Looks up a localized string similar to Behavior script file &apos;{0}&apos; is missing..
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.EntityModeling.Properties.Resources.SetModel">
            <summary>
              Looks up a localized string similar to Set Model.
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.EntityModeling.Properties.Resources.SetStringValue">
            <summary>
              Looks up a localized string similar to Property &apos;{0}&apos; Value=&apos;{1}&apos;.
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.EntityModeling.Properties.Resources.SingleMixinForPreset">
            <summary>
              Looks up a localized string similar to Can only have one mixin..
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.EntityModeling.Properties.Resources.TraitDuplicate">
            <summary>
              Looks up a localized string similar to Trait with the name: {0} already exists.  Traits must have unique names..
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.EntityModeling.Properties.Resources.UniqueModelNameIntegrityReportDetails">
            <summary>
              Looks up a localized string similar to Duplicate model name &apos;{0}&apos; found in project &apos;{1}&apos;.  There is already a model named &apos;{0}&apos; in the project &apos;{2}&apos;..
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.EntityModeling.Properties.Resources.UniqueModelNameIntegrityReportMessage">
            <summary>
              Looks up a localized string similar to Duplicate model name &apos;{0}&apos; found..
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.EntityModeling.Properties.Resources.UnknownIdFormat">
            <summary>
              Looks up a localized string similar to Unknown ID format.
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.EntityModeling.Properties.Resources.VersionMismatchError">
            <summary>
              Looks up a localized string similar to Version mismatch &apos;{0}&apos; expecting version &apos;{1}&apos;..
            </summary>
        </member>
        <member name="T:Emergent.Toolbench.EntityModeling.ModelingProjectDocumentFactory">
            <summary>
            Factory for the ModelingProjectDocument class.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.EntityModeling.ModelingProjectDocumentFactory.New(Emergent.Toolbench.ContentService.ContentCreationSettings)">
            <summary>
            Creates a new instance of a document. This method is called when
            the content is created.
            </summary>
            <param name="args">Additional configuration data used to create
            the document.</param>
            <returns>A new document instance.</returns>
        </member>
        <member name="M:Emergent.Toolbench.EntityModeling.ModelingProjectDocumentFactory.Open(Emergent.Toolbench.ContentService.ContentCreationSettings)">
            <summary>
            Opens content from the specified location and builds a new document
            from that content.
            </summary>
            <param name="resourceLocation"></param>
            <returns>A new document instance.</returns>
        </member>
        <member name="M:Emergent.Toolbench.EntityModeling.ModelingProjectDocumentFactory.Save(Emergent.Toolbench.ContentService.AbstractDocument)">
            <summary>
            Saves the specified document.
            </summary>
            <param name="document">The document to save.</param>
        </member>
        <member name="T:Emergent.Toolbench.EntityModeling.Trait">
            <summary>
            A trait
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.EntityModeling.Trait.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Emergent.Toolbench.EntityModeling.Trait"/> class.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.EntityModeling.Trait.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Emergent.Toolbench.EntityModeling.Trait"/> class.
            </summary>
            <param name="name">The name of the trait.</param>
        </member>
        <member name="M:Emergent.Toolbench.EntityModeling.Trait.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current 
            <see cref="T:System.Object"/>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with the current 
            <see cref="T:System.Object"/>.</param>
            <returns>
            true if the specified <see cref="T:System.Object"/> is equal to the current 
            <see cref="T:System.Object"/>; otherwise, false.
            </returns>
            <exception cref="T:System.NullReferenceException">The <paramref name="obj"/> 
            parameter is null.</exception>
        </member>
        <member name="M:Emergent.Toolbench.EntityModeling.Trait.GetHashCode">
            <summary>
            Serves as a hash function for a particular type.
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="M:Emergent.Toolbench.EntityModeling.Trait.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current 
            <see cref="T:System.Object"/>.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the current 
            <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="M:Emergent.Toolbench.EntityModeling.Trait.ToXml">
            <summary>
            Implement to return the instance serialized as an XStreamingElement.
            </summary>
            <returns>The serialized instance.</returns>
        </member>
        <member name="M:Emergent.Toolbench.EntityModeling.Trait.FromXml(System.Xml.Linq.XElement)">
            <summary>
            Implement to initialize the instance from the date in the XElement.
            </summary>
            <param name="element">The XElement containing the data to load from.</param>
        </member>
        <member name="P:Emergent.Toolbench.EntityModeling.Trait.Name">
            <summary>
            Gets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:Emergent.Toolbench.EntityModeling.Trait.XmlElementName">
            <summary>
            Gets the name of the XML element.
            </summary>
            <value>The name of the XML element.</value>
        </member>
        <member name="T:Emergent.Toolbench.EntityModeling.TraitDescriptor">
            <summary>
            Defines a trait.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.EntityModeling.TraitDescriptor.#ctor(System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new trait instance with the specified name.
            </summary>
            <param name="name">The name.</param>
        </member>
        <member name="M:Emergent.Toolbench.EntityModeling.TraitDescriptor.#ctor(System.String,System.String,System.String,System.String,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new trait instance with the specified name.
            </summary>
            <param name="name">The name.</param>
        </member>
        <member name="M:Emergent.Toolbench.EntityModeling.TraitDescriptor.ToTrait">
            <summary>
            Gets the trait representative for this trait descriptor.
            </summary>
            <returns>The trait.</returns>
        </member>
        <member name="P:Emergent.Toolbench.EntityModeling.TraitDescriptor.Name">
            <summary>
            Gets or sets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:Emergent.Toolbench.EntityModeling.TraitDescriptor.FriendlyName">
            <summary>
            Gets the Friendly Name of this Trait.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:Emergent.Toolbench.EntityModeling.TraitDescriptor.Description">
            <summary>
            Gets the description.
            </summary>
            <value>The description.</value>
        </member>
        <member name="P:Emergent.Toolbench.EntityModeling.TraitDescriptor.FriendlyDescription">
            <summary>
            Gets the friendly description.
            </summary>
            <value>The friendly description.</value>
        </member>
        <member name="P:Emergent.Toolbench.EntityModeling.TraitDescriptor.DefaultOn">
            <summary>
            Gets a value indicating whether the trait should be ON by default.
            </summary>
            <value><c>true</c> if the Trait should be ON by default; 
            otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Emergent.Toolbench.EntityModeling.TraitDescriptor.ToolTime">
            <summary>
            Gets a value indicating whether the trait should only exist at ToolTime and should
            not appear in the exported flat model.
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.EntityModeling.TraitDescriptor.Visible">
            <summary>
            Determine whether or not to show this trait to the enduser.
            </summary>
        </member>
        <member name="T:Emergent.Toolbench.EntityModeling.QueryEngineData">
            <summary>
            This class represents all the criteria to do searches.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.EntityModeling.QueryEngineData.Serialize">
            <summary>
            Serializes this instance.
            </summary>
            <returns>A string representing the instance.</returns>
        </member>
        <member name="M:Emergent.Toolbench.EntityModeling.QueryEngineData.Deserialize(System.String)">
            <summary>
            Deserializes the specified query engine data string.
            </summary>
            <param name="queryEngineDataString">The query engine data string.</param>
            <returns><c>true</c> if the QueryEngineData was successfully deserialize; otherwise, 
            <c>false</c>.</returns>
        </member>
        <member name="M:Emergent.Toolbench.EntityModeling.QueryEngineData.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>A new object that is a copy of this instance.</returns>
        </member>
        <member name="P:Emergent.Toolbench.EntityModeling.QueryEngineData.UseModelName">
            <summary>
            Gets or sets a value indicating whether we want to use the model name in our search.
            </summary>
            <value><c>true</c> if model name is used; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Emergent.Toolbench.EntityModeling.QueryEngineData.UseMixinModelName">
            <summary>
            Gets or sets a value indicating whether we want to use the mixin model name in our 
            search.
            </summary>
            <value><c>true</c> if mixin model name is used; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Emergent.Toolbench.EntityModeling.QueryEngineData.UseFolderPath">
            <summary>
            Gets or sets a value indicating whether we want to use the folder path in our search.
            </summary>
            <value><c>true</c> if folder path is used; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Emergent.Toolbench.EntityModeling.QueryEngineData.UsePropertyName">
            <summary>
            Gets or sets a value indicating whether we want to use the property name in our search.
            </summary>
            <value><c>true</c> if property name is used; otherwise, <c>false</c>.</value>
            
        </member>
        <member name="P:Emergent.Toolbench.EntityModeling.QueryEngineData.UseBehaviorName">
            <summary>
            Gets or sets a value indicating whether we want to use the behavior name in our search.
            </summary>
            <value><c>true</c> if behavior name is used; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Emergent.Toolbench.EntityModeling.QueryEngineData.ModelName">
            <summary>
            Gets or sets the name of the model.
            </summary>
            <value>The name of the model.</value>
        </member>
        <member name="P:Emergent.Toolbench.EntityModeling.QueryEngineData.MixinModelName">
            <summary>
            Gets or sets the name of the mixin model.
            </summary>
            <value>The name of the mixin model.</value>
        </member>
        <member name="P:Emergent.Toolbench.EntityModeling.QueryEngineData.FolderPath">
            <summary>
            Gets or sets the folder path.
            </summary>
            <value>The folder path.</value>
        </member>
        <member name="P:Emergent.Toolbench.EntityModeling.QueryEngineData.PropertyName">
            <summary>
            Gets or sets the name of the property.
            </summary>
            <value>The name of the property.</value>
        </member>
        <member name="P:Emergent.Toolbench.EntityModeling.QueryEngineData.BehaviorName">
            <summary>
            Gets or sets the name of the behavior.
            </summary>
            <value>The name of the behavior.</value>
        </member>
        <member name="P:Emergent.Toolbench.EntityModeling.QueryEngineData.RecursiveSearch">
            <summary>
            Gets or sets a value indicating whether we want to do a recursive search.
            </summary>
            <value><c>true</c> if performing a recursive search; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:Emergent.Toolbench.EntityModeling.EntityModelDocumentFactory">
            <summary>
            Factory for the Entity Model Document.  This class manages the persistance
            of the EntityModel class.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.EntityModeling.EntityModelDocumentFactory.GetTypeOfDocument">
            <summary>
            Gets the type of document typeof(EntityModel)
            </summary>
            <returns></returns>
        </member>
        <member name="M:Emergent.Toolbench.EntityModeling.EntityModelDocumentFactory.Create">
            <summary>
            Creates a new instance of a document. This method is called when
            the content is created.
            </summary>
            <param name="args">Additional configuration data used to create
            the document.</param>
            <returns>A new document instance.</returns>
        </member>
        <member name="P:Emergent.Toolbench.EntityModeling.EntityModelDocumentFactory.Extension">
            <summary>
            Gets the extension for the file.
            </summary>
            <value>The extension.</value>
        </member>
        <member name="P:Emergent.Toolbench.EntityModeling.EntityModelDocumentFactory.DefaultName">
            <summary>
            Gets the default name of a new object.
            </summary>
            <value>The default name.</value>
        </member>
        <member name="P:Emergent.Toolbench.EntityModeling.EntityModelDocumentFactory.DocumentType">
            <summary>
            Gets the type of the document this factory produces.
            </summary>
            <value>The type of the document.</value>
        </member>
    </members>
</doc>
