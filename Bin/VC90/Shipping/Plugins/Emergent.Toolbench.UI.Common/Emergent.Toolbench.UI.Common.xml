<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Emergent.Toolbench.UI.Common</name>
    </assembly>
    <members>
        <member name="T:Emergent.Toolbench.UI.Common.WPF.IsGreaterToVisibilityConverter">
            <summary>
            Convert to Visibility.Visible if the value is greater than the parameter,
            Visibility.Collapsed otherwise.
            </summary>
        </member>
        <member name="T:Emergent.Toolbench.UI.Common.WPF.BoolToImageOpacityConverter">
            <summary>
            Converts a bool value to double value representing opacity: True = 1.0, false = 0.5.
            Typical usage: Bind the opacity of an image to its IsEnable property.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.UI.Common.WPF.BoolToImageOpacityConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a bool value to double value representing opacity: True = 1.0, false = 0.5. 
            </summary>
            <param name="value">Source value</param>
            <param name="targetType">Target type</param>
            <param name="parameter">Converter Parameter (unused)</param>
            <param name="culture">Culture</param>
            <returns>A double: 1.0 if value was true, 0.5 if value was false.</returns>
        </member>
        <member name="M:Emergent.Toolbench.UI.Common.WPF.BoolToImageOpacityConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Reverse conversion - NOT IMPLEMENTED.
            </summary>
        </member>
        <member name="T:Emergent.Toolbench.UI.Common.WPF.ColorToStringConverter">
            <summary>
            Defines a converter allowing easy convertion from Color
            to String and vice versa
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.UI.Common.WPF.ColorToStringConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a Color into a String
            </summary>
            <param name="value">The value to convert</param>
            <param name="targetType">The type to convert into</param>
            <param name="parameter">Unused parameter object</param>
            <param name="culture">Unused culture info</param>
            <returns>The resulting string</returns>
        </member>
        <member name="M:Emergent.Toolbench.UI.Common.WPF.ColorToStringConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a string into a Color
            </summary>
            <param name="value">The value to convert</param>
            <param name="targetType">The type to convert into</param>
            <param name="parameter">Unused parameter object</param>
            <param name="culture">Unused culture info</param>
            <returns>The resulting color if successful. The initial string if not</returns>
        </member>
        <member name="F:Emergent.Toolbench.UI.Common.WPF.ColorToStringConverter.IncludeAlphaInStringProperty">
            <summary>
            Create dependancy between the IncludeAlphaInString and a property metadata
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.UI.Common.WPF.ColorToStringConverter.IncludeAlphaInString">
            <summary>
            Get / Set whether or not the alpha channel should be included in the resulting string
            </summary>
        </member>
        <member name="T:Emergent.Toolbench.UI.Common.WPF.IsGreaterToBoolConverter">
            <summary>
            Convert to true if the value is greater than the parameter,
            false otherwise.
            </summary>
        </member>
        <member name="T:Emergent.Toolbench.UI.Common.WPF.ColorPicker">
            <summary>
            Defines the color picker control interaction logic
            </summary>
            <summary>
            ColorPicker
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.UI.Common.WPF.ColorPicker.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.UI.Common.WPF.ColorPicker.ColorPickerInitialize(System.Windows.Media.Color,System.Boolean)">
            <summary>
            Function to set initial default values of OldColor, NewColor, and AlphaValueEnabled.
            Also sets UsingNewColor to true so GraphicalPicker updates NewColor upon opening.
            </summary>
            <param name="IncomingColor">Default color initializing ColorPicker settings</param>
        </member>
        <member name="M:Emergent.Toolbench.UI.Common.WPF.ColorPicker.ElementSelector(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Event Handler for HSB,RGBA properties from UI, sets the channel selected.
            </summary>
            <param name="sender">FrameWork Element</param>
            <param name="e">N/A</param>
        </member>
        <member name="F:Emergent.Toolbench.UI.Common.WPF.ColorPicker.ValueProperty">
            <summary>
            Registered dependency property for the color picker's Value property.
            </summary>
        </member>
        <member name="F:Emergent.Toolbench.UI.Common.WPF.ColorPicker.AlphaValueEnabledProperty">
            <summary>
            Registered dependency for the color picker's AlphaValueEnabled property.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.UI.Common.WPF.ColorPicker.AlphaValueEnabledChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Used to set MultisSlider channel to alpha if AlphaValueEnabled is true
            </summary>
        </member>
        <member name="F:Emergent.Toolbench.UI.Common.WPF.ColorPicker.HexValueEnabledProperty">
            <summary>
            Registered dependency for the color picker's HexValueEnabled property.
            </summary>
        </member>
        <member name="F:Emergent.Toolbench.UI.Common.WPF.ColorPicker.GraphicOnlyProperty">
            <summary>
            Registered dependency for the color picker's GraphicOnly property.
            </summary>
        </member>
        <member name="F:Emergent.Toolbench.UI.Common.WPF.ColorPicker.UsingNewColorProperty">
            <summary>
            Registered dependency for the color picker's UsingNewColor property.
            </summary>
        </member>
        <member name="F:Emergent.Toolbench.UI.Common.WPF.ColorPicker.OldColorProperty">
            <summary>
            Registered dependency for the color picker's OldColor property.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.UI.Common.WPF.ColorPicker.OldColorPropertyChanged(System.Object,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Called when the old color property changes.
            </summary>
            <param name="o">Object that trigered the event</param>
            <param name="e">Dependency property even arguments</param>
        </member>
        <member name="F:Emergent.Toolbench.UI.Common.WPF.ColorPicker.NewColorProperty">
            <summary>
            Registered dependency for the color picker's NewColor property.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.UI.Common.WPF.ColorPicker.OnColorPropertyChanged(System.Object,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Called when the new color property changes.
            </summary>
            <param name="o">Object that trigered the event</param>
            <param name="e">Dependency property even arguments</param>
        </member>
        <member name="M:Emergent.Toolbench.UI.Common.WPF.ColorPicker.ButtonClick(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Click Event for OldColorView and NewColorView color preview boxes. 
            Selects either old or new color as CurrentColor without overwriting the other choice.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.UI.Common.WPF.ColorPicker.OnMouseDoubleClick(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Called when a mouse double click event happens.
            </summary>
            <param name="sender">The object that trigered the event</param>
            <param name="e">The event's arguments</param>
        </member>
        <member name="M:Emergent.Toolbench.UI.Common.WPF.ColorPicker.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.UI.Common.WPF.ColorPicker.Value">
            <summary>
            Public accessor for current value of the picker.
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.UI.Common.WPF.ColorPicker.AlphaValueEnabled">
            <summary>
            Used to Enable/Disable Alpha Channel; Set to true to enable Alpha.
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.UI.Common.WPF.ColorPicker.HexValueEnabled">
            <summary>
            Used to display/hide Hex channel elements.
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.UI.Common.WPF.ColorPicker.GraphicOnly">
            <summary>
            Used to display/hide the manual edit textboxes and associated radiobuttons/labels.
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.UI.Common.WPF.ColorPicker.UsingNewColor">
            <summary>
            Whether new color or old color is bound to the Value property.
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.UI.Common.WPF.ColorPicker.OldColor">
            <summary>
            Color choice last confirmed as CurrentColor.
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.UI.Common.WPF.ColorPicker.NewColor">
            <summary>
            Reflects the color choice determined in the ColorPicker UI.
            </summary>
        </member>
        <member name="T:Emergent.Toolbench.UI.Common.WPF.AdvancedBooleanToVisibilityConverter">
            <summary>
            Used to convert a bool to WPF visibility. By default, true = Visible and
            false = Collapsed, just like BooleanToVisibilityConverter. You can however
            specify a different behavior by passing one of the ConversionType as
            the ConverterParameter.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.UI.Common.WPF.AdvancedBooleanToVisibilityConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a bool value to a Visibility value. By default true = Visible and
            false = Collapsed, but you can use the ConverterParameter with one of the
            ConversionType values to change that behavior.
            </summary>
            <param name="value">Source value</param>
            <param name="targetType">Target type</param>
            <param name="parameter">Converter Parameter: One of ConversionType (optional --
            ConversionType.Default will be used if this parameter is null)</param>
            <param name="culture">Culture</param>
            <returns>One of the Visibility values, depending on source value and conversion type.
            </returns>
        </member>
        <member name="M:Emergent.Toolbench.UI.Common.WPF.AdvancedBooleanToVisibilityConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Reverse conversion - NOT IMPLEMENTED.
            </summary>
        </member>
        <member name="T:Emergent.Toolbench.UI.Common.WPF.AdvancedBooleanToVisibilityConverter.ConversionType">
            <summary>
            Options for the ConverterParameter.
            </summary>
        </member>
        <member name="F:Emergent.Toolbench.UI.Common.WPF.AdvancedBooleanToVisibilityConverter.ConversionType.TrueVisible_FalseCollapsed">
            <summary>Converts true to Visible, false to Collapsed.</summary>
        </member>
        <member name="F:Emergent.Toolbench.UI.Common.WPF.AdvancedBooleanToVisibilityConverter.ConversionType.TrueVisible_FalseHidden">
            <summary>Converts true to Visible, false to Hidden.</summary>
        </member>
        <member name="F:Emergent.Toolbench.UI.Common.WPF.AdvancedBooleanToVisibilityConverter.ConversionType.Default">
            <summary>Default option.</summary>
        </member>
        <member name="T:Emergent.Toolbench.UI.Common.WPF.EditLabel">
            <summary>
            Interaction logic for EditLabel.xaml
            </summary>
            <summary>
            EditLabel
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.UI.Common.WPF.EditLabel.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.UI.Common.WPF.EditLabel.Text">
            <summary>
            Gets or sets the text.
            </summary>
            <value>The text.</value>
        </member>
        <member name="P:Emergent.Toolbench.UI.Common.WPF.EditLabel.IsEditing">
            <summary>
            Gets or sets a value indicating whether this instance is in edit mode.
            </summary>
            <value>
                <c>true</c> if this instance is editing; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:Emergent.Toolbench.UI.Common.WPF.TextCvt">
            <summary>
            Converter used to provide custom display of the text (when different from the backing text)
            </summary>
        </member>
        <member name="T:Emergent.Toolbench.UI.Common.WPF.ObjectNotNullConverter">
            <summary>
            Used to determine if the object is not null
            This can be used in WPF to know if SelectedItem (object) is set (not null)
            An example: bind the IsEnabled of a "Remove" button to the selection of a listbox
            </summary>
        </member>
        <member name="T:Emergent.Toolbench.UI.Common.WPF.ListViewLayoutManager.RangeColumn">
            <summary>
            Define a ListView column with a range restriction
            </summary>
        </member>
        <member name="T:Emergent.Toolbench.UI.Common.WPF.ListViewLayoutManager.LayoutColumn">
            <summary>
            Base class for auto-layout column
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.UI.Common.WPF.ListViewLayoutManager.LayoutColumn.HasPropertyValue(System.Windows.Controls.GridViewColumn,System.Windows.DependencyProperty)">
            <summary>
            Determines whether [has property value] [the specified column].
            </summary>
            <param name="column">The column.</param>
            <param name="dp">The dp.</param>
            <returns>
                <c>true</c> if [has property value] [the specified column]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Emergent.Toolbench.UI.Common.WPF.ListViewLayoutManager.LayoutColumn.GetColumnWidth(System.Windows.Controls.GridViewColumn,System.Windows.DependencyProperty)">
            <summary>
            Gets the width of the column.
            </summary>
            <param name="column">The column.</param>
            <param name="dp">The dp.</param>
            <returns></returns>
        </member>
        <member name="F:Emergent.Toolbench.UI.Common.WPF.ListViewLayoutManager.RangeColumn.MinWidthProperty">
            <summary>
            Minimum Width attached property
            </summary>
        </member>
        <member name="F:Emergent.Toolbench.UI.Common.WPF.ListViewLayoutManager.RangeColumn.MaxWidthProperty">
            <summary>
            Maximum Width attached property
            </summary>
        </member>
        <member name="F:Emergent.Toolbench.UI.Common.WPF.ListViewLayoutManager.RangeColumn.IsFillColumnProperty">
            <summary>
            Is Fill attached property
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.UI.Common.WPF.ListViewLayoutManager.RangeColumn.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Emergent.Toolbench.UI.Common.WPF.ListViewLayoutManager.RangeColumn"/> class.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.UI.Common.WPF.ListViewLayoutManager.RangeColumn.GetMinWidth(System.Windows.DependencyObject)">
            <summary>
            Gets the minimum width.
            </summary>
            <param name="obj">The obj.</param>
            <returns></returns>
        </member>
        <member name="M:Emergent.Toolbench.UI.Common.WPF.ListViewLayoutManager.RangeColumn.SetMinWidth(System.Windows.DependencyObject,System.Double)">
            <summary>
            Sets the minimum width.
            </summary>
            <param name="obj">The obj.</param>
            <param name="minWidth">Width of the min.</param>
        </member>
        <member name="M:Emergent.Toolbench.UI.Common.WPF.ListViewLayoutManager.RangeColumn.GetMaxWidth(System.Windows.DependencyObject)">
            <summary>
            Gets the max width.
            </summary>
            <param name="obj">The obj.</param>
            <returns></returns>
        </member>
        <member name="M:Emergent.Toolbench.UI.Common.WPF.ListViewLayoutManager.RangeColumn.SetMaxWidth(System.Windows.DependencyObject,System.Double)">
            <summary>
            Sets the max width.
            </summary>
            <param name="obj">The obj.</param>
            <param name="maxWidth">Width of the max.</param>
        </member>
        <member name="M:Emergent.Toolbench.UI.Common.WPF.ListViewLayoutManager.RangeColumn.GetIsFillColumn(System.Windows.DependencyObject)">
            <summary>
            Tell if a column is auto-filling.
            </summary>
            <param name="obj">The obj.</param>
            <returns></returns>
        </member>
        <member name="M:Emergent.Toolbench.UI.Common.WPF.ListViewLayoutManager.RangeColumn.SetIsFillColumn(System.Windows.DependencyObject,System.Boolean)">
            <summary>
            Sets auto-fill state of a column.
            </summary>
            <param name="obj">The obj.</param>
            <param name="isFillColumn">if set to <c>true</c> [is fill column].</param>
        </member>
        <member name="M:Emergent.Toolbench.UI.Common.WPF.ListViewLayoutManager.RangeColumn.IsRangeColumn(System.Windows.Controls.GridViewColumn)">
            <summary>
            Determines whether this column is a range column
            </summary>
            <param name="column">The column.</param>
            <returns>
                <c>true</c> if is range column; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Emergent.Toolbench.UI.Common.WPF.ListViewLayoutManager.RangeColumn.GetRangeMinWidth(System.Windows.Controls.GridViewColumn)">
            <summary>
            Gets the width of the range min.
            </summary>
            <param name="column">The column.</param>
            <returns></returns>
        </member>
        <member name="M:Emergent.Toolbench.UI.Common.WPF.ListViewLayoutManager.RangeColumn.GetRangeMaxWidth(System.Windows.Controls.GridViewColumn)">
            <summary>
            Gets the width of the range max.
            </summary>
            <param name="column">The column.</param>
            <returns></returns>
        </member>
        <member name="M:Emergent.Toolbench.UI.Common.WPF.ListViewLayoutManager.RangeColumn.GetRangeIsFillColumn(System.Windows.Controls.GridViewColumn)">
            <summary>
            Gets the range if this column is fill column.
            </summary>
            <param name="column">The column.</param>
            <returns></returns>
        </member>
        <member name="M:Emergent.Toolbench.UI.Common.WPF.ListViewLayoutManager.RangeColumn.ApplyWidth(System.Windows.Controls.GridViewColumn,System.Double,System.Double,System.Double)">
            <summary>
            Applies the width.
            </summary>
            <param name="gridViewColumn">The grid view column.</param>
            <param name="minWidth">Width of the min.</param>
            <param name="width">The width.</param>
            <param name="maxWidth">Width of the max.</param>
            <returns></returns>
        </member>
        <member name="M:Emergent.Toolbench.UI.Common.WPF.ListViewLayoutManager.RangeColumn.ApplyWidth(System.Windows.Controls.GridViewColumn,System.Double,System.Double,System.Double,System.Boolean)">
            <summary>
            Applies the width.
            </summary>
            <param name="gridViewColumn">The grid view column.</param>
            <param name="minWidth">Width of the min.</param>
            <param name="width">The width.</param>
            <param name="maxWidth">Width of the max.</param>
            <param name="isFillColumn">if set to <c>true</c> [is fill column].</param>
            <returns></returns>
        </member>
        <member name="T:Emergent.Toolbench.UI.Common.WPF.ListViewLayoutManager.ListViewLayoutManager">
            <summary>
            Takes care of handling column size inside a WPF ListView
            </summary>
        </member>
        <member name="F:Emergent.Toolbench.UI.Common.WPF.ListViewLayoutManager.ListViewLayoutManager.EnabledProperty">
            <summary>
            Tell if auto-size if enabled
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.UI.Common.WPF.ListViewLayoutManager.ListViewLayoutManager.#ctor(System.Windows.Controls.ListView)">
            <summary>
            Initializes a new instance of the <see cref="T:Emergent.Toolbench.UI.Common.WPF.ListViewLayoutManager.ListViewLayoutManager"/> class.
            </summary>
            <param name="listView">The list view.</param>
        </member>
        <member name="M:Emergent.Toolbench.UI.Common.WPF.ListViewLayoutManager.ListViewLayoutManager.SetEnabled(System.Windows.DependencyObject,System.Boolean)">
            <summary>
            Sets the enabled.
            </summary>
            <param name="dependencyObject">The dependency object.</param>
            <param name="enabled">if set to <c>true</c> [enabled].</param>
        </member>
        <member name="M:Emergent.Toolbench.UI.Common.WPF.ListViewLayoutManager.ListViewLayoutManager.IsEnabled(System.Windows.DependencyObject)">
            <summary>
            Determines whether the specified dependency object is enabled.
            </summary>
            <param name="dependencyObject">The dependency object.</param>
            <returns>
                <c>true</c> if the specified dependency object is enabled; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Emergent.Toolbench.UI.Common.WPF.ListViewLayoutManager.ListViewLayoutManager.RegisterEvents(System.Windows.DependencyObject)">
            <summary>
            Registers the events.
            </summary>
            <param name="start">The start.</param>
        </member>
        <member name="M:Emergent.Toolbench.UI.Common.WPF.ListViewLayoutManager.ListViewLayoutManager.ItemContainerGenerator_StatusChanged(System.Object,System.EventArgs)">
            <summary>
            Handles the StatusChanged event of the ItemContainerGenerator control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Emergent.Toolbench.UI.Common.WPF.ListViewLayoutManager.ListViewLayoutManager.FindParentColumn(System.Windows.DependencyObject)">
            <summary>
            Finds the parent column.
            </summary>
            <param name="element">The element.</param>
            <returns></returns>
        </member>
        <member name="M:Emergent.Toolbench.UI.Common.WPF.ListViewLayoutManager.ListViewLayoutManager.FindColumnHeader(System.Windows.DependencyObject,System.Windows.Controls.GridViewColumn)">
            <summary>
            Finds the column header.
            </summary>
            <param name="start">The start.</param>
            <param name="gridViewColumn">The grid view column.</param>
            <returns></returns>
        </member>
        <member name="M:Emergent.Toolbench.UI.Common.WPF.ListViewLayoutManager.ListViewLayoutManager.InitColumns">
            <summary>
            Inits the columns.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.UI.Common.WPF.ListViewLayoutManager.ListViewLayoutManager.ResizeColumns">
            <summary>
            Resizes the columns.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.UI.Common.WPF.ListViewLayoutManager.ListViewLayoutManager.SetRangeColumnToBounds(System.Windows.Controls.GridViewColumn)">
            <summary>
            Sets the range column to bounds.
            </summary>
            <param name="gridViewColumn">The grid view column.</param>
            <returns></returns>
        </member>
        <member name="M:Emergent.Toolbench.UI.Common.WPF.ListViewLayoutManager.ListViewLayoutManager.IsFillColumn(System.Windows.Controls.GridViewColumn)">
            <summary>
            Determines whether [is fill column] [the specified grid view column].
            </summary>
            <param name="gridViewColumn">The grid view column.</param>
            <returns>
                <c>true</c> if [is fill column] [the specified grid view column]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Emergent.Toolbench.UI.Common.WPF.ListViewLayoutManager.ListViewLayoutManager.ListViewLoaded(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Lists the view loaded.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.Windows.RoutedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Emergent.Toolbench.UI.Common.WPF.ListViewLayoutManager.ListViewLayoutManager.ListView_Unloaded(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Handles the Unloaded event of the ListView control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.Windows.RoutedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Emergent.Toolbench.UI.Common.WPF.ListViewLayoutManager.ListViewLayoutManager.ThumbPreviewMouseMove(System.Object,System.Windows.Input.MouseEventArgs)">
            <summary>
            Thumbs the preview mouse move.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.Windows.Input.MouseEventArgs"/> instance 
            containing the event data.</param>
        </member>
        <member name="M:Emergent.Toolbench.UI.Common.WPF.ListViewLayoutManager.ListViewLayoutManager.ThumbPreviewMouseLeftButtonDown(System.Object,System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Thumbs the preview mouse left button down.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.Windows.Input.MouseButtonEventArgs"/> instance
            containing the event data.</param>
        </member>
        <member name="M:Emergent.Toolbench.UI.Common.WPF.ListViewLayoutManager.ListViewLayoutManager.GridColumnWidthChanged(System.Object,System.EventArgs)">
            <summary>
            Grids the column width changed.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event 
            data.</param>
        </member>
        <member name="M:Emergent.Toolbench.UI.Common.WPF.ListViewLayoutManager.ListViewLayoutManager.ScrollViewer_SizeChanged(System.Object,System.Windows.SizeChangedEventArgs)">
            <summary>
            Handles the SizeChanged event of the ScrollViewer control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.Windows.SizeChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Emergent.Toolbench.UI.Common.WPF.ListViewLayoutManager.ListViewLayoutManager.OnLayoutManagerEnabledChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Called when [layout manager enabled changed].
            </summary>
            <param name="dependencyObject">The dependency object.</param>
            <param name="e">The <see cref="T:System.Windows.DependencyPropertyChangedEventArgs"/> 
            instance containing the event data.</param>
        </member>
        <member name="P:Emergent.Toolbench.UI.Common.WPF.ListViewLayoutManager.ListViewLayoutManager.ListView">
            <summary>
            Gets the list view.
            </summary>
            <value>The list view.</value>
        </member>
        <member name="T:Emergent.Toolbench.UI.Common.WPF.EmptyStringToNullConverter">
            <summary>
            If a string is empty, return a null pointer.  This is usefull for WPF tooltip binding to
            avoid having an empty tooltip.
            </summary>
        </member>
        <member name="T:Emergent.Toolbench.UI.Common.Windows32.WindowMessages">
            <summary>
            An enumerator containing windows message codes.
            </summary>
        </member>
        <member name="F:Emergent.Toolbench.UI.Common.Windows32.WindowMessages.EnterIdle">
            <summary>
            
            </summary>
            <remarks>WM_ENTERIDLE</remarks>
        </member>
        <member name="F:Emergent.Toolbench.UI.Common.Windows32.WindowMessages.PaintFrame">
            <summary>
            
            </summary>
            <remarks>WM_NCPAINT</remarks>
        </member>
        <member name="F:Emergent.Toolbench.UI.Common.Windows32.WindowMessages.Paint">
            <summary>
            
            </summary>
            <remarks>WM_PAINT</remarks>
        </member>
        <member name="F:Emergent.Toolbench.UI.Common.Windows32.WindowMessages.VScroll">
            <summary>
            
            </summary>
            <remarks>WM_VSCROLL</remarks>
        </member>
        <member name="T:Emergent.Toolbench.UI.Common.WPF.ColorUtilitiesClass">
            <summary>
            Supplimental Color Functions for use in GraphicChooser.xaml.cs
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.UI.Common.WPF.ColorUtilitiesClass.ColorFromString(System.String)">
            <summary>
            Used to return a color given a string
            </summary>
            <param name="S">String that can be converted into a color (valid hex string, etc.)
            </param>
            <returns>Color</returns>
        </member>
        <member name="M:Emergent.Toolbench.UI.Common.WPF.ColorUtilitiesClass.HSBFromColor(System.Windows.Media.Color,System.Int32@,System.Int32@,System.Int32@)">
            <summary>
            Used to set values passed by reference: Hue, Saturation, and Brightness, from a color
            </summary>
            <param name="C">Color, from Windows.System.Media</param>
            <param name="H">Hue value passed by reference, ranges between 0-100.</param>
            <param name="S">Saturation value passed by reference, ranges between 0-100.</param>
            <param name="V">Brightness value passed by reference, ranges between 0-100.</param>
        </member>
        <member name="M:Emergent.Toolbench.UI.Common.WPF.ColorUtilitiesClass.HtoRGB(System.Int32)">
            <summary>
            Given a Hue value, returns a color, 
            Assumes that the Saturation and Brightness are 1.0 (100%).
            </summary>
            <param name="hue">Hue value, in degrees from 0-360.  </param>
            <returns>Color</returns>
        </member>
        <member name="M:Emergent.Toolbench.UI.Common.WPF.ColorUtilitiesClass.HSVtoRGB(System.Double,System.Double,System.Double,System.Double@,System.Double@,System.Double@)">
            <summary>
            Given Hue, Saturation and Brightness, sets RGB values of a color passed by reference.
            </summary>
            <param name="hue">Hue value, in degrees ranges from 0-360.</param>
            <param name="sat">Saturation value, between 0 and 1.</param>
            <param name="value">Brightness value, between 0 and 1.</param>
            <param name="R">Red value passed by reference, between 0 and 1.</param>
            <param name="G">Green value passed by reference, between 0 and 1.</param>
            <param name="B">Blue value passed by reference, between 0 and 1.</param>
        </member>
        <member name="M:Emergent.Toolbench.UI.Common.WPF.ColorUtilitiesClass.HSBtoRGB(System.Byte,System.Double,System.Double,System.Double)">
            <summary>
            Given Hue, Saturation and Brightness, returns a color.
            Performance same as HSVtoRGB(), only this returns a color and 
            does not assume S and V to be 100%
            </summary>
            <param name="hue">Hue, between 0-360.</param>
            <param name="sat">Saturation, between 0-100.</param>
            <param name="value">Brightness, between 0-100.</param>
            <returns>Color</returns>
        </member>
        <member name="M:Emergent.Toolbench.UI.Common.WPF.ColorUtilitiesClass.AlphaStringFromColor(System.Windows.Media.Color)">
            <summary>
            Returns a hexadecimal string, including the alpha component visible, given a color
            </summary>
            <param name="c">Color, from Windows.System.Media</param>
            <returns>String, hex value showing alpha,r,g,b channels</returns>
        </member>
        <member name="M:Emergent.Toolbench.UI.Common.WPF.ColorUtilitiesClass.StringFromColor(System.Windows.Media.Color)">
            <summary>
            Returns a hexadecimal string, not including the alpha component, given a color
            </summary>
            <param name="c">Color, from Windows.System.Media</param>
            <returns>String, hex value showing r,g,b channels</returns>
        </member>
        <member name="T:Emergent.Toolbench.UI.Common.Windows32.User32">
            <summary>
            A collection of wrapped User32 dll calls.
            </summary>
            <summary>
            A collection of wrapped User32 dll calls.
            </summary>
            <summary>
            A collection of wrapped User32 dll calls.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.UI.Common.Windows32.User32.GetKeyState(System.Int32)">
             <summary>
             The GetKeyState function retrieves the status of the specified 
             virtual key. The status specifies whether the key is up, down, or 
             toggled (on, off—alternating each time the key is pressed).
             </summary>
             <param name="nVirtKey">[in] Specifies a virtual key. If the desired
             virtual key is a letter or digit (A through Z, a through z, or 0 
             through 9), nVirtKey must be set to the ASCII value of that 
             character. For other keys, it must be a virtual-key code.
            
             If a non-English keyboard layout is used, virtual keys with values 
             in the range ASCII A through Z and 0 through 9 are used to specify 
             most of the character keys. For example, for the German keyboard 
             layout, the virtual key of value ASCII O (0x4F) refers to the "o" 
             key, whereas VK_OEM_1 refers to the "o with umlaut" key.
             </param>
             <returns>The return value specifies the status of the specified 
             virtual key, as follows:
            
             If the high-order bit is 1, the key is down; otherwise, it is up.
             If the low-order bit is 1, the key is toggled. A key, such as the 
             CAPS LOCK key, is toggled if it is turned on. The key is off and 
             untoggled if the low-order bit is 0. A toggle key's indicator light
             (if any) on the keyboard will be on when the key is toggled, and 
             off when the key is untoggled.
             </returns>
             <remarks>http://msdn2.microsoft.com/en-us/library/ms646301.aspx
             </remarks>
        </member>
        <member name="M:Emergent.Toolbench.UI.Common.Windows32.User32.IsKeyDown(System.Windows.Forms.Keys)">
            <summary>
            Checks if the key is actually being held down.
            </summary>
            <param name="key">The key to check</param>
            <returns><c>true</c> if the key is down; otherwise <c>false</c>
            </returns>
        </member>
        <member name="M:Emergent.Toolbench.UI.Common.Windows32.User32.IsKeyToggled(System.Windows.Forms.Keys)">
            <summary>
            Checks if the key is toggled on.
            </summary>
            <param name="key">The key to check</param>
            <returns><c>true</c> if the key is toggled; otherwise <c>false</c>
            </returns>
        </member>
        <member name="M:Emergent.Toolbench.UI.Common.Windows32.User32.GetScrollPosition(System.IntPtr,Emergent.Toolbench.UI.Common.Windows32.ScrollBarLocation)">
            <summary>
            Gets the scrollbar position.
            </summary>
            <param name="hwnd">The window handle.</param>
            <param name="bar">The scroll bar.</param>
            <returns>A return code.</returns>
        </member>
        <member name="M:Emergent.Toolbench.UI.Common.Windows32.User32.SetScrollPosition(System.IntPtr,Emergent.Toolbench.UI.Common.Windows32.ScrollBarLocation,System.Int32,System.Boolean)">
            <summary>
            Sets the scrollbar position.
            </summary>
            <param name="hwnd">The window handle.</param>
            <param name="bar">The bar to move.</param>
            <param name="position">The position to set the scrollbar to.
            </param>
            <param name="redraw">Should the scrollbars be redrawn?</param>
            <returns>A return code.</returns>
        </member>
        <member name="M:Emergent.Toolbench.UI.Common.Windows32.User32.SendMessage(System.IntPtr,System.Int32,System.Int32,System.Int32)">
            <summary>
            Sends a windows message.
            </summary>
            <param name="hWnd">The window handle.</param>
            <param name="wMsg">The window message.</param>
            <param name="wParam">The wParam.</param>
            <param name="lParam">The lParam.</param>
            <returns>A return code.</returns>
        </member>
        <member name="M:Emergent.Toolbench.UI.Common.Windows32.User32.SendMessage(System.IntPtr,System.Int32,System.Int32,System.String)">
            <summary>
            Sends a windows message.
            </summary>
            <param name="hWnd">The window handle.</param>
            <param name="wMsg">The window message.</param>
            <param name="wParam">The wParam.</param>
            <param name="lParam">The lParam.</param>
            <returns>A return code.</returns>
        </member>
        <member name="M:Emergent.Toolbench.UI.Common.Windows32.User32.SetWindowLongPtr(System.IntPtr,System.UInt32,System.IntPtr)">
            <summary>
            The SetWindowLong function changes an attribute of the specified 
            window. The function also sets the 32-bit (long) value at the 
            specified offset into the extra window memory.
            </summary>
            <param name="hWnd"></param>
            <param name="nIndex"></param>
            <param name="dwNewLong"></param>
            <returns></returns>
        </member>
        <member name="M:Emergent.Toolbench.UI.Common.Windows32.User32.GetScrollInfo(System.IntPtr,Emergent.Toolbench.UI.Common.Windows32.ScrollBarLocation,Emergent.Toolbench.UI.Common.Windows32.ScrollInfo@)">
            <summary>
            Gets the scroll info of a particular bar.
            </summary>
            <param name="hwnd">The window handle.</param>
            <param name="bar">The bar.</param>
            <param name="scrollinfo">The <see cref="T:Emergent.Toolbench.UI.Common.Windows32.ScrollInfo"/> to store the 
            info in.</param>
            <returns></returns>
        </member>
        <member name="M:Emergent.Toolbench.UI.Common.Windows32.User32.GetScrollInfo(System.IntPtr,Emergent.Toolbench.UI.Common.Windows32.ScrollBarLocation,Emergent.Toolbench.UI.Common.Windows32.ScrollInfoMask,Emergent.Toolbench.UI.Common.Windows32.ScrollInfo@)">
            <summary>
            Gets the scroll info of a particular bar and only gets the info
            specified by the mask.
            </summary>
            <param name="hwnd">The window handle.</param>
            <param name="bar">The bar.</param>
            <param name="mask"></param>
            <param name="scrollinfo">The <see cref="T:Emergent.Toolbench.UI.Common.Windows32.ScrollInfo"/> to store the 
            info in.</param>
            <returns></returns>
        </member>
        <member name="T:Emergent.Toolbench.UI.Common.WPF.ReorderableListBoxAdorner">
            <summary>
            Given an index in a ListBox inherited control, this adorner draws a rectangle over the
            element that will be "bumped" by the insertion.
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.UI.Common.WPF.ReorderableListBoxAdorner.InsertIndex">
            <summary>
            Gets or sets the index of the insert.
            </summary>
            <value>The index of the insert.</value>
        </member>
        <member name="T:Emergent.Toolbench.UI.Common.WPF.GraphicalPicker">
            <summary>
            Interaction logic for GraphicChooser.xaml
            </summary>
            <summary>
            GraphicalPicker
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.UI.Common.WPF.GraphicalPicker.#ctor">
            <summary>
            Default constructor for graphical elements of colorpicker.
            </summary>
        </member>
        <member name="F:Emergent.Toolbench.UI.Common.WPF.GraphicalPicker.color1">
            <summary>
            Colors for Hue linear gradient brush stops.
            </summary>
        </member>
        <member name="F:Emergent.Toolbench.UI.Common.WPF.GraphicalPicker.color2">
            <summary>
            Colors for Hue linear gradient brush stops.
            </summary>
        </member>
        <member name="F:Emergent.Toolbench.UI.Common.WPF.GraphicalPicker.color3">
            <summary>
            Colors for Hue linear gradient brush stops.
            </summary>
        </member>
        <member name="F:Emergent.Toolbench.UI.Common.WPF.GraphicalPicker.color4">
            <summary>
            Colors for Hue linear gradient brush stops.
            </summary>
        </member>
        <member name="F:Emergent.Toolbench.UI.Common.WPF.GraphicalPicker.color5">
            <summary>
            Colors for Hue linear gradient brush stops.
            </summary>
        </member>
        <member name="F:Emergent.Toolbench.UI.Common.WPF.GraphicalPicker.ChangeHSVLock">
            <summary>
            Locks to prevent infinite looping between HSV / RGB updates.
            </summary>
        </member>
        <member name="F:Emergent.Toolbench.UI.Common.WPF.GraphicalPicker.SelectedColorProperty">
            <summary>
            Registered dependency for the SelectedColor property.
            </summary>
        </member>
        <member name="F:Emergent.Toolbench.UI.Common.WPF.GraphicalPicker.SliderChannelProperty">
            <summary>
            Registered dependency for the SliderChannel property.
            </summary>
        </member>
        <member name="F:Emergent.Toolbench.UI.Common.WPF.GraphicalPicker.AProperty">
            <summary>
            Registered dependency for the A property.
            </summary>
        </member>
        <member name="F:Emergent.Toolbench.UI.Common.WPF.GraphicalPicker.RProperty">
            <summary>
            Registered dependency for the R property.
            </summary>
        </member>
        <member name="F:Emergent.Toolbench.UI.Common.WPF.GraphicalPicker.GProperty">
            <summary>
            Registered dependency for the G property.
            </summary>
        </member>
        <member name="F:Emergent.Toolbench.UI.Common.WPF.GraphicalPicker.BProperty">
            <summary>
            Registered dependency for the B property.
            </summary>
        </member>
        <member name="F:Emergent.Toolbench.UI.Common.WPF.GraphicalPicker.HueProperty">
            <summary>
            Registered dependency for the Hue property.
            </summary>
        </member>
        <member name="F:Emergent.Toolbench.UI.Common.WPF.GraphicalPicker.SaturationProperty">
            <summary>
            Registered dependency for the Saturation property.
            </summary>
        </member>
        <member name="F:Emergent.Toolbench.UI.Common.WPF.GraphicalPicker.BrightnessProperty">
            <summary>
            Registered dependency for the Brightness property.
            </summary>
        </member>
        <member name="F:Emergent.Toolbench.UI.Common.WPF.GraphicalPicker.SaturationPositionProperty">
            <summary>
            Registered dependency for the SaturationPosition property.
            </summary>
        </member>
        <member name="F:Emergent.Toolbench.UI.Common.WPF.GraphicalPicker.BrightnessPositionProperty">
            <summary>
            Registered dependency for the BrightnessPosition property.
            </summary>
        </member>
        <member name="F:Emergent.Toolbench.UI.Common.WPF.GraphicalPicker.SliderValueProperty">
            <summary>
            Registered dependency for the SliderValue property.
            </summary>
        </member>
        <member name="F:Emergent.Toolbench.UI.Common.WPF.GraphicalPicker.SliderHeightProperty">
            <summary>
            Registered dependency for the SliderHeight property.
            </summary>
        </member>
        <member name="F:Emergent.Toolbench.UI.Common.WPF.GraphicalPicker.TriangleCenterPositionProperty">
            <summary>
            Registered dependency for the TriangleCenterPosition property.
            </summary>
        </member>
        <member name="F:Emergent.Toolbench.UI.Common.WPF.GraphicalPicker.TriangleRotationProperty">
            <summary>
            Registered dependency for the TriangleRotation property.
            </summary>
        </member>
        <member name="F:Emergent.Toolbench.UI.Common.WPF.GraphicalPicker.HueLineRotationProperty">
            <summary>
            Registered dependency for the HueLineRotation property.
            </summary>
        </member>
        <member name="F:Emergent.Toolbench.UI.Common.WPF.GraphicalPicker.SliderColorTopProperty">
            <summary>
            Registered dependency for the SliderColorTop property.
            </summary>
        </member>
        <member name="F:Emergent.Toolbench.UI.Common.WPF.GraphicalPicker.SliderColorBottomProperty">
            <summary>
            Registered dependency for the SliderColorBottom property.
            </summary>
        </member>
        <member name="F:Emergent.Toolbench.UI.Common.WPF.GraphicalPicker.HueLineColorProperty">
            <summary>
            Registered dependency for the HueLineColor property.
            </summary>
        </member>
        <member name="F:Emergent.Toolbench.UI.Common.WPF.GraphicalPicker.SliderLineColorProperty">
            <summary>
            Registered dependency for the SliderLineColor property.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.UI.Common.WPF.GraphicalPicker.OnSelectedColorChanged(System.Windows.Media.Color,System.Windows.Media.Color)">
            <summary>
            Called when the selected color changes.
            </summary>
            <param name="oldColor">Previous color</param>
            <param name="newColor">New color</param>
        </member>
        <member name="M:Emergent.Toolbench.UI.Common.WPF.GraphicalPicker.OnColorChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Anytime dependency property SelectedColor is changed, this 
            Updates ARGB, HSV, and hex values accordingly, which are inextricably intertwined.
            </summary>
            <param name="o">Color Picker Object</param>
            <param name="e">Handles SelectedColor dependency property changed events</param>
        </member>
        <member name="M:Emergent.Toolbench.UI.Common.WPF.GraphicalPicker.UpdateColorHSB(System.Object,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Used to update color when Hue, Saturation, or Brightness dependency properties change.
            Also updates slider thumbs and widget rotations accordingly.
            </summary>
            <param name="o">Color Picker object</param>
            <param name="e">Handles dependency property changed events, 
            for Hue, Saturation, or Brightness properties </param>
        </member>
        <member name="M:Emergent.Toolbench.UI.Common.WPF.GraphicalPicker.UpdateColorRGB(System.Object,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Used to update color when Red, Green, or Blue dependency properties change.
            Also updates slider thumbs and Widget rotations accordingly.
            </summary>
            <param name="o">Color Picker object</param>
            <param name="e">Handles dependency property changed events, 
            for A, R, G, B dependency properties</param>
        </member>
        <member name="F:Emergent.Toolbench.UI.Common.WPF.GraphicalPicker.SelectedColorChangedEvent">
            <summary>
            Routed event trigered when the selected color changes.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.UI.Common.WPF.GraphicalPicker.OnRenderSizeChanged(System.Windows.SizeChangedInfo)">
            <summary>
            Called when the render size is changed.
            </summary>
            <param name="sizeInfo">The change in size information</param>
        </member>
        <member name="M:Emergent.Toolbench.UI.Common.WPF.GraphicalPicker.CreateHueBitmap(System.Windows.Size,System.Double,System.Int32,System.Int32)">
            <summary>
            Creates a color wheel image.
            </summary>
            <param name="dimensions">Size of the bitmap to create, in pixels, rounded down.</param>
            <param name="thickness">Size of InnerEllipse.Margin.Left</param>
            <param name="dpiX">dots per inch, X</param>
            <param name="dpiY">dots per inch, Y</param>
            <returns>Created bitmap</returns>
        </member>
        <member name="M:Emergent.Toolbench.UI.Common.WPF.GraphicalPicker.CreateSaturationValueBitmap(System.Windows.Size,System.Int32,System.Int32)">
            <summary>
            Creates the background image to be used on the sat/value triangle. 
            This function allocates new memory and should be called when the widget is resized. 
            Also, this function initializes the _triangleBackground... member variables.
            </summary>
            <param name="dimensions">Size of the bitmap to create, in pixels, rounded down.</param>
            <param name="dpiX">dots per inch, X</param>
            <param name="dpiY">dots per inch, Y</param>
            <returns>Created bitmap</returns>
        </member>
        <member name="M:Emergent.Toolbench.UI.Common.WPF.GraphicalPicker.UpdateSaturationValueBitmap">
            <summary>
            Recalculates the values of the pixels in the cached triangle background bitmap.
            This function assumes that CreateSaturationValueBitmap has been called.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.UI.Common.WPF.GraphicalPicker.UpdateLinearGradientBrush">
            <summary>
            Redefines the LinearGradientBrush colors used as a background in the multipurpose slider
            according to the current channel selection.  Each channel resets TopColor and 
            BottomColor.  If Hue is selected, 5 gradientStops are added (Standard hue gradient def.)  
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.UI.Common.WPF.GraphicalPicker.OnMouseMove(System.Object,System.Windows.Input.MouseEventArgs)">
            <summary>
            Handles movements of mouse while left mouse button is held down.  Assumes mouse has been
            captured by a GraphicChooser element (SV Triangle, Slider, or Hue Circle).
            </summary>
            <param name="e">Mouse Event Argument, checks if mouse moved during left click </param>
            <param name="sender">Graphical slider object that raised the event </param>
        </member>
        <member name="M:Emergent.Toolbench.UI.Common.WPF.GraphicalPicker.OnMouseDown(System.Object,System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Handles mouse click on a GraphicChooser Element.  The GraphicChooser element captures 
            mouse elements including: SV Triangle, Slider bar, or Hue Circle.
            </summary>
            <param name="e">Mouse Event Argument, checking for left mouse button click </param>
            <param name="sender">Graphical slider object that raised the event </param>
        </member>
        <member name="M:Emergent.Toolbench.UI.Common.WPF.GraphicalPicker.OnMouseUp(System.Object,System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Handles mouse button release after clicking a GraphicChooser Element.  The Graphic 
            Chooser element releases mouse capture (elements: SV Triangle, Slider, or Hue Circle).
            </summary>
            <param name="e">Mouse Event Argument, checking for left mouse button release </param>
            <param name="sender">Graphical slider object that raised the event </param>
        </member>
        <member name="M:Emergent.Toolbench.UI.Common.WPF.GraphicalPicker.HandleHueClick(System.Windows.Point)">
            <summary>
            Hue Picker Control from Mouse Event.
            Accepts relative mouse position as point, called by mouse events, 
            Sets value of Hue between 0 and 360 degrees.  
            </summary>
            <param name="point">(X,Y)Point of mouse event relative to Hue Circle Slider </param>
        </member>
        <member name="M:Emergent.Toolbench.UI.Common.WPF.GraphicalPicker.HandleTriangleClick(System.Windows.Point)">
            <summary>
            SV Picker Control from Mouse Event.
            Accepts relative mouse position as point, called by mouse events, 
            Sets value of Brightness between 0 and 100 percent,
            Sets value of Saturation between 0 and 100 percent, 
            Saturation is dependent on brightness. 
            </summary>
            <param name="point">(X,Y)Point of mouse event relative to 
            SV Chooser (Center Triangle)</param>
        </member>
        <member name="M:Emergent.Toolbench.UI.Common.WPF.GraphicalPicker.HandleSliderClick(System.Windows.Point)">
            <summary>
            Multipurpose Slider Control from Mouse Event.
            Accepts relative mouse position as point, called by mouse events, 
            Sets value of a Color (A, R, G, or B) between 0-255.
            Sets value of Hue between 0-360.
            Sets value of Saturation or Brightness between 0-100. 
            </summary>
            <param name="point">(X,Y)Point of mouse event relative to Multipurpose Slider </param>
        </member>
        <member name="M:Emergent.Toolbench.UI.Common.WPF.GraphicalPicker.SetSlider">
            <summary>
            Redefines MultiSlider appearance according to channel:
            Re-evaluates slider coloring and line position according to a selected property.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.UI.Common.WPF.GraphicalPicker.SVCircle(System.Int32,System.Int32)">
            <summary>
            Thumb indicator position control for SV picker.
            Accepts saturation and brightness arguments.
            Triggers changes in SatPosition and BrightPosition which  
            the x and y position of the thumb are bound to, respectively. 
            </summary>
            <param name="_s">Saturation, ranges between 0-100 </param>
            <param name="_b">Brightness, ranges between 0-100 </param>
        </member>
        <member name="M:Emergent.Toolbench.UI.Common.WPF.GraphicalPicker.HandleSliderLine(System.Int32)">
            <summary>
            Thumb indicator position control for Multipurpose Slider.
            Accepts A, R, G, or B values. 
            Triggers changes in SliderData which the y position of the thumb is bound to. 
            </summary>
            <param name="data">Numerical value from selected channel property for slider height. 
            </param>
        </member>
        <member name="M:Emergent.Toolbench.UI.Common.WPF.GraphicalPicker.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.UI.Common.WPF.GraphicalPicker.SelectedColor">
            <summary>
            Currently selected color.
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.UI.Common.WPF.GraphicalPicker.SliderChannel">
            <summary>
            Used to determine which channel the slider represents.
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.UI.Common.WPF.GraphicalPicker.A">
            <summary>
            Gets or sets the ARGB alpha value of the selected color.
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.UI.Common.WPF.GraphicalPicker.R">
            <summary>
            Gets or sets the ARGB red value of the selected color.
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.UI.Common.WPF.GraphicalPicker.G">
            <summary>
            Gets or sets the ARGB green value of the selected color.
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.UI.Common.WPF.GraphicalPicker.B">
            <summary>
            Gets or sets the ARGB blue value of the selected color.
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.UI.Common.WPF.GraphicalPicker.Hue">
            <summary>
            Gets or sets the Hue value of the selected color.
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.UI.Common.WPF.GraphicalPicker.Saturation">
            <summary>
            Gets or sets the Saturation value of the selected color.
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.UI.Common.WPF.GraphicalPicker.Brightness">
            <summary>
            Gets or sets the Brightness value of the selected color.
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.UI.Common.WPF.GraphicalPicker.SaturationPosition">
            <summary>
            Gets or sets the Saturation thumb position for inside the SVTriangle.
            (Works in conjunction with Brightness position to place circle thumb.)
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.UI.Common.WPF.GraphicalPicker.BrightnessPosition">
            <summary>
            Gets or sets the Brightness thumb position for inside the SVTriangle.
            (Works in conjunction with Saturation position to place circle thumb.)
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.UI.Common.WPF.GraphicalPicker.SliderValue">
            <summary>
            Gets or sets the Slider thumb position for the selected channel.
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.UI.Common.WPF.GraphicalPicker.SliderHeight">
            <summary>
            Property that calculates correct scale multiplier for having
            Multipurpose slider resize proportional to Outer Ellipse.
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.UI.Common.WPF.GraphicalPicker.TriangleCenterPosition">
            <summary>
            An anchor that positions itself at the center of the hue radial.
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.UI.Common.WPF.GraphicalPicker.TriangleRotation">
            <summary>
            Angle that the 'Triangle' should rotate itself to.
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.UI.Common.WPF.GraphicalPicker.HueLineRotation">
            <summary>
            Angle that the 'Line' should rotate itself to.
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.UI.Common.WPF.GraphicalPicker.SliderColorTop">
            <summary>
            Property displayed on one end of the Multipurpose slider, see BottomColor.
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.UI.Common.WPF.GraphicalPicker.SliderColorBottom">
            <summary>
            Property displayed on one end of the Multipurpose slider, see TopColor.
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.UI.Common.WPF.GraphicalPicker.HueLineColor">
            <summary>
            Hue Line Color, in circular hue chooser.
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.UI.Common.WPF.GraphicalPicker.SliderLineColor">
            <summary>
            Multipurpose Slider Line Color.
            </summary>
        </member>
        <member name="E:Emergent.Toolbench.UI.Common.WPF.GraphicalPicker.SelectedColorChanged">
            <summary>
            Event handler fired when the selected color changes.
            </summary>
        </member>
        <member name="T:Emergent.Toolbench.UI.Common.WPF.GraphicalPicker.Channels">
            <summary>
            Defines the different channels for a color
            </summary>
        </member>
        <member name="T:Emergent.Toolbench.UI.Common.Windows32.ScrollBarCommand">
            <summary>
            
            </summary>
        </member>
        <member name="F:Emergent.Toolbench.UI.Common.Windows32.ScrollBarCommand.LineUp">
            <summary>
            
            </summary>
            <remarks>SB_LINEUP</remarks>
        </member>
        <member name="F:Emergent.Toolbench.UI.Common.Windows32.ScrollBarCommand.LineLeft">
            <summary>
            
            </summary>
            <remarks>SB_LINELEFT</remarks>
        </member>
        <member name="F:Emergent.Toolbench.UI.Common.Windows32.ScrollBarCommand.LineDown">
            <summary>
            
            </summary>
            <remarks>SB_LINEDOWN</remarks>
        </member>
        <member name="F:Emergent.Toolbench.UI.Common.Windows32.ScrollBarCommand.LineRight">
            <summary>
            
            </summary>
            <remarks>SB_LINERIGHT</remarks>
        </member>
        <member name="F:Emergent.Toolbench.UI.Common.Windows32.ScrollBarCommand.PageUp">
            <summary>
            
            </summary>
            <remarks>SB_PAGEUP</remarks>
        </member>
        <member name="F:Emergent.Toolbench.UI.Common.Windows32.ScrollBarCommand.PageLeft">
            <summary>
            
            </summary>
            <remarks>SB_PAGELEFT</remarks>
        </member>
        <member name="F:Emergent.Toolbench.UI.Common.Windows32.ScrollBarCommand.PageDown">
            <summary>
            
            </summary>
            <remarks>SB_PAGEDOWN</remarks>
        </member>
        <member name="F:Emergent.Toolbench.UI.Common.Windows32.ScrollBarCommand.PageRight">
            <summary>
            
            </summary>
            <remarks>SB_PAGERIGHT</remarks>
        </member>
        <member name="F:Emergent.Toolbench.UI.Common.Windows32.ScrollBarCommand.ThumbPosition">
            <summary>
            
            </summary>
            <remarks>SB_THUMBPOSITION</remarks>
        </member>
        <member name="F:Emergent.Toolbench.UI.Common.Windows32.ScrollBarCommand.ThumbTrack">
            <summary>
            
            </summary>
            <remarks>SB_THUMBTRACK</remarks>
        </member>
        <member name="F:Emergent.Toolbench.UI.Common.Windows32.ScrollBarCommand.Top">
            <summary>
            
            </summary>
            <remarks>SB_TOP</remarks>
        </member>
        <member name="F:Emergent.Toolbench.UI.Common.Windows32.ScrollBarCommand.Left">
            <summary>
            
            </summary>
            <remarks>SB_LEFT</remarks>
        </member>
        <member name="F:Emergent.Toolbench.UI.Common.Windows32.ScrollBarCommand.Bottom">
            <summary>
            
            </summary>
            <remarks>SB_BOTTOM</remarks>
        </member>
        <member name="F:Emergent.Toolbench.UI.Common.Windows32.ScrollBarCommand.Right">
            <summary>
            
            </summary>
            <remarks>SB_RIGHT</remarks>
        </member>
        <member name="F:Emergent.Toolbench.UI.Common.Windows32.ScrollBarCommand.EndScroll">
            <summary>
            
            </summary>
            <remarks>SB_ENDSCROLL</remarks>
        </member>
        <member name="T:Emergent.Toolbench.UI.Common.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.UI.Common.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.UI.Common.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="T:Emergent.Toolbench.UI.Common.WPF.SortListViewColumn">
            <summary>
            A column in the SortListView object that allows the SortProperty and 
            SortStyle to be specified in XAML. The SortProperty specifies the 
            underlying bound property that is used when sorting and SortStyle
            specifies the resource that is used for the column header.
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.UI.Common.WPF.SortListViewColumn.SortProperty">
            <summary>
            Gets or sets the sort property.
            </summary>
            <value>The sort property.</value>
        </member>
        <member name="P:Emergent.Toolbench.UI.Common.WPF.SortListViewColumn.SortStyle">
            <summary>
            Gets or sets the sort style.
            </summary>
            <value>The sort style.</value>
        </member>
        <member name="T:Emergent.Toolbench.UI.Common.WPF.SortListView">
            <summary>
            A ListView control that supports sorting.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.UI.Common.WPF.SortListView.OnInitialized(System.EventArgs)">
            <summary>
            Raises the <see cref="E:System.Windows.FrameworkElement.Initialized"/> event. 
            This method is invoked whenever 
            <see cref="P:System.Windows.FrameworkElement.IsInitialized"/> is set to true internally.
            </summary>
            <param name="e">The <see cref="T:System.Windows.RoutedEventArgs"/> that contains the 
            event data.</param>
        </member>
        <member name="M:Emergent.Toolbench.UI.Common.WPF.SortListView.OnHeaderClicked(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            A header was clicked. Sort the associated column.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.UI.Common.WPF.SortListView.SortList(System.String)">
            <summary>
            Sort the data.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.UI.Common.WPF.SortListView.UpdateHeaderTemplate">
            <summary>
            Update the column header based on the sort column and order.
            </summary>
        </member>
        <member name="T:Emergent.Toolbench.UI.Common.WPF.AdditionConverter">
            <summary>
            Convert a double value to a new value where we "add(+)" the parameter
            </summary>
        </member>
        <member name="T:Emergent.Toolbench.UI.Common.Windows32.ScrollBarLocation">
            <summary>
            An enumerator of scrollbars.
            </summary>
        </member>
        <member name="F:Emergent.Toolbench.UI.Common.Windows32.ScrollBarLocation.Horizontal">
            <summary>
            The horizontal scroll bar of the specified window.
            </summary>
            <remarks>SB_HORZ</remarks>
        </member>
        <member name="F:Emergent.Toolbench.UI.Common.Windows32.ScrollBarLocation.Vertical">
            <summary>
            The vertical scroll bar of the specified window.
            </summary>
            <remarks>SB_VERT</remarks>
        </member>
        <member name="F:Emergent.Toolbench.UI.Common.Windows32.ScrollBarLocation.Control">
            <summary>
            A scroll bar control.
            </summary>
            <remarks>SB_CTL</remarks>
        </member>
        <member name="F:Emergent.Toolbench.UI.Common.Windows32.ScrollBarLocation.Both">
            <summary>
            The horizontal and vertical scroll bars of the specified window.
            </summary>
            <remarks>SB_BOTH</remarks>
        </member>
        <member name="M:Emergent.Toolbench.UI.Common.WPF.Helpers.FindVisualDescendant``1(System.Windows.DependencyObject)">
            <summary>
            Recursively finds a WPF object of a specified type in the visual descendants.
            </summary>
            <typeparam name="T">Type of descendant to look at.</typeparam>
            <param name="from">Where to start looking at.</param>
            <returns>The first decendant found of the requested type.</returns>
        </member>
        <member name="M:Emergent.Toolbench.UI.Common.WPF.Helpers.FindVisualDescendants``1(System.Windows.DependencyObject)">
            <summary>
            Finds all the visual descendants that match the specified type
            </summary>
            <typeparam name="T">Type to match</typeparam>
            <param name="current">The current.</param>
            <returns>The list of object matching</returns>
        </member>
        <member name="M:Emergent.Toolbench.UI.Common.WPF.Helpers.FindParent``1(System.Windows.DependencyObject)">
            <summary>
            Recursively finds a WPF object of a specified type in the visual parents.
            </summary>
            <typeparam name="T">Type of parent to look at.</typeparam>
            <param name="from">Where to start looking at.</param>
            <returns>The first parent found of the requested type.</returns>
        </member>
        <member name="M:Emergent.Toolbench.UI.Common.WPF.Helpers.FindLogicalDescendants``1(System.Windows.DependencyObject)">
            <summary>
            Recursively finds all WPF object of a specified type in the logical descendants.
            </summary>
            <typeparam name="T">Type of descendant to look at.</typeparam>
            <param name="from">Where to start looking at.</param>
            <returns>The first decendant found of the requested type.</returns>
        </member>
        <member name="M:Emergent.Toolbench.UI.Common.WPF.Helpers.FindLogicalParent``1(System.Windows.DependencyObject)">
            <summary>
            Recursively finds a WPF object of a specified type in the logical parents.
            </summary>
            <typeparam name="T">Type of parent to look at.</typeparam>
            <param name="from">Where to start looking at.</param>
            <returns>The first parent found of the requested type.</returns>
        </member>
        <member name="M:Emergent.Toolbench.UI.Common.WPF.Helpers.PushTextBoxChanges">
            <summary>
            Pushes the text box changes by updating the binding source
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.UI.Common.WPF.Helpers.ComputeOffset(System.Windows.Media.Visual,System.Windows.Media.Visual)">
            <summary>
            Computes the offset of a child visual with regards to a parent used as a reference.
            </summary>
            <param name="reference">The reference parent.</param>
            <param name="child">The child.</param>
            <returns></returns>
            <remarks>This is particularly useful to determine the offset of a ListViewItem
            while taking into account the ListView header.</remarks>
        </member>
        <member name="T:Emergent.Toolbench.UI.Common.WPF.EditFailedEventArgs">
            <summary>
            Contains error data that are attached with an EditFailed event.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.UI.Common.WPF.EditFailedEventArgs.#ctor(System.Windows.Controls.ValidationError)">
            <summary>
            Initializes a new instance of the <see cref="T:Emergent.Toolbench.UI.Common.WPF.EditFailedEventArgs"/> class.
            </summary>
            <param name="error">The error.</param>
        </member>
        <member name="P:Emergent.Toolbench.UI.Common.WPF.EditFailedEventArgs.Error">
            <summary>
            Gets the error that causes the edit failed.
            </summary>
            <value>The error.</value>
        </member>
        <member name="T:Emergent.Toolbench.UI.Common.WPF.EditTextBlock">
            <summary>
            Represents a TextBlock that behaves like Windows Explorer by supporting in-place editing.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.UI.Common.WPF.EditTextBlock.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Emergent.Toolbench.UI.Common.WPF.EditTextBlock"/> class.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.UI.Common.WPF.EditTextBlock.OnMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Invoked when an unhandled <see cref="E:System.Windows.UIElement.MouseLeftButtonDown"/> 
            routed event is raised on this element. Implement this method to add class handling for 
            this event.
            </summary>
            <param name="e">The <see cref="T:System.Windows.Input.MouseButtonEventArgs"/> that 
            contains the event data. The event data reports that the left mouse button was pressed.
            </param>
        </member>
        <member name="M:Emergent.Toolbench.UI.Common.WPF.EditTextBlock.OnMouseLeftButtonUp(System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Invoked when an unhandled <see cref="E:System.Windows.UIElement.MouseLeftButtonUp"/> 
            routed event reaches an element in its route that is derived from this class. Implement 
            this method to add class handling for this event.
            </summary>
            <param name="e">The <see cref="T:System.Windows.Input.MouseButtonEventArgs"/> that 
            contains the event data. The event data reports that the left mouse button was released.
            </param>
        </member>
        <member name="P:Emergent.Toolbench.UI.Common.WPF.EditTextBlock.EditText">
            <summary>
            Gets or sets the edit text if different from the Text. Use this property if the edit
            text must be different from the display text.
            This is a dependency property.
            </summary>
            <value>The edit text.</value>
        </member>
        <member name="P:Emergent.Toolbench.UI.Common.WPF.EditTextBlock.IsEditing">
            <summary>
            Gets or sets a value indicating whether the EditTextBlock is editing.
            This is a dependency property.
            </summary>
            <value>
                <c>true</c> if the EditTextBlock is editing; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Emergent.Toolbench.UI.Common.WPF.EditTextBlock.IsSelectedInternal">
            <summary>
            Gets a value indicating whether the EditTextBlock is selected.
            </summary>
            <value>
                <c>true</c> if the EditTextBlock is selected; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:Emergent.Toolbench.UI.Common.WPF.EditTextBlockAdorner">
            <summary>
            Represents an adorner layer that is placed above the EditTextBlock to give an editable
            area.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.UI.Common.WPF.EditTextBlockAdorner.#ctor(Emergent.Toolbench.UI.Common.WPF.EditTextBlock,System.Windows.Controls.TextBox)">
            <summary>
            Initializes a new instance of the <see cref="T:Emergent.Toolbench.UI.Common.WPF.EditTextBlockAdorner"/> class.
            </summary>
            <param name="EditTextBlock">The adorned TextBlock.</param>
            <param name="adorningElement">The adorning element.</param>
        </member>
        <member name="M:Emergent.Toolbench.UI.Common.WPF.EditTextBlockAdorner.ArrangeOverride(System.Windows.Size)">
            <summary>
            When overridden in a derived class, positions child elements and determines a size for a
            <see cref="T:System.Windows.FrameworkElement"/> derived class.
            </summary>
            <param name="finalSize">The final area within the parent that this element should use to 
            arrange itself and its children.</param>
            <returns>The actual size used.</returns>
        </member>
        <member name="M:Emergent.Toolbench.UI.Common.WPF.EditTextBlockAdorner.GetVisualChild(System.Int32)">
            <summary>
            Overrides <see cref="M:System.Windows.Media.Visual.GetVisualChild(System.Int32)"/>, and 
            returns a child at the specified index from a collection of child elements.
            </summary>
            <param name="index">The zero-based index of the requested child element in the 
            collection.</param>
            <returns>
            The requested child element. This should not return null; if the provided index is out 
            of range, an exception is thrown.
            </returns>
        </member>
        <member name="M:Emergent.Toolbench.UI.Common.WPF.EditTextBlockAdorner.MeasureOverride(System.Windows.Size)">
            <summary>
            When overridden in a derived class, measures the size in layout required for child 
            elements and determines a size for the <see cref="T:System.Windows.FrameworkElement"/>
            derived class.
            </summary>
            <param name="availableSize">The available size that this element can give to child 
            elements. Infinity can be specified as a value to indicate that the element will size to
            whatever content is available.</param>
            <returns>
            The size that this element determines it needs during layout, based on its calculations 
            of child element sizes.
            </returns>
        </member>
        <member name="P:Emergent.Toolbench.UI.Common.WPF.EditTextBlockAdorner.VisualChildrenCount">
            <summary>
            Gets the number of visual child elements within this element.
            </summary>
            <value></value>
            <returns>
            The number of visual child elements for this element.
            </returns>
        </member>
        <member name="T:Emergent.Toolbench.UI.Common.Windows32.ScrollInfo">
            <summary>
            A structure containing the scroll bar information.
            </summary>
        </member>
        <member name="T:Emergent.Toolbench.UI.Common.Windows32.ScrollInfoMask">
            <summary>
            The mask that determines what info will be gathered from a call to 
            User32.GetScrollInfo().
            </summary>
        </member>
        <member name="F:Emergent.Toolbench.UI.Common.Windows32.ScrollInfoMask.Range">
            <summary>
            
            </summary>
            <remarks>SIF_RANGE</remarks>
        </member>
        <member name="F:Emergent.Toolbench.UI.Common.Windows32.ScrollInfoMask.Page">
            <summary>
            
            </summary>
            <remarks>SIF_PAGE</remarks>
        </member>
        <member name="F:Emergent.Toolbench.UI.Common.Windows32.ScrollInfoMask.Position">
            <summary>
            
            </summary>
            <remarks>SIF_POS</remarks>
        </member>
        <member name="F:Emergent.Toolbench.UI.Common.Windows32.ScrollInfoMask.DisableNoScroll">
            <summary>
            
            </summary>
            <remarks>SIF_DISABLENOSCROLL</remarks>
        </member>
        <member name="F:Emergent.Toolbench.UI.Common.Windows32.ScrollInfoMask.TrackPosition">
            <summary>
            
            </summary>
            <remarks>SIF_TRACKPOS</remarks>
        </member>
        <member name="F:Emergent.Toolbench.UI.Common.Windows32.ScrollInfoMask.All">
            <summary>
            
            </summary>
            <remarks>SIF_ALL</remarks>
        </member>
        <member name="T:XamlGeneratedNamespace.GeneratedInternalTypeHelper">
            <summary>
            GeneratedInternalTypeHelper
            </summary>
        </member>
        <member name="M:XamlGeneratedNamespace.GeneratedInternalTypeHelper.CreateInstance(System.Type,System.Globalization.CultureInfo)">
            <summary>
            CreateInstance
            </summary>
        </member>
        <member name="M:XamlGeneratedNamespace.GeneratedInternalTypeHelper.GetPropertyValue(System.Reflection.PropertyInfo,System.Object,System.Globalization.CultureInfo)">
            <summary>
            GetPropertyValue
            </summary>
        </member>
        <member name="M:XamlGeneratedNamespace.GeneratedInternalTypeHelper.SetPropertyValue(System.Reflection.PropertyInfo,System.Object,System.Object,System.Globalization.CultureInfo)">
            <summary>
            SetPropertyValue
            </summary>
        </member>
        <member name="M:XamlGeneratedNamespace.GeneratedInternalTypeHelper.CreateDelegate(System.Type,System.Object,System.String)">
            <summary>
            CreateDelegate
            </summary>
        </member>
        <member name="M:XamlGeneratedNamespace.GeneratedInternalTypeHelper.AddEventHandler(System.Reflection.EventInfo,System.Object,System.Delegate)">
            <summary>
            AddEventHandler
            </summary>
        </member>
    </members>
</doc>
