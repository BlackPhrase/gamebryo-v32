<?xml version="1.0"?>
<doc>
    <assembly>
        "Emergent.Toolbench.RevisionControl"
    </assembly>
    <members>
        <member name="P:Emergent.Toolbench.RevisionControl.Plugin.StaticResources">
            <summary />
        </member>
        <member name="P:Emergent.Toolbench.RevisionControl.Plugin.StaticDescriptor">
            <summary />
        </member>
        <member name="M:Emergent.Toolbench.RevisionControl.Plugin.Stop">
            <summary />
        </member>
        <member name="M:Emergent.Toolbench.RevisionControl.Plugin.Start">
            <summary />
        </member>
        <member name="T:Emergent.Toolbench.RevisionControl.Plugin">
            <summary>
The plugin initializer for the revision control plugin.
</summary>
        </member>
        <member name="M:NiInitOptions.GetParallelExecution">
Returns whether or not Floodgate is using a parallel execution model.
</member>
        <member name="M:NiInitOptions.SetFloodgateParallelExecution(System.Boolean)">
Sets whether or not Floodgate should operate with a parallel execution
model. Floodgate will operate with a parallel execution model by
default. In general parallel execution should only turned on when
operating on a single core machine.

</member>
        <member name="M:NiInitOptions.GetWorkerThreadAffinityFunc">
Gets a callback method for Floodgate to use when determining the
processor affinity of the worker threads.
</member>
        <member name="M:NiInitOptions.SetWorkerThreadAffinityFunc(System.Void*)">
Sets a callback method for Floodgate to use when determining the
processor affinity of the worker threads.
</member>
        <member name="M:NiInitOptions.GetDispatchThreadAffinityFunc">
Gets a callback method for Floodgate to use when determining the
processor affinity of the dispatcher thread.
</member>
        <member name="M:NiInitOptions.SetDispatchThreadAffinityFunc(System.Void*)">
Sets a callback method for Floodgate to use when determining the
thread affinity of the dispatcher thread.
</member>
        <member name="M:NiInitOptions.GetFloodgateDefineWorkerThreadCountFunc">
Gets a callback method for Floodgate to use when determining the number
of worker threads to create.
</member>
        <member name="M:NiInitOptions.SetFloodgateDefineWorkerThreadCountFunc(System.Void*)">
Sets a callback method for Floodgate to use when determining the number
of worker threads to create.
</member>
        <member name="M:Emergent.Toolbench.RevisionControl.RenameCommand.Execute(Emergent.Toolbench.RevisionControl.IRevisionService,Emergent.Toolbench.RevisionControl.IRevisionProvider)">
            <summary>
Executes the command.
</summary>
            <param name="service">The revision service that executed the command.</param>
            <param name="provider">The revision provider to execute the command with.</param>
            <return>The result of executing the command.</return>
        </member>
        <member name="P:Emergent.Toolbench.RevisionControl.RenameCommand.ToFile">
            <summary>
Gets the name of the file to rename to.
</summary>
        </member>
        <member name="P:Emergent.Toolbench.RevisionControl.RenameCommand.FromFile">
            <summary>
Gets the name of the file to rename from.
</summary>
        </member>
        <member name="M:Emergent.Toolbench.RevisionControl.RenameCommand.#ctor(System.String,System.String,System.IntPtr)">
            <summary>
Initializes a new instance of the <see cref="T:Emergent.Toolbench.RevisionControl.RenameCommand" /> class.
</summary>
            <param name="fromFile">The file to rename from.</param>
            <param name="toFile">The file to rename to.</param>
            <param name="pRcs">The native RCS provider.</param>
        </member>
        <member name="T:Emergent.Toolbench.RevisionControl.RenameCommand">
            <summary>
The <see cref="T:Emergent.Toolbench.RevisionControl.RenameCommand" /> class wraps the calling of the rename command in the 
native revision control provider.
</summary>
        </member>
        <member name="M:Emergent.Toolbench.RevisionControl.DeleteCommand.Execute(Emergent.Toolbench.RevisionControl.IRevisionService,Emergent.Toolbench.RevisionControl.IRevisionProvider)">
            <summary>
Executes the command.
</summary>
            <param name="service">The revision service that executed the command.</param>
            <param name="provider">The revision provider to execute the command with.</param>
            <return>The result of executing the command.</return>
        </member>
        <member name="P:Emergent.Toolbench.RevisionControl.DeleteCommand.File">
            <summary>
Gets the name of the file to be deleted.
</summary>
        </member>
        <member name="M:Emergent.Toolbench.RevisionControl.DeleteCommand.#ctor(System.String,System.IntPtr)">
            <summary>
Initializes a new instance of the <see cref="T:Emergent.Toolbench.RevisionControl.DeleteCommand" /> class.
</summary>
            <param name="file">The file to delete.</param>
            <param name="pRcs">The native RCS provider.</param>
        </member>
        <member name="T:Emergent.Toolbench.RevisionControl.DeleteCommand">
            <summary>
The <see cref="T:Emergent.Toolbench.RevisionControl.DeleteCommand" /> class wraps the calling of the delete command in the 
native revision control provider.
</summary>
        </member>
        <member name="M:Emergent.Toolbench.RevisionControl.AddCommand.Execute(Emergent.Toolbench.RevisionControl.IRevisionService,Emergent.Toolbench.RevisionControl.IRevisionProvider)">
            <summary>
Executes the command.
</summary>
            <param name="service">The revision service that executed the command.</param>
            <param name="provider">The revision provider to execute the command with.</param>
            <return>The result of executing the command.</return>
        </member>
        <member name="P:Emergent.Toolbench.RevisionControl.AddCommand.File">
            <summary>
Gets the name of the file to be added.
</summary>
        </member>
        <member name="M:Emergent.Toolbench.RevisionControl.AddCommand.#ctor(System.String,System.IntPtr)">
            <summary>
Initializes a new instance of the <see cref="T:Emergent.Toolbench.RevisionControl.AddCommand" /> class.
</summary>
            <param name="file">The file to add.</param>
            <param name="pRcs">The native RCS provider.</param>
        </member>
        <member name="T:Emergent.Toolbench.RevisionControl.AddCommand">
            <summary>
The <see cref="T:Emergent.Toolbench.RevisionControl.AddCommand" /> class wraps the calling of the add command in the native
revision control provider.
</summary>
        </member>
        <member name="M:Emergent.Toolbench.RevisionControl.EditCommand.Execute(Emergent.Toolbench.RevisionControl.IRevisionService,Emergent.Toolbench.RevisionControl.IRevisionProvider)">
            <summary>
Executes the command.
</summary>
            <param name="service">The revision service that executed the command.</param>
            <param name="provider">The revision provider to execute the command with.</param>
            <return>The result of executing the command.</return>
        </member>
        <member name="P:Emergent.Toolbench.RevisionControl.EditCommand.File">
            <summary>
Gets the name of the file to be opened for edit.
</summary>
        </member>
        <member name="M:Emergent.Toolbench.RevisionControl.EditCommand.#ctor(System.String,System.IntPtr)">
            <summary>
Initializes a new instance of the <see cref="T:Emergent.Toolbench.RevisionControl.EditCommand" /> class.
</summary>
            <param name="file">The file to delete.</param>
            <param name="pRcs">The native RCS provider.</param>
        </member>
        <member name="T:Emergent.Toolbench.RevisionControl.EditCommand">
            <summary>
The <see cref="T:Emergent.Toolbench.RevisionControl.EditCommand" /> class wraps the calling of the delete command in the 
native revision control provider.
</summary>
        </member>
        <member name="M:Emergent.Toolbench.RevisionControl.RevisionFeedback.LogMessage(etk.RCSFeedback.MessageSeverity,efd.utf8string!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary />
        </member>
        <member name="M:Emergent.Toolbench.RevisionControl.RevisionFeedback.HandleError(etk.RCSResult*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary />
        </member>
        <member name="M:Emergent.Toolbench.RevisionControl.RevisionFeedback.Dispose">
            <summary />
        </member>
        <member name="M:Emergent.Toolbench.RevisionControl.RevisionFeedback.#ctor(Emergent.Toolbench.RevisionControl.RevisionService)">
            <summary />
        </member>
        <member name="T:Emergent.Toolbench.RevisionControl.RevisionFeedback">
            <summary>
The <see cref="T:Emergent.Toolbench.RevisionControl.RevisionFeedback" /> class is the callback object used by the native 
revision providers in order to send events back to the managed layer when things like a
connection interruption occur.
</summary>
        </member>
        <member name="M:Emergent.Toolbench.RevisionControl.DefaultProvider.Execute(Emergent.Toolbench.RevisionControl.IRevisionService,Emergent.Toolbench.RevisionControl.IRevisionCommand)">
            <summary>
Called by the <see cref="T:Emergent.Toolbench.RevisionControl.IRevisionService" /> when a command is finally ready to 
execute on the command execution thread.
</summary>
            <param name="service">The revision service that is currently running.</param>
            <param name="command">The command that will be executed.</param>
            <returns>The result of the command executed.</returns>
        </member>
        <member name="M:Emergent.Toolbench.RevisionControl.DefaultProvider.BeforeExecute(Emergent.Toolbench.RevisionControl.IRevisionCommand)">
            <summary>
Before a command executes and before the actual file IO occurs, this method will be 
called, giving the provider a chance to do something before anything occurs to the disk 
or to the state of the native provider.
</summary>
            <param name="command">The command that will be executed.</param>
            <returns>Returns <c>true</c> if the command can execute, otherwise <c>false</c>.
</returns>
        </member>
        <member name="M:Emergent.Toolbench.RevisionControl.DefaultProvider.Shutdown">
            <summary>
Shutdown the managed provider.
</summary>
        </member>
        <member name="M:Emergent.Toolbench.RevisionControl.DefaultProvider.Initialize(System.IntPtr)">
            <summary>
Initializes the managed provider.
</summary>
            <param name="nativeProvider">The native RCS provider, if one exists.</param>
        </member>
        <member name="T:Emergent.Toolbench.RevisionControl.DefaultProvider">
            <summary>
The <see cref="T:Emergent.Toolbench.RevisionControl.DefaultProvider" /> class implements a default set of rules that the
managed layer will take care of for the unmanaged provider.
</summary>
        </member>
        <member name="M:Emergent.Toolbench.RevisionControl.NoneProvider.Execute(Emergent.Toolbench.RevisionControl.IRevisionService,Emergent.Toolbench.RevisionControl.IRevisionCommand)">
            <summary>
Called by the <see cref="T:Emergent.Toolbench.RevisionControl.IRevisionService" /> when a command is finally ready to 
execute on the command execution thread.  This method will not execute any commands
with any native provider.
</summary>
            <param name="service">The revision service that is currently running.</param>
            <param name="command">The command that will be executed.</param>
            <returns>The result of the command executed.</returns>
        </member>
        <member name="M:Emergent.Toolbench.RevisionControl.NoneProvider.BeforeExecute(Emergent.Toolbench.RevisionControl.IRevisionCommand)">
            <summary>
Before a command executes and before the actual file IO occurs, this method will be 
called, giving the provider a chance to do something before anything occurs to the disk 
or to the state of the native provider.
</summary>
            <param name="command">The command that will be executed.</param>
            <returns>Returns <c>true</c> if the command can execute, otherwise <c>false</c>.
</returns>
        </member>
        <member name="M:Emergent.Toolbench.RevisionControl.NoneProvider.Shutdown">
            <summary>
Shutdown the managed provider.
</summary>
        </member>
        <member name="M:Emergent.Toolbench.RevisionControl.NoneProvider.Initialize(System.IntPtr)">
            <summary>
Initializes the managed provider.
</summary>
            <param name="nativeProvider">The native RCS provider, if one exists.</param>
        </member>
        <member name="T:Emergent.Toolbench.RevisionControl.NoneProvider">
            <summary>
The <see cref="T:Emergent.Toolbench.RevisionControl.NoneProvider" /> class implements the code needed to perform the equivalent 
of an SCM operation where no SCM provider exists or a connection can not be made.
</summary>
        </member>
        <member name="M:Emergent.Toolbench.RevisionControl.RevisionService.ProcessQueue">
            <summary />
        </member>
        <member name="M:Emergent.Toolbench.RevisionControl.RevisionService.OnFlushCache(System.Object,System.EventArgs)">
            <summary />
        </member>
        <member name="M:Emergent.Toolbench.RevisionControl.RevisionService.UpdateStatus(Emergent.Toolbench.RevisionControl.RevisionStatus)">
            <summary>
Updates the status of the status object passed in.
</summary>
        </member>
        <member name="M:Emergent.Toolbench.RevisionControl.RevisionService.UpdateStatus(System.String)">
            <summary>
Updates the status of the file in the cache if it exists.
</summary>
        </member>
        <member name="M:Emergent.Toolbench.RevisionControl.RevisionService.Finalize">
            <summary />
        </member>
        <member name="M:Emergent.Toolbench.RevisionControl.RevisionService.Dispose">
            <summary />
        </member>
        <member name="M:Emergent.Toolbench.RevisionControl.RevisionService.#ctor">
            <summary />
        </member>
        <member name="E:Emergent.Toolbench.RevisionControl.RevisionService.EndWait">
            <summary>
This event is fired when the revision service has finished a previous request and 
is ready for the <see cref="E:Emergent.Toolbench.RevisionControl.RevisionService.BeginWait" /> to end.  This is a multi-threaded event.
</summary>
        </member>
        <member name="E:Emergent.Toolbench.RevisionControl.RevisionService.BeginWait">
            <summary>
This event is fired when the revision service needs the incoming request for a new 
transaction blocked until <see cref="E:Emergent.Toolbench.RevisionControl.RevisionService.EndWait" /> is called.
</summary>
        </member>
        <member name="E:Emergent.Toolbench.RevisionControl.RevisionService.Interuption">
            <summary>
This event is fired when the revision service is interrupted during an operation.
This is a multi-threaded event.
</summary>
        </member>
        <member name="E:Emergent.Toolbench.RevisionControl.RevisionService.ConnectionFailed">
            <summary>
This event is fired when the revision service fails to connect.
</summary>
        </member>
        <member name="E:Emergent.Toolbench.RevisionControl.RevisionService.ConnectionLost">
            <summary>
This event is fired when the revision service lost a connection when it was not 
expecting to.  This event only fires when the revision service becomes disconnected 
or is unable to connect not through an explicit disconnect call.
</summary>
        </member>
        <member name="T:Emergent.Toolbench.RevisionControl.RevisionService">
            <summary />
        </member>
        <member name="M:Emergent.Toolbench.RevisionControl.RevisionProviderDescriptor.CreateProvider">
            <summary />
        </member>
        <member name="P:Emergent.Toolbench.RevisionControl.RevisionProviderDescriptor.Class">
            <summary />
        </member>
        <member name="P:Emergent.Toolbench.RevisionControl.RevisionProviderDescriptor.Id">
            <summary />
        </member>
        <member name="P:Emergent.Toolbench.RevisionControl.RevisionProviderDescriptor.Name">
            <summary />
        </member>
        <member name="M:Emergent.Toolbench.RevisionControl.RevisionProviderDescriptor.#ctor(Emergent.Toolbench.IElementData)">
            <summary />
        </member>
        <member name="T:Emergent.Toolbench.RevisionControl.RevisionProviderDescriptor">
            <summary>
The <see cref="T:Emergent.Toolbench.RevisionControl.RevisionProviderDescriptor" /> class is used as a container for the 
Emergent.Toolbench.RevisionControl.Provider extension point.
</summary>
        </member>
        <member name="M:Emergent.Toolbench.RevisionControl.IRevisionService.ForceCancel">
            <summary>
Forces a cancel operation without waiting.
</summary>
        </member>
        <member name="M:Emergent.Toolbench.RevisionControl.IRevisionService.Cancel">
            <summary>
Cancels the current running transaction, if a transaction is still running this method
cause the BeginWait event to be called to wait before continuing with the cancel.
</summary>
        </member>
        <member name="M:Emergent.Toolbench.RevisionControl.IRevisionService.InvalidateStatusCache">
            <summary>
Invalidates the status cache.  This will cause every status object to call their 
Invalid event handlers so that anyone attempting to display current status will
request status again.
</summary>
        </member>
        <member name="M:Emergent.Toolbench.RevisionControl.IRevisionService.UpdateStatus(System.String)">
            <summary>
Updates the status of the file in the cache if it exists.
</summary>
            <param name="file">The name of the file to update in the cache.</param>
        </member>
        <member name="M:Emergent.Toolbench.RevisionControl.IRevisionService.RequestStatus(System.String,System.Boolean)">
            <summary>
Requests the status from the revision control provider for a given file.
</summary>
            <param name="file">The name of the file to get status for.</param>
            <param name="useCache">If <c>true</c> then the last cached status will be 
returned, otherwise full status will be requested from the provider.</param>
            <return>A status object for the file that was requested.</return>
        </member>
        <member name="M:Emergent.Toolbench.RevisionControl.IRevisionService.RequestStatus(System.String)">
            <summary>
Requests the status from the revision control provider for a given file, if the file is
already in the cache, the cached status will be returned.
</summary>
            <param name="file">The name of the file to get status for.</param>
            <return>A status object for the file that was requested.</return>
        </member>
        <member name="M:Emergent.Toolbench.RevisionControl.IRevisionService.Execute(Emergent.Toolbench.RevisionControl.IRevisionCommand)">
            <summary>
Pushes a command onto the currently open transaction.  If a transaction is not 
currently opened, a transaction will be created with the single command provided
pushed onto it, and then immediately ended.
</summary>
            <param name="command">The command to push onto the currently open transaction.</param>
        </member>
        <member name="M:Emergent.Toolbench.RevisionControl.IRevisionService.Rename(System.String,System.String)">
            <summary>
Creates an rename command for the file and pushes it onto the current transaction.
</summary>
            <param name="fromFile">The file to rename from.</param>
            <param name="toFile">The file to rename to.</param>
        </member>
        <member name="M:Emergent.Toolbench.RevisionControl.IRevisionService.Delete(System.String)">
            <summary>
Creates an delete command for the file and pushes it onto the current transaction.
</summary>
            <param name="file">The file to open for delete.</param>
        </member>
        <member name="M:Emergent.Toolbench.RevisionControl.IRevisionService.Add(System.String)">
            <summary>
Creates an add command for the file and pushes it onto the current transaction.
</summary>
            <param name="file">The file to open for add.</param>
        </member>
        <member name="M:Emergent.Toolbench.RevisionControl.IRevisionService.Edit(System.String)">
            <summary>
Creates an edit command for the file and pushes it onto the current transaction.
</summary>
            <param name="file">The file to open for edit.</param>
        </member>
        <member name="M:Emergent.Toolbench.RevisionControl.IRevisionService.EndTransaction">
            <summary>
Ends the current transaction, if this is the last transaction to be closed, it will 
then commit all the commands to be run on the revision provider in a non-blocking 
manner.
</summary>
        </member>
        <member name="M:Emergent.Toolbench.RevisionControl.IRevisionService.AbortTransaction">
            <summary>
Aborts the current open transaction block, but will not abort all started transactions.
</summary>
        </member>
        <member name="M:Emergent.Toolbench.RevisionControl.IRevisionService.StartTransaction">
            <summary>
Starts a new transaction, multiple transaction blocks can be nested, but are not 
committed until the final transaction is closed.
</summary>
        </member>
        <member name="P:Emergent.Toolbench.RevisionControl.IRevisionService.RunningTransaction">
            <summary>
Gets the currently running transaction.
</summary>
        </member>
        <member name="P:Emergent.Toolbench.RevisionControl.IRevisionService.IsTransactionRunning">
            <summary>
Gets a value indicating if the revision service currently has a transaction running.
</summary>
        </member>
        <member name="P:Emergent.Toolbench.RevisionControl.IRevisionService.IsTransactionOpen">
            <summary>
Gets a value indicating if the revision service has a transaction open already.
</summary>
        </member>
        <member name="P:Emergent.Toolbench.RevisionControl.IRevisionService.IsBusy">
            <summary>
Gets a value indicating if the revision service is currently busy performing any 
requests.
</summary>
        </member>
        <member name="P:Emergent.Toolbench.RevisionControl.IRevisionService.CurrentPolicy">
            <summary>
Gets or sets the current revision control policy to be used when importing asset webs.
</summary>
        </member>
        <member name="P:Emergent.Toolbench.RevisionControl.IRevisionService.CurrentNativeProvider">
            <summary>
Gets the current native revision control provider.
</summary>
        </member>
        <member name="P:Emergent.Toolbench.RevisionControl.IRevisionService.CurrentProvider">
            <summary>
Gets the current managed revision control provider interface.
</summary>
        </member>
        <member name="P:Emergent.Toolbench.RevisionControl.IRevisionService.AvailableProviders">
            <summary>
Gets a list of available revision control providers.
</summary>
        </member>
        <member name="M:Emergent.Toolbench.RevisionControl.IRevisionService.TestConnection(System.String,System.String,System.String,System.String,System.String@)">
            <summary>
Tests a connection using the information provided.  This will not interrupt any current
connection that is active.
</summary>
            <param name="username">The username to connect with.</param>
            <param name="password">The password to connect with.</param>
            <param name="host">The server/host/repository to connect to.</param>
            <param name="error">The error string that was returned from the provider, if 
any.</param>
            <return>
                <c>true</c> if the connection was successful, otherwise <c>false</c>.</return>
        </member>
        <member name="M:Emergent.Toolbench.RevisionControl.IRevisionService.VerifyConnection">
            <summary>
Verifies that the connection is still valid to the server.  This is a blocking call
and should not be used very often.
</summary>
            <return>
                <c>true</c> if the connection is still valid, otherwise <c>false</c>.</return>
        </member>
        <member name="P:Emergent.Toolbench.RevisionControl.IRevisionService.Changelist">
            <summary>
Gets or sets the current change-list name/description to be using when performing 
revision control operations.
</summary>
        </member>
        <member name="P:Emergent.Toolbench.RevisionControl.IRevisionService.Host">
            <summary>
Gets or sets the host/server that was used to connect with last and the host/server 
that will be used in re-connection attempts.
</summary>
        </member>
        <member name="P:Emergent.Toolbench.RevisionControl.IRevisionService.Password">
            <summary>
Gets or sets the password that was used to connect with last and the password that
will be used in re-connection attempts.
</summary>
        </member>
        <member name="P:Emergent.Toolbench.RevisionControl.IRevisionService.Username">
            <summary>
Gets or sets the username that was used to connect with last and the username that
will be used in re-connection attempts.
</summary>
        </member>
        <member name="P:Emergent.Toolbench.RevisionControl.IRevisionService.IsConnected">
            <summary>
Gets a value indicating if the revision service is currently connected to the revision
provider.
</summary>
        </member>
        <member name="P:Emergent.Toolbench.RevisionControl.IRevisionService.CanConnect">
            <summary>
Gets a value indicating if the revision service can connect, this implies having a 
provider and having it initialized successfully.
</summary>
        </member>
        <member name="M:Emergent.Toolbench.RevisionControl.IRevisionService.Reconnect(System.Boolean)">
            <summary>
Attempts to reconnect to the active provider using the last username and password.
</summary>
            <param name="ignoreFailure">Should we ignore a failed connection, or call the event
handlers for the <see cref="E:Emergent.Toolbench.RevisionControl.IRevisionService.ConnectionFailed" /> event.</param>
            <return>
                <c>true</c> if the connection was successful, otherwise <c>false</c>.</return>
        </member>
        <member name="M:Emergent.Toolbench.RevisionControl.IRevisionService.Disconnect">
            <summary>
Disconnects from the current provider.
</summary>
        </member>
        <member name="M:Emergent.Toolbench.RevisionControl.IRevisionService.Connect(System.String,System.String,System.String,System.Boolean)">
            <summary>
Connects to the initialized provider.
</summary>
            <param name="username">The username to connect with.</param>
            <param name="password">The password to connect with.</param>
            <param name="host">The server/host/repository to connect to.</param>
            <param name="ignoreFailure">Should we ignore a failed connection, or call the event
handlers for the <see cref="E:Emergent.Toolbench.RevisionControl.IRevisionService.ConnectionFailed" /> event.</param>
            <return>
                <c>true</c> if the connection was successful, otherwise <c>false</c>.</return>
        </member>
        <member name="M:Emergent.Toolbench.RevisionControl.IRevisionService.InitializeProvider(System.String)">
            <summary>
Initializes the provider.
</summary>
            <param name="provider">The name of the provider to initialize.</param>
        </member>
        <member name="E:Emergent.Toolbench.RevisionControl.IRevisionService.EndWait">
            <summary>
This event is fired when the revision service has finished a previous request and 
is ready for the <see cref="E:Emergent.Toolbench.RevisionControl.IRevisionService.BeginWait" /> to end.  This is a multi-threaded event.
</summary>
        </member>
        <member name="E:Emergent.Toolbench.RevisionControl.IRevisionService.BeginWait">
            <summary>
This event is fired when the revision service needs the incoming request for a new 
transaction blocked until <see cref="E:Emergent.Toolbench.RevisionControl.IRevisionService.EndWait" /> is called.
</summary>
        </member>
        <member name="E:Emergent.Toolbench.RevisionControl.IRevisionService.Interuption">
            <summary>
This event is fired when the revision service is interrupted during an operation.
This is a multi-threaded event.
</summary>
        </member>
        <member name="E:Emergent.Toolbench.RevisionControl.IRevisionService.ConnectionFailed">
            <summary>
This event is fired when the revision service fails to connect.
</summary>
        </member>
        <member name="E:Emergent.Toolbench.RevisionControl.IRevisionService.ConnectionLost">
            <summary>
This event is fired when the revision service lost a connection when it was not 
expecting to.  This event only fires when the revision service becomes disconnected 
or is unable to connect not through an explicit disconnect call.
</summary>
        </member>
        <member name="T:Emergent.Toolbench.RevisionControl.IRevisionService">
            <summary>
The <see cref="T:Emergent.Toolbench.RevisionControl.IRevisionService" /> interface is the main interface managed code will use
to revision control files.  It contains the events for changes in the revision system, it
also has all the global commands supported by integrated revision control systems which are
add, edit, delete and rename.
</summary>
        </member>
        <member name="P:Emergent.Toolbench.RevisionControl.ConnectionFailedEventArgs.Error">
            <summary>
Gets the error string associated with the connection failed message.
</summary>
            <value>The connection error message.</value>
        </member>
        <member name="M:Emergent.Toolbench.RevisionControl.ConnectionFailedEventArgs.#ctor(System.String)">
            <summary>
Initializes a new instance of the <see cref="T:Emergent.Toolbench.RevisionControl.ConnectionFailedEventArgs" />.
</summary>
            <param name="error">The error that occurred.</param>
        </member>
        <member name="T:Emergent.Toolbench.RevisionControl.ConnectionFailedEventArgs">
            <summary>
The <see cref="T:Emergent.Toolbench.RevisionControl.ConnectionFailedEventArgs" /> class contains the event arguments coming from
a connection failed event.
</summary>
        </member>
        <member name="P:Emergent.Toolbench.RevisionControl.InterruptionEventArgs.Result">
            <summary>
Gets or sets the result that should be returned to the underlying revision system
when an interruption occurs.
</summary>
            <value>The interruption result.</value>
        </member>
        <member name="P:Emergent.Toolbench.RevisionControl.InterruptionEventArgs.Error">
            <summary>
Gets the error string associated with the interruption message.
</summary>
            <value>The connection error message.</value>
        </member>
        <member name="M:Emergent.Toolbench.RevisionControl.InterruptionEventArgs.#ctor(System.String)">
            <summary>
Initializes a new instance of the <see cref="T:Emergent.Toolbench.RevisionControl.InterruptionEventArgs" />.
</summary>
/// <param name="error">The error that occurred.</param></member>
        <member name="T:Emergent.Toolbench.RevisionControl.InterruptionEventArgs">
            <summary>
The <see cref="T:Emergent.Toolbench.RevisionControl.InterruptionEventArgs" /> class contains the event arguments coming from a
interruption event when performing a command in the revision control service.
</summary>
        </member>
        <member name="T:Emergent.Toolbench.RevisionControl.RevisionInterruptResult">
            <summary>
The <see cref="T:Emergent.Toolbench.RevisionControl.RevisionInterruptResult" /> enum is used to return to the native revision
provider what the user chose when presented with several options on how to deal with an
interruption when performing their transaction.
</summary>
        </member>
        <member name="M:Emergent.Toolbench.RevisionControl.IRevisionStatus.Invalidate">
            <summary>
Invalidates this revision status object.
</summary>
        </member>
        <member name="P:Emergent.Toolbench.RevisionControl.IRevisionStatus.IsValid">
            <summary>
Gets a value indicating if the current status object is valid.  An invalid status
object's cached status will not be trusted and will be re-requested directly from the 
provider.
</summary>
        </member>
        <member name="P:Emergent.Toolbench.RevisionControl.IRevisionStatus.IsResolveNeeded">
            <summary>
Gets a valid indicating if the file needs to be resolved.
</summary>
        </member>
        <member name="P:Emergent.Toolbench.RevisionControl.IRevisionStatus.IsLocked">
            <summary>
Gets a valid indicating if the file is currently locked by another user.
</summary>
        </member>
        <member name="P:Emergent.Toolbench.RevisionControl.IRevisionStatus.Action">
            <summary>
Gets the action for the file.
</summary>
        </member>
        <member name="P:Emergent.Toolbench.RevisionControl.IRevisionStatus.File">
            <summary>
Gets the name of the file that the status is for.
</summary>
        </member>
        <member name="T:Emergent.Toolbench.RevisionControl.IRevisionStatus">
            <summary>
The <see cref="T:Emergent.Toolbench.RevisionControl.IRevisionStatus" /> interface exposes a common interface by which we wrap
the various statuses returned by the revision control providers when the status of a file
is requested.  The status for a file contains information like the files current action,
is it locked...etc.
</summary>
        </member>
        <member name="M:Emergent.Toolbench.RevisionControl.IRevisionProvider.Execute(Emergent.Toolbench.RevisionControl.IRevisionService,Emergent.Toolbench.RevisionControl.IRevisionCommand)">
            <summary>
Called by the <see cref="T:Emergent.Toolbench.RevisionControl.IRevisionService" /> when a command is finally ready to 
execute on the command execution thread.  This method may also execute the command
with the native RCS provider if that is its responsibility.
</summary>
            <param name="service">The revision service that is currently running.</param>
            <param name="command">The command that will be executed.</param>
        </member>
        <member name="M:Emergent.Toolbench.RevisionControl.IRevisionProvider.BeforeExecute(Emergent.Toolbench.RevisionControl.IRevisionCommand)">
            <summary>
Before a command executes and before the actual file IO occurs, this method will be 
called, giving the provider a chance to do something before anything occurs to the disk 
or to the state of the native provider.
</summary>
            <param name="command">The command that will be executed.</param>
            <returns>Returns <c>true</c> if the command can execute, otherwise <c>false</c>.
</returns>
        </member>
        <member name="M:Emergent.Toolbench.RevisionControl.IRevisionProvider.Shutdown">
            <summary>
Shutdown the managed provider.
</summary>
        </member>
        <member name="M:Emergent.Toolbench.RevisionControl.IRevisionProvider.Initialize(System.IntPtr)">
            <summary>
Initializes the managed provider.
</summary>
            <param name="nativeProvider">The native RCS provider, if one exists.</param>
        </member>
        <member name="T:Emergent.Toolbench.RevisionControl.IRevisionProvider">
            <summary>
The <see cref="T:Emergent.Toolbench.RevisionControl.IRevisionProvider" /> interface is what every managed RCS provider must 
implement that can be loaded through the 
<code>Emergent.Toolbench.RevisionControl.Provider</code> extension point.  The RCS provider
will be responsible passing the commands to the native provider as well as potentially 
preparing the files on disk to have some operations performed to them.
</summary>
        </member>
        <member name="P:Emergent.Toolbench.RevisionControl.IRevisionTransaction.Progress">
            <summary>
Gets the progress of the transaction.  This is not represented as a percentage of 
completion, it's the number of commands that have completed.
</summary>
        </member>
        <member name="P:Emergent.Toolbench.RevisionControl.IRevisionTransaction.Commands">
            <summary>
Gets the command list for the transaction.
</summary>
        </member>
        <member name="T:Emergent.Toolbench.RevisionControl.IRevisionTransaction">
            <summary>
The <see cref="T:Emergent.Toolbench.RevisionControl.IRevisionTransaction" /> interface represents a collection of commands to 
be run with the revision provider.
</summary>
        </member>
        <member name="M:Emergent.Toolbench.RevisionControl.RevisionCommand.Cancel">
            <summary>
Cancels the command.
</summary>
        </member>
        <member name="M:Emergent.Toolbench.RevisionControl.RevisionCommand.Execute(Emergent.Toolbench.RevisionControl.IRevisionService,Emergent.Toolbench.RevisionControl.IRevisionProvider)">
            <summary>
Executes the command.
</summary>
            <param name="service">The revision service that executed the command.</param>
            <param name="provider">The revision provider to execute the command with.</param>
            <return>The result of executing the command.</return>
        </member>
        <member name="P:Emergent.Toolbench.RevisionControl.RevisionCommand.Status">
            <summary>
Gets the status of the command.
</summary>
        </member>
        <member name="M:Emergent.Toolbench.RevisionControl.RevisionCommand.#ctor">
            <summary>
Initializes a new instance of the <see cref="T:Emergent.Toolbench.RevisionControl.RevisionCommand" /> class.
</summary>
        </member>
        <member name="T:Emergent.Toolbench.RevisionControl.RevisionCommand">
            <summary>
The <see cref="T:Emergent.Toolbench.RevisionControl.RevisionCommand" /> class is a default base class for the 
<see cref="T:Emergent.Toolbench.RevisionControl.IRevisionCommand" /> interface.
</summary>
        </member>
        <member name="M:Emergent.Toolbench.RevisionControl.IRevisionCommand.Cancel">
            <summary>
Cancels the command.
</summary>
        </member>
        <member name="M:Emergent.Toolbench.RevisionControl.IRevisionCommand.Execute(Emergent.Toolbench.RevisionControl.IRevisionService,Emergent.Toolbench.RevisionControl.IRevisionProvider)">
            <summary>
Executes the command.
</summary>
            <param name="service">The revision service that executed the command.</param>
            <param name="provider">The revision provider to execute the command with.</param>
            <return>The result of executing the command.</return>
        </member>
        <member name="P:Emergent.Toolbench.RevisionControl.IRevisionCommand.Status">
            <summary>
Gets the status of the command.
</summary>
        </member>
        <member name="T:Emergent.Toolbench.RevisionControl.IRevisionCommand">
            <summary>
The <see cref="T:Emergent.Toolbench.RevisionControl.IRevisionCommand" /> interface wraps the functionality all commands have
in common that can be run by the revision service.
</summary>
        </member>
        <member name="T:Emergent.Toolbench.RevisionControl.CommandStatus">
            <summary>
The <see cref="T:Emergent.Toolbench.RevisionControl.CommandStatus" /> enum is used to report the result of a command after being
executed.
</summary>
        </member>
        <member name="T:Emergent.Toolbench.RevisionControl.RevisionResult">
            <summary>
The <see cref="T:Emergent.Toolbench.RevisionControl.RevisionResult" /> enum are the possible result values from a command in the 
managed revision command layer.
</summary>
        </member>
        <member name="T:Emergent.Toolbench.RevisionControl.RevisionAction">
            <summary>
The <see cref="T:Emergent.Toolbench.RevisionControl.RevisionAction" /> enum contains the possible action status for a file 
that can be returned by the revision providers.
</summary>
        </member>
        <member name="M:Emergent.Toolbench.RevisionControl.RevisionPolicy.CoversFile(System.IO.FileInfo)">
            <summary>
Determines if the file provided is covered by the policy, or if it should be 
excluded.
</summary>
            <return>
                <c>true</c> if the policy covers that file, otherwise <c>false</c>.
</return>
        </member>
        <member name="M:Emergent.Toolbench.RevisionControl.RevisionPolicy.CoversDirectory(System.IO.DirectoryInfo)">
            <summary>
Determines if the directory provided is covered by the policy, or if it should be 
excluded.
</summary>
            <return>
                <c>true</c> if the policy covers that directory, otherwise <c>false</c>.
</return>
        </member>
        <member name="T:Emergent.Toolbench.RevisionControl.RevisionPolicy">
            <summary>
The <see cref="T:Emergent.Toolbench.RevisionControl.RevisionPolicy" /> class is used to set the import policy to use when 
importing an entire asset web.
</summary>
        </member>
    </members>
</doc>