<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Emergent.Toolbench.Settings</name>
    </assembly>
    <members>
        <member name="T:Emergent.Toolbench.Settings.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.Settings.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.Settings.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.Settings.Properties.Resources.SetSettingTypeMismatch">
            <summary>
              Looks up a localized string similar to Attempt to set setting &apos;{0}&apos; to type &apos;{1}&apos; when type &apos;{2}&apos; was expected..
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.Settings.Properties.Resources.UnknownSetting">
            <summary>
              Looks up a localized string similar to The setting &apos;{0}&apos; does not correspond to any known setting..
            </summary>
        </member>
        <member name="T:Emergent.Toolbench.Settings.SettingService">
            <summary>
            The settings server loads and saves properties of plug-ins that wish to persist information
            about themselves.
            </summary>
        </member>
        <member name="T:Emergent.Toolbench.Settings.ISettingService">
            <summary>
            The interface for a settings service that can save and restore settings for individual
            plug-ins.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.Settings.ISettingService.GetSetting``1(System.String)">
            <summary>
            Retrieves an object from the system settings.
            </summary>
            <param name="id">Unique key string to retrieve the settings object.</param>
            <returns>The settings object.</returns>
            <exception cref="T:System.ArgumentException">This method will throw this exception if the 
            setting you request does not exist.</exception>
        </member>
        <member name="M:Emergent.Toolbench.Settings.ISettingService.GetSetting``1(System.String,``0@)">
            <summary>
            Gets a value indicating if the settings aspect contains a setting with that id.
            </summary>
            <param name="id">Qualified name of setting to retrieve.</param>
            <param name="value">The value of the setting.</param>
            <returns><c>true</c> if the setting exists; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Emergent.Toolbench.Settings.ISettingService.GetSettingAsString(System.String,System.String@)">
            <summary>
            Gets the setting value as a string.
            </summary>
            <param name="id">The qualified name of the setting.</param>
            <param name="value">The value to store the setting in.</param>
            <returns><c>true</c> if the setting exists; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Emergent.Toolbench.Settings.ISettingService.SetSetting(System.String,System.Object)">
            <summary>
            Sets the value of a particular content-independent setting.
            </summary>
            <param name="id">The qualified name of the setting.</param>
            <param name="value">The object to store in the setting.</param>
        </member>
        <member name="M:Emergent.Toolbench.Settings.ISettingService.SetSettingAsString(System.String,System.String)">
            <summary>
            Sets the setting value from a string.
            </summary>
            <param name="id">The qualified name of the setting.</param>
            <param name="value">The value of the setting in string form.</param>
        </member>
        <member name="M:Emergent.Toolbench.Settings.ISettingService.GetSettingDescription(System.String)">
            <summary>
            Retrieves the settings description from the system settings.
            </summary>
            <param name="id">Unique key string to retrieve the settings object.</param>
            <returns>The settings description object.</returns>
        </member>
        <member name="M:Emergent.Toolbench.Settings.ISettingService.GetSettingsDescriptions(Emergent.Toolbench.Settings.SettingStorageMode,System.Boolean)">
            <summary>
            Retrieves the visible settings description matching the specified category.
            </summary>
            <param name="storageMode">Specifies the storage mode of settings to access.</param>
            <param name="visibleOnly">Filter determining whether to return hidden settings.</param>
            <returns>A collection of settings description objects.</returns>
        </member>
        <member name="M:Emergent.Toolbench.Settings.ISettingService.GetSettingsDescriptions(Emergent.Toolbench.Settings.SettingStorageMode,System.String,System.Boolean)">
            <summary>
            Retrieves the visible settings description matching the specified category and
            qualifiers.
            </summary>
            <param name="storageMode">Specifies the storage mode of settings to access.</param>
            <param name="qualifier">Classification of settings to retrieve.</param>
            <param name="visibleOnly">Filter determining whether to return hidden settings.</param>
            <returns>A collection of settings description objects.</returns>
        </member>
        <member name="M:Emergent.Toolbench.Settings.ISettingService.GetSettingsDescriptions(System.String)">
            <summary>
            Retrieves all settings descriptions for the specified content type.
            </summary>
            <param name="contentType">Type of content to search.</param>
            <returns>A collection of settings description objects.</returns>
        </member>
        <member name="M:Emergent.Toolbench.Settings.ISettingService.SaveSettings(Emergent.Toolbench.Settings.SettingStorageMode)">
            <summary>
            Streams the current settings infrastructure to persistent storage.
            </summary>
            <param name="storageMode">Specifies the storage mode of settings to save.</param>
        </member>
        <member name="M:Emergent.Toolbench.Settings.ISettingService.LoadSettings(Emergent.Toolbench.Settings.SettingStorageMode)">
            <summary>
            Reads the current settings infrastructure from persistent storage.
            </summary>
            <param name="storageMode">Specifies the storage mode of settings to load.</param>
        </member>
        <member name="M:Emergent.Toolbench.Settings.ISettingService.AddSettingChangedHandler(System.String,System.EventHandler{Emergent.Toolbench.Settings.SettingChangedEventArgs})">
            <summary>
            Adds a listener for the specified setting. The listener is invoked when the specified
            setting is changed by the user.
            </summary>
            <param name="id">Qualified name of the setting.</param>
            <param name="handler">The listener/handler object.</param>
        </member>
        <member name="M:Emergent.Toolbench.Settings.ISettingService.RemoveSettingChangedHandler(System.String,System.EventHandler{Emergent.Toolbench.Settings.SettingChangedEventArgs})">
            <summary>
            Removes a listener for the specified setting.
            </summary>
            <param name="id">Qualified name of the setting.</param>
            <param name="handler">The listener/handler object.</param>
        </member>
        <member name="M:Emergent.Toolbench.Settings.ISettingService.BeginChange">
            <summary>
            Begins a series of changes to the settings.  Individual setting messages are still 
            fired but if you are changing multiple related settings at once a 
            <see cref="M:Emergent.Toolbench.Settings.ISettingService.BeginChange"/> and <see cref="M:Emergent.Toolbench.Settings.ISettingService.EndChange"/> block should be used.  One
            is implicitly created if one does not already exist.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.Settings.ISettingService.EndChange">
            <summary>
            Ends a series of changes to the settings.  Individual setting messages are still 
            fired but if you are changing multiple related settings at once a 
            <see cref="M:Emergent.Toolbench.Settings.ISettingService.BeginChange"/> and <see cref="M:Emergent.Toolbench.Settings.ISettingService.EndChange"/> block should be used.  One
            is implicitly created if one does not already exist.
            </summary>
        </member>
        <member name="E:Emergent.Toolbench.Settings.ISettingService.SettingChanged">
            <summary>
            Event that fires when a setting tracked by the service changes value.
            </summary>
        </member>
        <member name="E:Emergent.Toolbench.Settings.ISettingService.SettingsChanged">
            <summary>
            Event that fires after a <see cref="M:Emergent.Toolbench.Settings.ISettingService.BeginChange"/> and <see cref="M:Emergent.Toolbench.Settings.ISettingService.EndChange"/> block
            is opened and closed.
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.Settings.ISettingService.Settings">
            <summary>
            Gets an enumerable list of all the settings in the aspect.
            </summary>
        </member>
        <member name="F:Emergent.Toolbench.Settings.SettingService.SettingsFile">
            <summary>
            This event is fired when a single setting is changed.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.Settings.SettingService.#ctor">
            <summary>
            Constructs the SettingService.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.Settings.SettingService.Initialize">
            <summary>
            Initializes the service.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.Settings.SettingService.GatherExtensions">
            <summary>
            Gathers all the plug-ins that use the settings, and creates setting descriptors
            representing each extension.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.Settings.SettingService.GetSettingsDescriptions(Emergent.Toolbench.Settings.SettingStorageMode,System.Boolean)">
            <summary>
            Gets a list of setting descriptors.
            </summary>
            <param name="storageMode">The storage mode of the settings.</param>
            <param name="visibleOnly">Filter determining whether to return hidden settings.</param>
            <returns>The collection of setting descriptors.</returns>
        </member>
        <member name="M:Emergent.Toolbench.Settings.SettingService.GetSettingsDescriptions(Emergent.Toolbench.Settings.SettingStorageMode,System.String,System.Boolean)">
            <summary>
            Gets a list of setting descriptors based on specified parameters.
            </summary>
            <param name="storageMode">The storage mode of the settings.</param>
            <param name="qualifier">Classification of settings to retrieve.</param>
            <param name="visibleOnly">Filter determining whether to return hidden settings.</param>
            <returns>A collection of setting descriptors meeting the search criteria.</returns>
        </member>
        <member name="M:Emergent.Toolbench.Settings.SettingService.GetSettingsDescriptions(System.String)">
            <summary>
            Retrieves all settings descriptions for the specified content type.
            </summary>
            <param name="contentType">Type of content to search.</param>
            <returns>A collection of settings description objects.</returns>
        </member>
        <member name="M:Emergent.Toolbench.Settings.SettingService.GetSettings(Emergent.Toolbench.Settings.SettingStorageMode)">
            <summary>
            Gets the settings dictionary for a given storage mode.
            </summary>
            <param name="storageMode">The storage mode.</param>
            <returns>A settings dictionary.</returns>
        </member>
        <member name="M:Emergent.Toolbench.Settings.SettingService.AddSettingChangedHandler(System.String,System.EventHandler{Emergent.Toolbench.Settings.SettingChangedEventArgs})">
            <summary>
            Adds a listener for the specified setting. The listener is invoked when the specified
            setting is changed by the user.
            </summary>
            <param name="id">Qualified name of the setting.</param>
            <param name="handler">The listener/handler object.</param>
        </member>
        <member name="M:Emergent.Toolbench.Settings.SettingService.RemoveSettingChangedHandler(System.String,System.EventHandler{Emergent.Toolbench.Settings.SettingChangedEventArgs})">
            <summary>
            Removes a listener for the specified setting.
            </summary>
            <param name="id">Qualified name of the setting.</param>
            <param name="handler">The listener/handler object.</param>
        </member>
        <member name="M:Emergent.Toolbench.Settings.SettingService.GetSettingsPath(Emergent.Toolbench.Settings.SettingStorageMode)">
            <summary>
            Gets the settings directory based on the storage mode.
            </summary>
            <param name="storageMode">The storage mode to find the settings folder for.</param>
            <returns>The settings folder for the storage mode.</returns>
        </member>
        <member name="M:Emergent.Toolbench.Settings.SettingService.SaveSettings(Emergent.Toolbench.Settings.SettingStorageMode)">
            <summary>
            Saves the settings of a particular storage mode.
            </summary>
            <param name="storageMode">The storage mode.</param>
        </member>
        <member name="M:Emergent.Toolbench.Settings.SettingService.LoadSettings(Emergent.Toolbench.Settings.SettingStorageMode)">
            <summary>
            Loads the settings for a particular storage mode.
            </summary>
            <param name="storageMode">The storage mode.</param>
        </member>
        <member name="M:Emergent.Toolbench.Settings.SettingService.GetSetting``1(System.String)">
            <summary>
            Retrieves an object from the system settings.
            </summary>
            <param name="id">Unique key string to retrieve the settings object.</param>
            <returns>The settings object.</returns>
            <exception cref="T:System.ArgumentException">This method will throw this exception if the 
            setting you request does not exist.</exception>
        </member>
        <member name="M:Emergent.Toolbench.Settings.SettingService.GetSetting``1(System.String,``0@)">
            <summary>
            Retrieves a setting and returns a value indicating success.
            </summary>
            <param name="id">Qualified name of setting to retrieve.</param>
            <param name="value">The value of the setting.</param>
            <returns><c>true</c> if the setting exists; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Emergent.Toolbench.Settings.SettingService.GetSettingAsString(System.String,System.String@)">
            <summary>
            Retrieves a setting as a string and returns a value indicating success.
            </summary>
            <param name="id">Qualified name of setting to retrieve.</param>
            <param name="value">The value of the setting as a string.</param>
            <returns><c>true</c> if the setting exists; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Emergent.Toolbench.Settings.SettingService.SetSetting(System.String,System.Object)">
            <summary>
            Sets the value of a particular content-independent setting.
            </summary>
            <param name="id">The qualified name of the setting.</param>
            <param name="value">The object to store in the setting.</param>
        </member>
        <member name="M:Emergent.Toolbench.Settings.SettingService.SetSettingAsString(System.String,System.String)">
            <summary>
            Sets the value of a particular content-independent setting using a string.
            </summary>
            <param name="id">The qualified name of the setting.</param>
            <param name="str">The value to store in the setting.</param>
        </member>
        <member name="M:Emergent.Toolbench.Settings.SettingService.RaiseSettingChanged(System.String,Emergent.Toolbench.Settings.ISettingDescriptor,System.Object,System.Object)">
            <summary>
            Raise any settings change events or call any settings specific handlers.
            </summary>
            <param name="id">The setting id.</param>
            <param name="descriptor">The setting descriptor.</param>
            <param name="value">The new object value.</param>
            <param name="oldValue">The old object value.</param>
        </member>
        <member name="M:Emergent.Toolbench.Settings.SettingService.GetSettingDescription(System.String)">
            <summary>
            Retrieves the settings description from the system settings.
            </summary>
            <param name="id">Unique key string to retrieve the settings object.</param>
            <returns>The settings description object.</returns>
        </member>
        <member name="E:Emergent.Toolbench.Settings.SettingService.SettingsChanged">
            <summary>
            This event will fire after a begin/end setting change transaction block is started
            and stopped.
            </summary>
        </member>
        <member name="E:Emergent.Toolbench.Settings.SettingService.SettingChanged">
            <summary>
            Event that fires when a setting tracked by the service changes value.
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.Settings.SettingService.Settings">
            <summary>
            Gets an enumerable list of all the settings in the service.
            </summary>
        </member>
        <member name="T:Emergent.Toolbench.Settings.ISettingsAspect">
            <summary>
            Interface for interacting with content-specific settings.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.Settings.ISettingsAspect.GetSettingsDescriptions(System.Boolean)">
            <summary>
            Fetches descriptions for all settings associated with the content type.
            </summary>
            <param name="visibleOnly">Filter determining whether to return hidden settings.</param>
            <returns>Collection of requested setting descriptions.</returns>
        </member>
        <member name="M:Emergent.Toolbench.Settings.ISettingsAspect.GetSettingsDescriptions(System.String,System.Boolean)">
            <summary>
            Fetches descriptions for a subset of settings associated with the content type.
            </summary>
            <param name="qualifier">Classification of settings to retrieve.</param>
            <param name="visibleOnly">Filter determining whether to return hidden settings.</param>
            <returns>Collection of requested setting descriptions.</returns>
        </member>
        <member name="M:Emergent.Toolbench.Settings.ISettingsAspect.GetSetting``1(System.String)">
            <summary>
            Retrieves the current value of a content-specific setting.
            </summary>
            <param name="id">Qualified name of setting to retrieve.</param>
            <returns>Value of setting.</returns>
            <exception cref="T:System.ArgumentException">This method will throw this exception if the 
            setting you request does not exist.</exception>
        </member>
        <member name="M:Emergent.Toolbench.Settings.ISettingsAspect.GetSetting``1(System.String,``0@)">
            <summary>
            Gets a value indicating if the settings aspect contains a setting with that id.
            </summary>
            <param name="id">Qualified name of setting to retrieve.</param>
            <param name="value">The value of the setting.</param>
            <returns><c>true</c> if the setting exists; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Emergent.Toolbench.Settings.ISettingsAspect.GetSettingAsString(System.String,System.String@)">
            <summary>
            Gets the setting value as a string.
            </summary>
            <param name="id">The qualified name of the setting.</param>
            <param name="value">The value to store the setting in.</param>
            <returns><c>true</c> if the setting exists; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Emergent.Toolbench.Settings.ISettingsAspect.SetSetting(System.String,System.Object)">
            <summary>
            Specifies a new value for a content-specific setting.  Assumes
            setting already exists with an initialized value.
            </summary>
            <param name="id">Qualified name of setting to change.</param>
            <param name="value">New value of the setting.</param>
        </member>
        <member name="M:Emergent.Toolbench.Settings.ISettingsAspect.SetSettingAsString(System.String,System.String)">
            <summary>
            Sets the setting value from a string.
            </summary>
            <param name="id">The qualified name of the setting.</param>
            <param name="value">The value of the setting in string form.</param>
        </member>
        <member name="M:Emergent.Toolbench.Settings.ISettingsAspect.AddSettingChangedHandler(System.String,System.EventHandler{Emergent.Toolbench.Settings.SettingChangedEventArgs})">
            <summary>
            Registers a handler for responding to a changed content setting.
            </summary>
            <param name="id">Qualified name of the setting of interest.</param>
            <param name="handler">Handler to be called on setting change.</param>
        </member>
        <member name="M:Emergent.Toolbench.Settings.ISettingsAspect.RemoveSettingChangedHandler(System.String,System.EventHandler{Emergent.Toolbench.Settings.SettingChangedEventArgs})">
            <summary>
            Removes a previously registered handler for content setting changes.
            </summary>
            <param name="id">Qualified name of the setting of interest.</param>
            <param name="handler">Handler to be removed.</param>
        </member>
        <member name="M:Emergent.Toolbench.Settings.ISettingsAspect.SaveSettings">
            <summary>
            Writes content-specific settings from the aspect.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.Settings.ISettingsAspect.SaveUserSettings">
            <summary>
            Writes user-specific settings associated with particular content.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.Settings.ISettingsAspect.ExtractSettings(System.Xml.Linq.XDocument)">
            <summary>
            Parses content settings from an XML node hierarchy.
            </summary>
            <param name="document">The XML to be parsed.</param>
        </member>
        <member name="M:Emergent.Toolbench.Settings.ISettingsAspect.ToXml">
            <summary>
            Gets an XML representation of the data stored on the aspect. This XML representation is
            serialized by the owning document. Depending on the document file format it may be
            included in the document file or written to a separate file.
            </summary>
            <returns>The root node of the XML representation.</returns>
        </member>
        <member name="M:Emergent.Toolbench.Settings.ISettingsAspect.BeginChange">
            <summary>
            Begins a series of changes to the settings.  Individual setting messages are still 
            fired but if you are changing multiple related settings at once a 
            <see cref="M:Emergent.Toolbench.Settings.ISettingsAspect.BeginChange"/> and <see cref="M:Emergent.Toolbench.Settings.ISettingsAspect.EndChange"/> block should be used.  One
            is implicitly created if one does not already exist.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.Settings.ISettingsAspect.EndChange">
            <summary>
            Ends a series of changes to the settings.  Individual setting messages are still 
            fired but if you are changing multiple related settings at once a 
            <see cref="M:Emergent.Toolbench.Settings.ISettingsAspect.BeginChange"/> and <see cref="M:Emergent.Toolbench.Settings.ISettingsAspect.EndChange"/> block should be used.  One
            is implicitly created if one does not already exist.
            </summary>
        </member>
        <member name="E:Emergent.Toolbench.Settings.ISettingsAspect.SettingChanged">
            <summary>
            Event that fires when a setting tracked by the aspect changes value.
            </summary>
        </member>
        <member name="E:Emergent.Toolbench.Settings.ISettingsAspect.SettingsChanged">
            <summary>
            Event that fires after a <see cref="M:Emergent.Toolbench.Settings.ISettingsAspect.BeginChange"/> and <see cref="M:Emergent.Toolbench.Settings.ISettingsAspect.EndChange"/> block
            is opened and closed.
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.Settings.ISettingsAspect.Settings">
            <summary>
            Gets an enumerable list of all the settings in the aspect.
            </summary>
        </member>
        <member name="T:Emergent.Toolbench.Settings.SettingStorageMode">
            <summary>
            An enumerator of the different setting storage modes.
            </summary>
        </member>
        <member name="F:Emergent.Toolbench.Settings.SettingStorageMode.PerContent">
            <summary>
            PerContent settings will dirty content when changed and are managed by a
            SettingsAspect. They are often persisted in the content document itself.
            </summary>
        </member>
        <member name="F:Emergent.Toolbench.Settings.SettingStorageMode.PerUser">
            <summary>
            PerUser settings track user preferences and are managed by the SettingService. They are
            persisted in a user data folder.
            </summary>
        </member>
        <member name="F:Emergent.Toolbench.Settings.SettingStorageMode.PerUserPerContent">
            <summary>
            PerUserPerContent settings are associated with a piece of content, but do not dirty it
            when changed. They are managed by a SettingsAspect and typically persisted in a
            side-by-side settings file unique to the current user.
            </summary>
        </member>
        <member name="T:Emergent.Toolbench.Settings.SettingDescriptor">
            <summary>
            Describes a setting.
            </summary>
        </member>
        <member name="T:Emergent.Toolbench.Settings.ISettingDescriptor">
            <summary>
            Describes a setting.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.Settings.ISettingDescriptor.CreateInstance">
            <summary>
            Creates an instance of the setting property.
            </summary>
            <returns>A new instance of the setting property.</returns>
        </member>
        <member name="P:Emergent.Toolbench.Settings.ISettingDescriptor.Id">
            <summary>
            Gets the id of the descriptor.
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.Settings.ISettingDescriptor.Path">
            <summary>
            Gets the path of the descriptor.
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.Settings.ISettingDescriptor.Name">
            <summary>
            Gets the name of the descriptor.
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.Settings.ISettingDescriptor.DisplayName">
            <summary>
            Gets the display name for the descriptor.
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.Settings.ISettingDescriptor.Visible">
            <summary>
            Gets a value indicating whether the descriptor is visible.
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.Settings.ISettingDescriptor.IsEncrypted">
            <summary>
            Gets a value indicating if the value of the setting should be encrypted on save.
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.Settings.ISettingDescriptor.StorageMode">
            <summary>
            Gets the storage mode for the setting.
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.Settings.ISettingDescriptor.ContentType">
            <summary>
            Gets the content type for content-specific settings.
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.Settings.ISettingDescriptor.PropertyType">
            <summary>
            Gets the settings descriptor property type.
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.Settings.ISettingDescriptor.ManagedType">
            <summary>
            Gets the underlying managed type for the property.
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.Settings.ISettingDescriptor.DefaultValue">
            <summary>
            Gets the default value of the setting.
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.Settings.ISettingDescriptor.Description">
            <summary>
            Gets the description of the setting.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.Settings.SettingDescriptor.#ctor(Emergent.Toolbench.IElementData)">
            <summary>
            Creates a new instance of a setting based on the element data.
            </summary>
            <param name="data">Information about the setting provided by a plug-in manifest.</param>
        </member>
        <member name="M:Emergent.Toolbench.Settings.SettingDescriptor.CreateInstance">
            <summary>
            Creates an instance of the setting property.
            </summary>
            <returns>A new instance of the setting property.</returns>
        </member>
        <member name="M:Emergent.Toolbench.Settings.SettingDescriptor.GetSettingName(System.String)">
            <summary>
            Returns the name of the setting without the qualifier prefixes; e.g., an input of
            "advanced.user.inputmode" returns "inputmode".
            </summary>
            <param name="fullName">The fully qualified name of the setting.</param>
            <returns>The unqualified setting name.</returns>
        </member>
        <member name="P:Emergent.Toolbench.Settings.SettingDescriptor.Id">
            <summary>
            Gets the id of the descriptor.
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.Settings.SettingDescriptor.Path">
            <summary>
            Gets the path of the descriptor.
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.Settings.SettingDescriptor.Name">
            <summary>
            Gets the name of the descriptor.
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.Settings.SettingDescriptor.DisplayName">
            <summary>
            Gets the display name for the descriptor.
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.Settings.SettingDescriptor.Visible">
            <summary>
            Gets a value indicating whether the descriptor is visible.
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.Settings.SettingDescriptor.IsEncrypted">
            <summary>
            Gets a value indicating if the value of the setting should be encrypted on save.
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.Settings.SettingDescriptor.StorageMode">
            <summary>
            Gets the storage mode for the settings.
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.Settings.SettingDescriptor.ContentType">
            <summary>
            Gets the content type for content-specific settings.
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.Settings.SettingDescriptor.PropertyType">
            <summary>
            Gets the settings descriptor property type.
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.Settings.SettingDescriptor.ManagedType">
            <summary>
            Gets the underlying managed type for the property.
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.Settings.SettingDescriptor.DefaultValue">
            <summary>
            Gets the default value of the setting.
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.Settings.SettingDescriptor.Description">
            <summary>
            Gets the description of the setting.
            </summary>
        </member>
        <member name="T:Emergent.Toolbench.Settings.ExitHandlerAction">
            <summary>
            Invoked when Toolbench exits. This class writes user settings to persistent storage.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.Settings.ExitHandlerAction.Execute">
            <summary>
            Called by the platform just before it terminates.
            </summary>
        </member>
        <member name="T:Emergent.Toolbench.Settings.SettingsAspect">
            <summary>
            The SettingsAspect holds per-content settings data. The settings are defined by content
            type and tracked for each instance of content. They are typically written as XML with or
            alongside a document.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.Settings.SettingsAspect.#ctor">
            <summary>
            Constructor for SettingsAspect.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.Settings.SettingsAspect.CanConnectContent(Emergent.Toolbench.ContentService.AbstractContent)">
            <summary>
            Checks for content-specific settings and determines whether the aspect is necessary for
            the content.
            </summary>
            <param name="content">The content to be associated.</param>
            <returns>True if the aspect should be associated with the content.</returns>
        </member>
        <member name="M:Emergent.Toolbench.Settings.SettingsAspect.OnContentConnected">
            <summary>
            Determines whether the aspect should be attached to the given content and performs any
            work needed at that time.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.Settings.SettingsAspect.OnContentDisconnected">
            <summary>
            Called just before the aspect is removed from the content it is currently attached to.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.Settings.SettingsAspect.GetSettingsDescriptions(System.Boolean)">
            <summary>
            Fetches descriptions for all settings associated with the content type.
            </summary>
            <param name="visibleOnly">Filter determining whether to return hidden settings.</param>
            <returns>Collection of requested setting descriptions.</returns>
        </member>
        <member name="M:Emergent.Toolbench.Settings.SettingsAspect.GetSettingsDescriptions(System.String,System.Boolean)">
            <summary>
            Fetches descriptions for a subset of settings associated with the content type.
            </summary>
            <param name="qualifier">Classification of settings to retrieve.</param>
            <param name="visibleOnly">Filter determining whether to return hidden settings.</param>
            <returns>Collection of requested setting descriptions.</returns>
        </member>
        <member name="M:Emergent.Toolbench.Settings.SettingsAspect.GetSetting``1(System.String)">
            <summary>
            Retrieves the current value of a content-specific setting.
            </summary>
            <param name="id">Qualified name of setting to retrieve.</param>
            <returns>Value of setting.</returns>
            <exception cref="T:System.ArgumentException">This method will throw this exception if the 
            setting you request does not exist.</exception>
        </member>
        <member name="M:Emergent.Toolbench.Settings.SettingsAspect.GetSetting``1(System.String,``0@)">
            <summary>
            Gets a value indicating if the settings aspect contains a setting with that id.
            </summary>
            <param name="id">Qualified name of setting to retrieve.</param>
            <param name="value">The value of the setting.</param>
            <returns><c>true</c> if the setting exists; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Emergent.Toolbench.Settings.SettingsAspect.GetSettingAsString(System.String,System.String@)">
            <summary>
            Gets the setting value as a string.
            </summary>
            <param name="id">The qualified name of the setting.</param>
            <param name="value">The value to store the setting in.</param>
            <returns><c>true</c> if the setting exists; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Emergent.Toolbench.Settings.SettingsAspect.SetSetting(System.String,System.Object)">
            <summary>
            Specifies a new value for a content-specific setting. Assumes setting already exists
            with an initialized value.
            </summary>
            <param name="id">Qualified name of setting to change.</param>
            <param name="value">New value of the setting.</param>
        </member>
        <member name="M:Emergent.Toolbench.Settings.SettingsAspect.SetSettingAsString(System.String,System.String)">
            <summary>
            Sets the setting value from a string.
            </summary>
            <param name="id">The qualified name of the setting.</param>
            <param name="value">The value of the setting in string form.</param>
        </member>
        <member name="M:Emergent.Toolbench.Settings.SettingsAspect.RaiseSettingChanged(System.String,Emergent.Toolbench.Settings.ISettingDescriptor,System.Object,System.Object)">
            <summary>
            Raise any settings change events or call any settings specific handlers.
            </summary>
            <param name="id">The setting id.</param>
            <param name="descriptor">The setting descriptor.</param>
            <param name="value">The new object value.</param>
            <param name="oldValue">The old object value.</param>
        </member>
        <member name="M:Emergent.Toolbench.Settings.SettingsAspect.AddSettingChangedHandler(System.String,System.EventHandler{Emergent.Toolbench.Settings.SettingChangedEventArgs})">
            <summary>
            Registers a handler for responding to a changed content setting.
            </summary>
            <param name="id">Qualified name of the setting of interest.</param>
            <param name="handler">Handler to be called on setting change.
            </param>
        </member>
        <member name="M:Emergent.Toolbench.Settings.SettingsAspect.RemoveSettingChangedHandler(System.String,System.EventHandler{Emergent.Toolbench.Settings.SettingChangedEventArgs})">
            <summary>
            Removes a previously registered handler for content setting changes.
            </summary>
            <param name="id">Qualified name of the setting of interest.</param>
            <param name="handler">Handler to be removed.</param>
        </member>
        <member name="M:Emergent.Toolbench.Settings.SettingsAspect.SaveSettings">
            <summary>
            Writes an XML file named [document].settings that contains all content settings. This
            is a default behavior that can be overridden or sidestepped for content types that
            embed settings directly in their document format.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.Settings.SettingsAspect.SaveUserSettings">
            <summary>
            Writes an XML file named [document].[domain].[user].settings containing all user
            content settings.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.Settings.SettingsAspect.ExtractSettings(System.Xml.Linq.XDocument)">
            <summary>
            Parses content settings from an XML node hierarchy.
            </summary>
            <param name="document">The XML to be parsed.</param>
        </member>
        <member name="M:Emergent.Toolbench.Settings.SettingsAspect.ToXml">
            <summary>
            Gets an XML representation of the data stored on the aspect. This XML representation is
            serialized by the owning document. Depending on the document file format it may be
            included in the document file or written to a separate file.
            </summary>
            <returns>The root node of the XML representation.</returns>
        </member>
        <member name="M:Emergent.Toolbench.Settings.SettingsAspect.BeginChange">
            <summary>
            Begins a series of changes to the settings.  Individual setting messages are still 
            fired but if you are changing multiple related settings at once a 
            <see cref="M:Emergent.Toolbench.Settings.SettingsAspect.BeginChange"/> and <see cref="M:Emergent.Toolbench.Settings.SettingsAspect.EndChange"/> block should be used.  One
            is implicitly created if one does not already exist.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.Settings.SettingsAspect.EndChange">
            <summary>
            Ends a series of changes to the settings.  Individual setting messages are still 
            fired but if you are changing multiple related settings at once a 
            <see cref="M:Emergent.Toolbench.Settings.SettingsAspect.BeginChange"/> and <see cref="M:Emergent.Toolbench.Settings.SettingsAspect.EndChange"/> block should be used.  One
            is implicitly created if one does not already exist.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.Settings.SettingsAspect.ToUserXml">
            <summary>
            Gets an XML representation of the user data stored on the aspect.
            </summary>
            <returns>The root node of the XML representation.</returns>
        </member>
        <member name="M:Emergent.Toolbench.Settings.SettingsAspect.StreamSettings(Emergent.Toolbench.Settings.SettingStorageMode)">
            <summary>
            Generates an XML representation for settings tracked by the aspect with a particular
            storage mode.
            </summary>
            <param name="storageMode">The storage mode of settings to process.</param>
            <returns>The root node of the XML representation.</returns>
        </member>
        <member name="M:Emergent.Toolbench.Settings.SettingsAspect.OnDocumentSaved(Emergent.Toolbench.ContentService.AbstractDocument)">
            <summary>
            Triggers a save of user content settings whenever the associated content is saved.
            </summary>
            <param name="sender">The content being saved.</param>
        </member>
        <member name="M:Emergent.Toolbench.Settings.SettingsAspect.LoadSettings">
            <summary>
            Attempts to load content settings from an XML file named [document].settings. This is a
            default implementation that is expected to be overridden for content types that embed
            settings directly in their document format.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.Settings.SettingsAspect.LoadUserSettings">
            <summary>
            Attempts to load user settings from an XML file named
            [document].[domain].[user].settings.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.Settings.SettingsAspect.CreateDefaults">
            <summary>
            Adds default values for all settings not successfully loaded from a document. Defaults
            are specified as part of the SettingsSet extension point.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.Settings.SettingsAspect.InitializeSettingsObject(System.String,System.Object)">
            <summary>
            Sets the initial value of a content setting, whether loading from a document or a
            default.
            </summary>
            <param name="id">The qualified name of the setting.</param>
            <param name="obj">The initial value of the setting.</param>
        </member>
        <member name="M:Emergent.Toolbench.Settings.SettingsAspect.HasGeneralSettings">
            <summary>
            Determines whether the aspect tracks any PerContent settings.
            </summary>
            <returns>True if PerContent settings are present.</returns>
        </member>
        <member name="M:Emergent.Toolbench.Settings.SettingsAspect.HasUserSettings">
            <summary>
            Determines whether the aspect tracks any PerUserPerContent settings.
            </summary>
            <returns>True if PerUserPerContent settings are present.</returns>
        </member>
        <member name="M:Emergent.Toolbench.Settings.SettingsAspect.ConstructSettingsPath(Emergent.Toolbench.ContentService.AbstractDocument)">
            <summary>
            Builds a default PerContent settings file path.
            </summary>
            <param name="dataFile">The document with settings.</param>
            <returns>The default settings file path.</returns>
        </member>
        <member name="M:Emergent.Toolbench.Settings.SettingsAspect.ConstructUserSettingsPath(Emergent.Toolbench.ContentService.AbstractDocument,System.String)">
            <summary>
            Builds a default PerUserPerContent settings file path.
            </summary>
            <param name="dataFile">The document with settings.</param>
            <param name="extension">The setting file extension.</param>
            <returns>The default settings file path.</returns>
        </member>
        <member name="E:Emergent.Toolbench.Settings.SettingsAspect.SettingChanged">
            <summary>
            Event that fires when a setting tracked by the aspect changes value.
            </summary>
        </member>
        <member name="E:Emergent.Toolbench.Settings.SettingsAspect.SettingsChanged">
            <summary>
            Event that fires after a <see cref="M:Emergent.Toolbench.Settings.SettingsAspect.BeginChange"/> and <see cref="M:Emergent.Toolbench.Settings.SettingsAspect.EndChange"/> block
            is opened and closed.
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.Settings.SettingsAspect.Settings">
            <summary>
            Gets an enumerable list of all the settings in the aspect.
            </summary>
        </member>
        <member name="T:Emergent.Toolbench.Settings.ExtensionPoints">
            <summary>
            Holds the extension point ids for this assembly.
            </summary>
        </member>
        <member name="T:Emergent.Toolbench.Settings.EmbeddedSettingsAspect">
            <summary>
            Variant of <seealso cref="T:Emergent.Toolbench.Settings.SettingsAspect"/> which loads settings from the document XML file
            itself rather than a sibling file on disk.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.Settings.EmbeddedSettingsAspect.LoadSettings">
            <summary>
            Loads settings from the document's XML.
            </summary>
        </member>
        <member name="T:Emergent.Toolbench.Settings.SettingChangedEventArgs">
            <summary>
            Contains the needed information about the changing of a setting.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.Settings.SettingChangedEventArgs.#ctor(System.String,Emergent.Toolbench.Settings.ISettingDescriptor,System.Object,System.Object)">
            <summary>
            Creates a new instance of <see cref="T:Emergent.Toolbench.Settings.SettingChangedEventArgs"/>.
            </summary>
            <param name="name">The name of the setting.</param>
            <param name="descriptor">The setting descriptor.</param>
            <param name="value">The new setting value.</param>
            <param name="oldValue">The old setting value.</param>
        </member>
        <member name="P:Emergent.Toolbench.Settings.SettingChangedEventArgs.Name">
            <summary>
            Gets the name of the setting.
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.Settings.SettingChangedEventArgs.StorageMode">
            <summary>
            Gets the setting storage mode.
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.Settings.SettingChangedEventArgs.Descriptor">
            <summary>
            Gets the setting descriptor.
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.Settings.SettingChangedEventArgs.Value">
            <summary>
            Gets the value of the setting.
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.Settings.SettingChangedEventArgs.OldValue">
            <summary>
            Gets the old value of the setting.
            </summary>
        </member>
        <member name="T:Emergent.Toolbench.Settings.SettingAction">
            <summary>
            Action handler that assigns a specific value to a setting. This generic class can be reused
            by many specific actions via the data-driven action extension point.  For example, it can
            be used by toolbar buttons that toggle between different modes, persisted via a setting.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.Settings.SettingAction.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of <see cref="T:Emergent.Toolbench.Settings.SettingAction"/>.
            </summary>
            <param name="setting">The setting id.</param>
            <param name="value">The setting value.</param>
        </member>
        <member name="M:Emergent.Toolbench.Settings.SettingAction.Execute(Emergent.Toolbench.Actions.ExecutionContext,Emergent.Toolbench.Actions.ExecutionStyle)">
            <summary>
            Performs the action of changing the setting value.
            </summary>
            <param name="context">The execution context of the action.</param>
            <param name="style">The execution style of the action.</param>
            <returns>The execution result.</returns>
        </member>
        <member name="M:Emergent.Toolbench.Settings.SettingAction.GetSetting(Emergent.Toolbench.ContentService.AbstractContent,System.String@)">
            <summary>
            Determines whether the setting associated with the toolbar button is currently valid
            and relevant based on the active content. If so, the current value of the setting is
            retrieved.
            </summary>
            <param name="activeContent">The currently active content.</param>
            <param name="value">The current value of the setting.</param>
            <returns>True if the setting is ready for writing.</returns>
        </member>
        <member name="T:Emergent.Toolbench.Settings.Plugin">
            <summary>
            Handles the starting and stopping of the settings plug-in.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.Settings.Plugin.Start">
            <summary>
            Starts the settings server and adds it to the platform.
            </summary>
        </member>
        <member name="T:Emergent.Toolbench.Settings.ContentSettingChangeAction">
            <summary>
            This action modifies the value of a content setting.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.Settings.ContentSettingChangeAction.#ctor(Emergent.Toolbench.Settings.ISettingsAspect,System.String,System.Object)">
            <summary>
            Constructor for the action.
            </summary>
            <param name="settingsAspect">The SettingsAspect that owns the setting to be changed.
            </param>
            <param name="settingId">The qualified name of the setting.</param>
            <param name="newValue">New value to assign to the setting.</param>
        </member>
        <member name="M:Emergent.Toolbench.Settings.ContentSettingChangeAction.Execute(Emergent.Toolbench.Actions.ExecutionContext,Emergent.Toolbench.Actions.ExecutionStyle)">
            <summary>
            Changes the value of the setting.
            </summary>
            <param name="context">The execution context of the action.</param>
            <param name="style">The execution style of the action.</param>
            <returns>The execution result.</returns>
        </member>
        <member name="M:Emergent.Toolbench.Settings.ContentSettingChangeAction.BeginUndo">
            <summary>
            No work to perform.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.Settings.ContentSettingChangeAction.EndUndo">
            <summary>
            Restores the original value of the setting.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.Settings.ContentSettingChangeAction.BeginRedo">
            <summary>
            Repeats the original operation.
            </summary>
        </member>
        <member name="M:Emergent.Toolbench.Settings.ContentSettingChangeAction.EndRedo">
            <summary>
            No work to perform.
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.Settings.ContentSettingChangeAction.Description">
            <summary>
            Gets a description used to display information about the undo/redo operation to the
            user.
            </summary>
            <value>The description string.</value>
        </member>
        <member name="P:Emergent.Toolbench.Settings.ContentSettingChangeAction.IsUndoable">
            <summary>
            Gets a value indicating whether the action is undoable. Always true.
            </summary>
        </member>
        <member name="P:Emergent.Toolbench.Settings.ContentSettingChangeAction.ModifiesContent">
            <summary>
            Gets a value indicating whether this action should dirty the content. Always true.
            </summary>
        </member>
    </members>
</doc>
